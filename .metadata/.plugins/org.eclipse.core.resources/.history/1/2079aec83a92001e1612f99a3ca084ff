/*
 * API_scheduler.c
 *
 *  Created on: Nov 30, 2023
 *      Author: osboxes
 */

#include "API_scheduler.h"
#include "main.h"
#include "BMP180.h"

#include <stdio.h>
#include <string.h>

#include "API_uart.h"

extern TIM_HandleTypeDef htim10;

static bool_t schedulerFlag = false;

static bool_t serialReadFlag = false;

static float pressure[4] = {0};
static float temperature[4] = {0};

static char bufferSerial[50] = {0};

static char serialBufferReception[10];

float alarmTemperature = 25.00;


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){

	static uint16_t count = 0;
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	if(count==3){
		//HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
		schedulerFlag = true;
		count = 0;
	}
	count++;

}

bool_t readSensor(void){

	if(schedulerFlag){
		schedulerFlag = false;
		HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);

		temperature[3] = temperature[2];
		temperature[2] = temperature[1];
		temperature[1] = temperature[0];

		pressure[3] = pressure[2];
		pressure[2] = pressure[1];
		pressure[1] = pressure[0];


		temperature[0] = BMP180_GetTemp();
		pressure[0] = BMP180_GetPress (0);

		//Esto envía los valores actuales de presión y temperatura a la UART
		//sprintf (bufferSerial,"%4.2fC %6.0fPa \n\r",temperature[0],pressure[0]);
		//uartSendString((const uint8_t *)bufferSerial);

		return true;
	}
	return false;
}

void readDataTemperature(float* diplayTemperature){

	*diplayTemperature = temperature[0];
	*(diplayTemperature+1) = temperature[1];
	*(diplayTemperature+2) = temperature[2];
	*(diplayTemperature+3) = temperature[3];

}

void readDataPressure(float* diplayPressure){

	*diplayPressure = pressure[0];
	*(diplayPressure+1) = pressure[1];
	*(diplayPressure+2) = pressure[2];
	*(diplayPressure+3) = pressure[3];

}

void readDataSerial(void){


		uartReceiveStringSize((uint8_t *) serialBufferReception,3);
		if(serialBufferReception[2]=='\r'){
			alarmTemperature = (serialBufferReception[0]-48)*10 + (serialBufferReception[1]-48);

			serialReadFlag=true;
		}


}


