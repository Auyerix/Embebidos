/*
 * API_screen_managment.c
 *
 *  Created on: Nov 27, 2023
 *      Author: osboxes
 */

#include "API_screen_managment.h"
#include "stm32f4xx_hal.h"
#include "main.h"
#include "API_debounce.h"
#include "API_scheduler.h"

//definición de una instancia de screenState_t con los distintos estados de la máquina
static screenState_t screenState;

//Matríz para recibir los valores a publicar de temperatura
float diplayTemperature[4] = {0};


void screenFSM_init(void){

	//inicio de la máquina de estados
	screenState = SCREEN_MAIN;

}

void screenFSM_update(void){


		switch(screenState){

		case SCREEN_MAIN:
			if(readKey()){
				screenState = SCREEN_ALARMS;
			}

		break;

		case SCREEN_ALARMS:
			if(readKey()){
				screenState = SCREEN_HISTORICAL;
			}


		break;

		case SCREEN_HISTORICAL:
			if(readKey()){
				screenState = SCREEN_MAIN;
			}


		break;



		default:
		screenState = SCREEN_MAIN;

		}


}

void screen_data_update(void){

	if(screenState == SCREEN_MAIN){

		readDataTemperature(diplayTemperature);
	}

}

void show_data(void){

	//Mensaje de Bienvenida PASAR A LA API
	//el or se hace según la posición de memoria de inicio
	//depende de la tabla de memoria que es distinta en 16x4 y 20x4
	//ver https://controllerstech.com/lcd-20x4-using-i2c-with-stm32/

	lcd_clear();

	lcd_send_cmd (0x80|0x00);
	lcd_send_string("Datos");

	lcd_send_cmd (0x80|0x40);
	lcd_send_string("Datos1");

	lcd_send_cmd (0x80|0x10);
	lcd_send_string("Datos2");

	lcd_send_cmd (0x80|0x50);
	lcd_send_string("Datos3");



}





