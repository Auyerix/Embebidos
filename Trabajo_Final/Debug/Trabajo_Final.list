
Trabajo_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f04  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003098  08003098  00013098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003104  08003104  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003104  08003104  00013104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800310c  0800310c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800310c  0800310c  0001310c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003110  08003110  00013110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003114  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  2000000c  08003120  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08003120  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cc73  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000204d  00000000  00000000  0002ccf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d48  00000000  00000000  0002ed40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a56  00000000  00000000  0002fa88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016e19  00000000  00000000  000304de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ffb1  00000000  00000000  000472f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f1c4  00000000  00000000  000572a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003718  00000000  00000000  000e646c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000e9b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003080 	.word	0x08003080

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003080 	.word	0x08003080

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fcf4 	bl	8000ec0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f83c 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f8d4 	bl	8000688 <MX_GPIO_Init>
  //MX_USART2_UART_Init();
  MX_I2C1_Init();
 80004e0:	f000 f8a4 	bl	800062c <MX_I2C1_Init>
  	  //AAMX_TIM10_Init();
  /* USER CODE BEGIN 2 */

  HAL_Delay (1000);
 80004e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004e8:	f000 fd5c 	bl	8000fa4 <HAL_Delay>

  //Inicio y lectura de calibración de sensor
  BMP180_Start();
 80004ec:	f000 fbf2 	bl	8000cd4 <BMP180_Start>

  //Inicialización de antirebote y carga de retardo no bloqueante en API_debounce.h
  debounceFSM_init();
 80004f0:	f000 fa1e 	bl	8000930 <debounceFSM_init>
/*   if(!uartInit()){
 	  Error_Handler();
   }*/

   //Inicio LCD
   lcd_init();
 80004f4:	f000 fc6b 	bl	8000dce <lcd_init>
	//Mensaje de Bienvenida PASAR A LA API
	//el or se hace según la posición de memoria de inicio
	//depende de la tabla de memoria que es distinta en 16x4 y 20x4
	//ver https://controllerstech.com/lcd-20x4-using-i2c-with-stm32/

	lcd_clear();
 80004f8:	f000 fc52 	bl	8000da0 <lcd_clear>

	lcd_send_cmd (0x80|0x00);
 80004fc:	2080      	movs	r0, #128	; 0x80
 80004fe:	f000 fbef 	bl	8000ce0 <lcd_send_cmd>
	lcd_send_string("HOLA1");
 8000502:	4810      	ldr	r0, [pc, #64]	; (8000544 <main+0x74>)
 8000504:	f000 fc9d 	bl	8000e42 <lcd_send_string>

	lcd_send_cmd (0x80|0x40);
 8000508:	20c0      	movs	r0, #192	; 0xc0
 800050a:	f000 fbe9 	bl	8000ce0 <lcd_send_cmd>
	lcd_send_string("HOLA2");
 800050e:	480e      	ldr	r0, [pc, #56]	; (8000548 <main+0x78>)
 8000510:	f000 fc97 	bl	8000e42 <lcd_send_string>

	lcd_send_cmd (0x80|0x10);
 8000514:	2090      	movs	r0, #144	; 0x90
 8000516:	f000 fbe3 	bl	8000ce0 <lcd_send_cmd>
	lcd_send_string("HOLA3 nuevo");
 800051a:	480c      	ldr	r0, [pc, #48]	; (800054c <main+0x7c>)
 800051c:	f000 fc91 	bl	8000e42 <lcd_send_string>

	lcd_send_cmd (0x80|0x50);
 8000520:	20d0      	movs	r0, #208	; 0xd0
 8000522:	f000 fbdd 	bl	8000ce0 <lcd_send_cmd>
	lcd_send_string("Autor: G. Auyero");
 8000526:	480a      	ldr	r0, [pc, #40]	; (8000550 <main+0x80>)
 8000528:	f000 fc8b 	bl	8000e42 <lcd_send_string>

	HAL_Delay(1000);
 800052c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000530:	f000 fd38 	bl	8000fa4 <HAL_Delay>

	welcome_message();
 8000534:	f000 fc9a 	bl	8000e6c <welcome_message>
	  //Altitude = BMP180_GetAlt(0);

	  //HAL_Delay (2000);

	  //Llamado a función de actualización de antirebote de pulsador
	  debounceFSM_update();
 8000538:	f000 fa0a 	bl	8000950 <debounceFSM_update>

	  //Llamado a la función de actualización de screen managment

	  screenFSM_update();
 800053c:	f000 faf6 	bl	8000b2c <screenFSM_update>
	  debounceFSM_update();
 8000540:	e7fa      	b.n	8000538 <main+0x68>
 8000542:	bf00      	nop
 8000544:	08003098 	.word	0x08003098
 8000548:	080030a0 	.word	0x080030a0
 800054c:	080030a8 	.word	0x080030a8
 8000550:	080030b4 	.word	0x080030b4

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b094      	sub	sp, #80	; 0x50
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 0320 	add.w	r3, r7, #32
 800055e:	2230      	movs	r2, #48	; 0x30
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f002 fd60 	bl	8003028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	f107 030c 	add.w	r3, r7, #12
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000578:	2300      	movs	r3, #0
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	4b29      	ldr	r3, [pc, #164]	; (8000624 <SystemClock_Config+0xd0>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000580:	4a28      	ldr	r2, [pc, #160]	; (8000624 <SystemClock_Config+0xd0>)
 8000582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000586:	6413      	str	r3, [r2, #64]	; 0x40
 8000588:	4b26      	ldr	r3, [pc, #152]	; (8000624 <SystemClock_Config+0xd0>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000594:	2300      	movs	r3, #0
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	4b23      	ldr	r3, [pc, #140]	; (8000628 <SystemClock_Config+0xd4>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005a0:	4a21      	ldr	r2, [pc, #132]	; (8000628 <SystemClock_Config+0xd4>)
 80005a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005a6:	6013      	str	r3, [r2, #0]
 80005a8:	4b1f      	ldr	r3, [pc, #124]	; (8000628 <SystemClock_Config+0xd4>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b4:	2302      	movs	r3, #2
 80005b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b8:	2301      	movs	r3, #1
 80005ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005bc:	2310      	movs	r3, #16
 80005be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c0:	2302      	movs	r3, #2
 80005c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c4:	2300      	movs	r3, #0
 80005c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005c8:	2310      	movs	r3, #16
 80005ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005cc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005d2:	2304      	movs	r3, #4
 80005d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005d6:	2307      	movs	r3, #7
 80005d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005da:	f107 0320 	add.w	r3, r7, #32
 80005de:	4618      	mov	r0, r3
 80005e0:	f001 ff50 	bl	8002484 <HAL_RCC_OscConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005ea:	f000 f8bb 	bl	8000764 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ee:	230f      	movs	r3, #15
 80005f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f2:	2302      	movs	r3, #2
 80005f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	2102      	movs	r1, #2
 800060a:	4618      	mov	r0, r3
 800060c:	f002 f9b2 	bl	8002974 <HAL_RCC_ClockConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000616:	f000 f8a5 	bl	8000764 <Error_Handler>
  }
}
 800061a:	bf00      	nop
 800061c:	3750      	adds	r7, #80	; 0x50
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40023800 	.word	0x40023800
 8000628:	40007000 	.word	0x40007000

0800062c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000630:	4b12      	ldr	r3, [pc, #72]	; (800067c <MX_I2C1_Init+0x50>)
 8000632:	4a13      	ldr	r2, [pc, #76]	; (8000680 <MX_I2C1_Init+0x54>)
 8000634:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000636:	4b11      	ldr	r3, [pc, #68]	; (800067c <MX_I2C1_Init+0x50>)
 8000638:	4a12      	ldr	r2, [pc, #72]	; (8000684 <MX_I2C1_Init+0x58>)
 800063a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800063c:	4b0f      	ldr	r3, [pc, #60]	; (800067c <MX_I2C1_Init+0x50>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000642:	4b0e      	ldr	r3, [pc, #56]	; (800067c <MX_I2C1_Init+0x50>)
 8000644:	2200      	movs	r2, #0
 8000646:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <MX_I2C1_Init+0x50>)
 800064a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800064e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000650:	4b0a      	ldr	r3, [pc, #40]	; (800067c <MX_I2C1_Init+0x50>)
 8000652:	2200      	movs	r2, #0
 8000654:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <MX_I2C1_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800065c:	4b07      	ldr	r3, [pc, #28]	; (800067c <MX_I2C1_Init+0x50>)
 800065e:	2200      	movs	r2, #0
 8000660:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000662:	4b06      	ldr	r3, [pc, #24]	; (800067c <MX_I2C1_Init+0x50>)
 8000664:	2200      	movs	r2, #0
 8000666:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000668:	4804      	ldr	r0, [pc, #16]	; (800067c <MX_I2C1_Init+0x50>)
 800066a:	f000 ff5b 	bl	8001524 <HAL_I2C_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000674:	f000 f876 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000028 	.word	0x20000028
 8000680:	40005400 	.word	0x40005400
 8000684:	00061a80 	.word	0x00061a80

08000688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08a      	sub	sp, #40	; 0x28
 800068c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	613b      	str	r3, [r7, #16]
 80006a2:	4b2d      	ldr	r3, [pc, #180]	; (8000758 <MX_GPIO_Init+0xd0>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a2c      	ldr	r2, [pc, #176]	; (8000758 <MX_GPIO_Init+0xd0>)
 80006a8:	f043 0304 	orr.w	r3, r3, #4
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b2a      	ldr	r3, [pc, #168]	; (8000758 <MX_GPIO_Init+0xd0>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0304 	and.w	r3, r3, #4
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	60fb      	str	r3, [r7, #12]
 80006be:	4b26      	ldr	r3, [pc, #152]	; (8000758 <MX_GPIO_Init+0xd0>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a25      	ldr	r2, [pc, #148]	; (8000758 <MX_GPIO_Init+0xd0>)
 80006c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b23      	ldr	r3, [pc, #140]	; (8000758 <MX_GPIO_Init+0xd0>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <MX_GPIO_Init+0xd0>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a1e      	ldr	r2, [pc, #120]	; (8000758 <MX_GPIO_Init+0xd0>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <MX_GPIO_Init+0xd0>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	4b18      	ldr	r3, [pc, #96]	; (8000758 <MX_GPIO_Init+0xd0>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a17      	ldr	r2, [pc, #92]	; (8000758 <MX_GPIO_Init+0xd0>)
 80006fc:	f043 0302 	orr.w	r3, r3, #2
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b15      	ldr	r3, [pc, #84]	; (8000758 <MX_GPIO_Init+0xd0>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0302 	and.w	r3, r3, #2
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	21e0      	movs	r1, #224	; 0xe0
 8000712:	4812      	ldr	r0, [pc, #72]	; (800075c <MX_GPIO_Init+0xd4>)
 8000714:	f000 feec 	bl	80014f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000718:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800071c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800071e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000728:	f107 0314 	add.w	r3, r7, #20
 800072c:	4619      	mov	r1, r3
 800072e:	480c      	ldr	r0, [pc, #48]	; (8000760 <MX_GPIO_Init+0xd8>)
 8000730:	f000 fd42 	bl	80011b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA7 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7;
 8000734:	23e0      	movs	r3, #224	; 0xe0
 8000736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000738:	2301      	movs	r3, #1
 800073a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000740:	2300      	movs	r3, #0
 8000742:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000744:	f107 0314 	add.w	r3, r7, #20
 8000748:	4619      	mov	r1, r3
 800074a:	4804      	ldr	r0, [pc, #16]	; (800075c <MX_GPIO_Init+0xd4>)
 800074c:	f000 fd34 	bl	80011b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000750:	bf00      	nop
 8000752:	3728      	adds	r7, #40	; 0x28
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40023800 	.word	0x40023800
 800075c:	40020000 	.word	0x40020000
 8000760:	40020800 	.word	0x40020800

08000764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000768:	b672      	cpsid	i
}
 800076a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800076c:	e7fe      	b.n	800076c <Error_Handler+0x8>
	...

08000770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <HAL_MspInit+0x4c>)
 800077c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077e:	4a0f      	ldr	r2, [pc, #60]	; (80007bc <HAL_MspInit+0x4c>)
 8000780:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000784:	6453      	str	r3, [r2, #68]	; 0x44
 8000786:	4b0d      	ldr	r3, [pc, #52]	; (80007bc <HAL_MspInit+0x4c>)
 8000788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <HAL_MspInit+0x4c>)
 8000798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079a:	4a08      	ldr	r2, [pc, #32]	; (80007bc <HAL_MspInit+0x4c>)
 800079c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a0:	6413      	str	r3, [r2, #64]	; 0x40
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <HAL_MspInit+0x4c>)
 80007a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007ae:	2007      	movs	r0, #7
 80007b0:	f000 fcce 	bl	8001150 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b4:	bf00      	nop
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40023800 	.word	0x40023800

080007c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08a      	sub	sp, #40	; 0x28
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a19      	ldr	r2, [pc, #100]	; (8000844 <HAL_I2C_MspInit+0x84>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d12b      	bne.n	800083a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	4b18      	ldr	r3, [pc, #96]	; (8000848 <HAL_I2C_MspInit+0x88>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a17      	ldr	r2, [pc, #92]	; (8000848 <HAL_I2C_MspInit+0x88>)
 80007ec:	f043 0302 	orr.w	r3, r3, #2
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b15      	ldr	r3, [pc, #84]	; (8000848 <HAL_I2C_MspInit+0x88>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0302 	and.w	r3, r3, #2
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007fe:	23c0      	movs	r3, #192	; 0xc0
 8000800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000802:	2312      	movs	r3, #18
 8000804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080a:	2303      	movs	r3, #3
 800080c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800080e:	2304      	movs	r3, #4
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	4619      	mov	r1, r3
 8000818:	480c      	ldr	r0, [pc, #48]	; (800084c <HAL_I2C_MspInit+0x8c>)
 800081a:	f000 fccd 	bl	80011b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	4b09      	ldr	r3, [pc, #36]	; (8000848 <HAL_I2C_MspInit+0x88>)
 8000824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000826:	4a08      	ldr	r2, [pc, #32]	; (8000848 <HAL_I2C_MspInit+0x88>)
 8000828:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800082c:	6413      	str	r3, [r2, #64]	; 0x40
 800082e:	4b06      	ldr	r3, [pc, #24]	; (8000848 <HAL_I2C_MspInit+0x88>)
 8000830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000832:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800083a:	bf00      	nop
 800083c:	3728      	adds	r7, #40	; 0x28
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40005400 	.word	0x40005400
 8000848:	40023800 	.word	0x40023800
 800084c:	40020400 	.word	0x40020400

08000850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000854:	e7fe      	b.n	8000854 <NMI_Handler+0x4>

08000856 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800085a:	e7fe      	b.n	800085a <HardFault_Handler+0x4>

0800085c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000860:	e7fe      	b.n	8000860 <MemManage_Handler+0x4>

08000862 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000866:	e7fe      	b.n	8000866 <BusFault_Handler+0x4>

08000868 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800086c:	e7fe      	b.n	800086c <UsageFault_Handler+0x4>

0800086e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr

0800088a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800089c:	f000 fb62 	bl	8000f64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80008a8:	4802      	ldr	r0, [pc, #8]	; (80008b4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80008aa:	f002 fa6f 	bl	8002d8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	2000007c 	.word	0x2000007c

080008b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <SystemInit+0x20>)
 80008be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008c2:	4a05      	ldr	r2, [pc, #20]	; (80008d8 <SystemInit+0x20>)
 80008c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80008dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000914 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008e0:	480d      	ldr	r0, [pc, #52]	; (8000918 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008e2:	490e      	ldr	r1, [pc, #56]	; (800091c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008e4:	4a0e      	ldr	r2, [pc, #56]	; (8000920 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e8:	e002      	b.n	80008f0 <LoopCopyDataInit>

080008ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ee:	3304      	adds	r3, #4

080008f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f4:	d3f9      	bcc.n	80008ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008f6:	4a0b      	ldr	r2, [pc, #44]	; (8000924 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008f8:	4c0b      	ldr	r4, [pc, #44]	; (8000928 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008fc:	e001      	b.n	8000902 <LoopFillZerobss>

080008fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000900:	3204      	adds	r2, #4

08000902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000904:	d3fb      	bcc.n	80008fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000906:	f7ff ffd7 	bl	80008b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800090a:	f002 fb95 	bl	8003038 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800090e:	f7ff fddf 	bl	80004d0 <main>
  bx  lr    
 8000912:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000914:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800091c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000920:	08003114 	.word	0x08003114
  ldr r2, =_sbss
 8000924:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000928:	200000f4 	.word	0x200000f4

0800092c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800092c:	e7fe      	b.n	800092c <ADC_IRQHandler>
	...

08000930 <debounceFSM_init>:
//Definición de variable interna del módulo flag para detección de flanco ascendente
static bool_t keyReleased = 0;



void debounceFSM_init(void){
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0

	//inicio de la máquina de estados
	debounceState = BUTTON_UP;
 8000934:	4b04      	ldr	r3, [pc, #16]	; (8000948 <debounceFSM_init+0x18>)
 8000936:	2200      	movs	r2, #0
 8000938:	701a      	strb	r2, [r3, #0]
	//se inicia también el delay no retentivo
	delayInit(&delay02,DEBOUNCED_DELAY);
 800093a:	2128      	movs	r1, #40	; 0x28
 800093c:	4803      	ldr	r0, [pc, #12]	; (800094c <debounceFSM_init+0x1c>)
 800093e:	f000 f8b7 	bl	8000ab0 <delayInit>

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	200000c4 	.word	0x200000c4
 800094c:	200000c8 	.word	0x200000c8

08000950 <debounceFSM_update>:


void debounceFSM_update(void){
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0


		switch(debounceState){
 8000954:	4b39      	ldr	r3, [pc, #228]	; (8000a3c <debounceFSM_update+0xec>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b03      	cmp	r3, #3
 800095a:	d861      	bhi.n	8000a20 <debounceFSM_update+0xd0>
 800095c:	a201      	add	r2, pc, #4	; (adr r2, 8000964 <debounceFSM_update+0x14>)
 800095e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000962:	bf00      	nop
 8000964:	08000975 	.word	0x08000975
 8000968:	0800098d 	.word	0x0800098d
 800096c:	080009cb 	.word	0x080009cb
 8000970:	080009e3 	.word	0x080009e3

		case BUTTON_UP:

			if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)==0){
 8000974:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000978:	4831      	ldr	r0, [pc, #196]	; (8000a40 <debounceFSM_update+0xf0>)
 800097a:	f000 fda1 	bl	80014c0 <HAL_GPIO_ReadPin>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d151      	bne.n	8000a28 <debounceFSM_update+0xd8>

				debounceState = BUTTON_FALLING;
 8000984:	4b2d      	ldr	r3, [pc, #180]	; (8000a3c <debounceFSM_update+0xec>)
 8000986:	2201      	movs	r2, #1
 8000988:	701a      	strb	r2, [r3, #0]
			}

		break;
 800098a:	e04d      	b.n	8000a28 <debounceFSM_update+0xd8>

		case BUTTON_FALLING:

			if(delayRead(&delay02)==1){
 800098c:	482d      	ldr	r0, [pc, #180]	; (8000a44 <debounceFSM_update+0xf4>)
 800098e:	f000 f8a3 	bl	8000ad8 <delayRead>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d049      	beq.n	8000a2c <debounceFSM_update+0xdc>
				if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)==0){
 8000998:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800099c:	4828      	ldr	r0, [pc, #160]	; (8000a40 <debounceFSM_update+0xf0>)
 800099e:	f000 fd8f 	bl	80014c0 <HAL_GPIO_ReadPin>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d104      	bne.n	80009b2 <debounceFSM_update+0x62>
					debounceState = BUTTON_DOWN;
 80009a8:	4b24      	ldr	r3, [pc, #144]	; (8000a3c <debounceFSM_update+0xec>)
 80009aa:	2202      	movs	r2, #2
 80009ac:	701a      	strb	r2, [r3, #0]
					buttonPressed();
 80009ae:	f000 f84b 	bl	8000a48 <buttonPressed>
				}
				if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)==1){
 80009b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009b6:	4822      	ldr	r0, [pc, #136]	; (8000a40 <debounceFSM_update+0xf0>)
 80009b8:	f000 fd82 	bl	80014c0 <HAL_GPIO_ReadPin>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d134      	bne.n	8000a2c <debounceFSM_update+0xdc>
					debounceState = BUTTON_UP;
 80009c2:	4b1e      	ldr	r3, [pc, #120]	; (8000a3c <debounceFSM_update+0xec>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	701a      	strb	r2, [r3, #0]
				}

			}

		break;
 80009c8:	e030      	b.n	8000a2c <debounceFSM_update+0xdc>

		case BUTTON_DOWN:

			if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)==1){
 80009ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ce:	481c      	ldr	r0, [pc, #112]	; (8000a40 <debounceFSM_update+0xf0>)
 80009d0:	f000 fd76 	bl	80014c0 <HAL_GPIO_ReadPin>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d12a      	bne.n	8000a30 <debounceFSM_update+0xe0>

				debounceState = BUTTON_RAISING;
 80009da:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <debounceFSM_update+0xec>)
 80009dc:	2203      	movs	r2, #3
 80009de:	701a      	strb	r2, [r3, #0]
			}

		break;
 80009e0:	e026      	b.n	8000a30 <debounceFSM_update+0xe0>

		case BUTTON_RAISING:

			if(delayRead(&delay02)==1){
 80009e2:	4818      	ldr	r0, [pc, #96]	; (8000a44 <debounceFSM_update+0xf4>)
 80009e4:	f000 f878 	bl	8000ad8 <delayRead>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d022      	beq.n	8000a34 <debounceFSM_update+0xe4>
				if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)==1){
 80009ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009f2:	4813      	ldr	r0, [pc, #76]	; (8000a40 <debounceFSM_update+0xf0>)
 80009f4:	f000 fd64 	bl	80014c0 <HAL_GPIO_ReadPin>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d104      	bne.n	8000a08 <debounceFSM_update+0xb8>
					debounceState = BUTTON_UP;
 80009fe:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <debounceFSM_update+0xec>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	701a      	strb	r2, [r3, #0]
					buttonReleased();
 8000a04:	f000 f82c 	bl	8000a60 <buttonReleased>
				}
				if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)==0){
 8000a08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a0c:	480c      	ldr	r0, [pc, #48]	; (8000a40 <debounceFSM_update+0xf0>)
 8000a0e:	f000 fd57 	bl	80014c0 <HAL_GPIO_ReadPin>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d10d      	bne.n	8000a34 <debounceFSM_update+0xe4>
					debounceState = BUTTON_DOWN;
 8000a18:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <debounceFSM_update+0xec>)
 8000a1a:	2202      	movs	r2, #2
 8000a1c:	701a      	strb	r2, [r3, #0]
				}

			}

		break;
 8000a1e:	e009      	b.n	8000a34 <debounceFSM_update+0xe4>

		default:
		debounceState = BUTTON_UP;
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <debounceFSM_update+0xec>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	701a      	strb	r2, [r3, #0]

		}


}
 8000a26:	e006      	b.n	8000a36 <debounceFSM_update+0xe6>
		break;
 8000a28:	bf00      	nop
 8000a2a:	e004      	b.n	8000a36 <debounceFSM_update+0xe6>
		break;
 8000a2c:	bf00      	nop
 8000a2e:	e002      	b.n	8000a36 <debounceFSM_update+0xe6>
		break;
 8000a30:	bf00      	nop
 8000a32:	e000      	b.n	8000a36 <debounceFSM_update+0xe6>
		break;
 8000a34:	bf00      	nop
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	200000c4 	.word	0x200000c4
 8000a40:	40020800 	.word	0x40020800
 8000a44:	200000c8 	.word	0x200000c8

08000a48 <buttonPressed>:
void buttonPressed(void){
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, true);  //utilizado en parte uno de la práctica
	//seteo de flag para detección de flanco
	keyPressed = 1;
 8000a4c:	4b03      	ldr	r3, [pc, #12]	; (8000a5c <buttonPressed+0x14>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	701a      	strb	r2, [r3, #0]

}
 8000a52:	bf00      	nop
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	200000d4 	.word	0x200000d4

08000a60 <buttonReleased>:

void buttonReleased(void){
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, false);	//utilizado en parte uno de la práctica
	keyReleased = 1;
 8000a64:	4b03      	ldr	r3, [pc, #12]	; (8000a74 <buttonReleased+0x14>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	701a      	strb	r2, [r3, #0]

}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	200000d5 	.word	0x200000d5

08000a78 <readKey>:

bool_t readKey(void){
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0

	if(keyPressed){
 8000a7c:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <readKey+0x34>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d004      	beq.n	8000a8e <readKey+0x16>
		keyPressed = 0;
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <readKey+0x34>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	701a      	strb	r2, [r3, #0]
		return 1;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e009      	b.n	8000aa2 <readKey+0x2a>
	}
	if(keyPressed==0){
 8000a8e:	4b07      	ldr	r3, [pc, #28]	; (8000aac <readKey+0x34>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	f083 0301 	eor.w	r3, r3, #1
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <readKey+0x28>
		return 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	e000      	b.n	8000aa2 <readKey+0x2a>
	}
	return 0;
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	200000d4 	.word	0x200000d4

08000ab0 <delayInit>:
#include "API_delay.h"
#include "stm32f4xx_hal.h"


void delayInit( delay_t * delay, tick_t duration ){
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	6039      	str	r1, [r7, #0]

		delay->duration = duration;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	683a      	ldr	r2, [r7, #0]
 8000abe:	605a      	str	r2, [r3, #4]
		delay->running = false;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	721a      	strb	r2, [r3, #8]
		delay->startTime = 0;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]

}
 8000acc:	bf00      	nop
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <delayRead>:

bool_t delayRead( delay_t * delay ){
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]

		if(delay->running == false){
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	7a1b      	ldrb	r3, [r3, #8]
 8000ae4:	f083 0301 	eor.w	r3, r3, #1
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d009      	beq.n	8000b02 <delayRead+0x2a>

			delay->startTime = HAL_GetTick();
 8000aee:	f000 fa4d 	bl	8000f8c <HAL_GetTick>
 8000af2:	4602      	mov	r2, r0
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	601a      	str	r2, [r3, #0]
			delay->running = true;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2201      	movs	r2, #1
 8000afc:	721a      	strb	r2, [r3, #8]
			return 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	e00f      	b.n	8000b22 <delayRead+0x4a>
		}
		else{
			if(HAL_GetTick()- delay->startTime >= delay->duration){
 8000b02:	f000 fa43 	bl	8000f8c <HAL_GetTick>
 8000b06:	4602      	mov	r2, r0
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	1ad2      	subs	r2, r2, r3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	429a      	cmp	r2, r3
 8000b14:	d304      	bcc.n	8000b20 <delayRead+0x48>
				delay->running = false;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2200      	movs	r2, #0
 8000b1a:	721a      	strb	r2, [r3, #8]
				return 1;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	e000      	b.n	8000b22 <delayRead+0x4a>
			}
			else{
				return 0;
 8000b20:	2300      	movs	r3, #0
		}

}


	}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
	...

08000b2c <screenFSM_update>:
	//inicio de la máquina de estados
	screenState = SCREEN_MAIN;

}

void screenFSM_update(void){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0


		switch(screenState){
 8000b30:	4b18      	ldr	r3, [pc, #96]	; (8000b94 <screenFSM_update+0x68>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b02      	cmp	r3, #2
 8000b36:	d018      	beq.n	8000b6a <screenFSM_update+0x3e>
 8000b38:	2b02      	cmp	r3, #2
 8000b3a:	dc1f      	bgt.n	8000b7c <screenFSM_update+0x50>
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d002      	beq.n	8000b46 <screenFSM_update+0x1a>
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d009      	beq.n	8000b58 <screenFSM_update+0x2c>
 8000b44:	e01a      	b.n	8000b7c <screenFSM_update+0x50>

		case SCREEN_MAIN:
			if(readKey()){
 8000b46:	f7ff ff97 	bl	8000a78 <readKey>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d019      	beq.n	8000b84 <screenFSM_update+0x58>
				screenState = SCREEN_ALARMS;
 8000b50:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <screenFSM_update+0x68>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	701a      	strb	r2, [r3, #0]
			}

		break;
 8000b56:	e015      	b.n	8000b84 <screenFSM_update+0x58>

		case SCREEN_ALARMS:
			if(readKey()){
 8000b58:	f7ff ff8e 	bl	8000a78 <readKey>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d012      	beq.n	8000b88 <screenFSM_update+0x5c>
				screenState = SCREEN_HISTORICAL;
 8000b62:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <screenFSM_update+0x68>)
 8000b64:	2202      	movs	r2, #2
 8000b66:	701a      	strb	r2, [r3, #0]
			}


		break;
 8000b68:	e00e      	b.n	8000b88 <screenFSM_update+0x5c>

		case SCREEN_HISTORICAL:
			if(readKey()){
 8000b6a:	f7ff ff85 	bl	8000a78 <readKey>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d00b      	beq.n	8000b8c <screenFSM_update+0x60>
				screenState = SCREEN_MAIN;
 8000b74:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <screenFSM_update+0x68>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	701a      	strb	r2, [r3, #0]
			}


		break;
 8000b7a:	e007      	b.n	8000b8c <screenFSM_update+0x60>



		default:
		screenState = SCREEN_MAIN;
 8000b7c:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <screenFSM_update+0x68>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	701a      	strb	r2, [r3, #0]

		}


}
 8000b82:	e004      	b.n	8000b8e <screenFSM_update+0x62>
		break;
 8000b84:	bf00      	nop
 8000b86:	e002      	b.n	8000b8e <screenFSM_update+0x62>
		break;
 8000b88:	bf00      	nop
 8000b8a:	e000      	b.n	8000b8e <screenFSM_update+0x62>
		break;
 8000b8c:	bf00      	nop
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	200000d6 	.word	0x200000d6

08000b98 <read_calibration_data>:
#define atmPress 101325 //Pa



void read_calibration_data(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08a      	sub	sp, #40	; 0x28
 8000b9c:	af04      	add	r7, sp, #16
	uint8_t Callib_Data[22] = {0};
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	603b      	str	r3, [r7, #0]
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	821a      	strh	r2, [r3, #16]
	uint16_t Callib_Start = 0xAA;
 8000bb0:	23aa      	movs	r3, #170	; 0xaa
 8000bb2:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, Callib_Start, 1, Callib_Data,22, HAL_MAX_DELAY);
 8000bb4:	8afa      	ldrh	r2, [r7, #22]
 8000bb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bba:	9302      	str	r3, [sp, #8]
 8000bbc:	2316      	movs	r3, #22
 8000bbe:	9301      	str	r3, [sp, #4]
 8000bc0:	463b      	mov	r3, r7
 8000bc2:	9300      	str	r3, [sp, #0]
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	21ee      	movs	r1, #238	; 0xee
 8000bc8:	4836      	ldr	r0, [pc, #216]	; (8000ca4 <read_calibration_data+0x10c>)
 8000bca:	f000 feed 	bl	80019a8 <HAL_I2C_Mem_Read>

	AC1 = ((Callib_Data[0] << 8) | Callib_Data[1]);
 8000bce:	783b      	ldrb	r3, [r7, #0]
 8000bd0:	021b      	lsls	r3, r3, #8
 8000bd2:	b21a      	sxth	r2, r3
 8000bd4:	787b      	ldrb	r3, [r7, #1]
 8000bd6:	b21b      	sxth	r3, r3
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	b21a      	sxth	r2, r3
 8000bdc:	4b32      	ldr	r3, [pc, #200]	; (8000ca8 <read_calibration_data+0x110>)
 8000bde:	801a      	strh	r2, [r3, #0]
	AC2 = ((Callib_Data[2] << 8) | Callib_Data[3]);
 8000be0:	78bb      	ldrb	r3, [r7, #2]
 8000be2:	021b      	lsls	r3, r3, #8
 8000be4:	b21a      	sxth	r2, r3
 8000be6:	78fb      	ldrb	r3, [r7, #3]
 8000be8:	b21b      	sxth	r3, r3
 8000bea:	4313      	orrs	r3, r2
 8000bec:	b21a      	sxth	r2, r3
 8000bee:	4b2f      	ldr	r3, [pc, #188]	; (8000cac <read_calibration_data+0x114>)
 8000bf0:	801a      	strh	r2, [r3, #0]
	AC3 = ((Callib_Data[4] << 8) | Callib_Data[5]);
 8000bf2:	793b      	ldrb	r3, [r7, #4]
 8000bf4:	021b      	lsls	r3, r3, #8
 8000bf6:	b21a      	sxth	r2, r3
 8000bf8:	797b      	ldrb	r3, [r7, #5]
 8000bfa:	b21b      	sxth	r3, r3
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	b21a      	sxth	r2, r3
 8000c00:	4b2b      	ldr	r3, [pc, #172]	; (8000cb0 <read_calibration_data+0x118>)
 8000c02:	801a      	strh	r2, [r3, #0]
	AC4 = ((Callib_Data[6] << 8) | Callib_Data[7]);
 8000c04:	79bb      	ldrb	r3, [r7, #6]
 8000c06:	021b      	lsls	r3, r3, #8
 8000c08:	b21a      	sxth	r2, r3
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	b21b      	sxth	r3, r3
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	b21b      	sxth	r3, r3
 8000c12:	b29a      	uxth	r2, r3
 8000c14:	4b27      	ldr	r3, [pc, #156]	; (8000cb4 <read_calibration_data+0x11c>)
 8000c16:	801a      	strh	r2, [r3, #0]
	AC5 = ((Callib_Data[8] << 8) | Callib_Data[9]);
 8000c18:	7a3b      	ldrb	r3, [r7, #8]
 8000c1a:	021b      	lsls	r3, r3, #8
 8000c1c:	b21a      	sxth	r2, r3
 8000c1e:	7a7b      	ldrb	r3, [r7, #9]
 8000c20:	b21b      	sxth	r3, r3
 8000c22:	4313      	orrs	r3, r2
 8000c24:	b21b      	sxth	r3, r3
 8000c26:	b29a      	uxth	r2, r3
 8000c28:	4b23      	ldr	r3, [pc, #140]	; (8000cb8 <read_calibration_data+0x120>)
 8000c2a:	801a      	strh	r2, [r3, #0]
	AC6 = ((Callib_Data[10] << 8) | Callib_Data[11]);
 8000c2c:	7abb      	ldrb	r3, [r7, #10]
 8000c2e:	021b      	lsls	r3, r3, #8
 8000c30:	b21a      	sxth	r2, r3
 8000c32:	7afb      	ldrb	r3, [r7, #11]
 8000c34:	b21b      	sxth	r3, r3
 8000c36:	4313      	orrs	r3, r2
 8000c38:	b21b      	sxth	r3, r3
 8000c3a:	b29a      	uxth	r2, r3
 8000c3c:	4b1f      	ldr	r3, [pc, #124]	; (8000cbc <read_calibration_data+0x124>)
 8000c3e:	801a      	strh	r2, [r3, #0]
	B1 = ((Callib_Data[12] << 8) | Callib_Data[13]);
 8000c40:	7b3b      	ldrb	r3, [r7, #12]
 8000c42:	021b      	lsls	r3, r3, #8
 8000c44:	b21a      	sxth	r2, r3
 8000c46:	7b7b      	ldrb	r3, [r7, #13]
 8000c48:	b21b      	sxth	r3, r3
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	b21a      	sxth	r2, r3
 8000c4e:	4b1c      	ldr	r3, [pc, #112]	; (8000cc0 <read_calibration_data+0x128>)
 8000c50:	801a      	strh	r2, [r3, #0]
	B2 = ((Callib_Data[14] << 8) | Callib_Data[15]);
 8000c52:	7bbb      	ldrb	r3, [r7, #14]
 8000c54:	021b      	lsls	r3, r3, #8
 8000c56:	b21a      	sxth	r2, r3
 8000c58:	7bfb      	ldrb	r3, [r7, #15]
 8000c5a:	b21b      	sxth	r3, r3
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	b21a      	sxth	r2, r3
 8000c60:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <read_calibration_data+0x12c>)
 8000c62:	801a      	strh	r2, [r3, #0]
	MB = ((Callib_Data[16] << 8) | Callib_Data[17]);
 8000c64:	7c3b      	ldrb	r3, [r7, #16]
 8000c66:	021b      	lsls	r3, r3, #8
 8000c68:	b21a      	sxth	r2, r3
 8000c6a:	7c7b      	ldrb	r3, [r7, #17]
 8000c6c:	b21b      	sxth	r3, r3
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	b21a      	sxth	r2, r3
 8000c72:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <read_calibration_data+0x130>)
 8000c74:	801a      	strh	r2, [r3, #0]
	MC = ((Callib_Data[18] << 8) | Callib_Data[19]);
 8000c76:	7cbb      	ldrb	r3, [r7, #18]
 8000c78:	021b      	lsls	r3, r3, #8
 8000c7a:	b21a      	sxth	r2, r3
 8000c7c:	7cfb      	ldrb	r3, [r7, #19]
 8000c7e:	b21b      	sxth	r3, r3
 8000c80:	4313      	orrs	r3, r2
 8000c82:	b21a      	sxth	r2, r3
 8000c84:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <read_calibration_data+0x134>)
 8000c86:	801a      	strh	r2, [r3, #0]
	MD = ((Callib_Data[20] << 8) | Callib_Data[21]);
 8000c88:	7d3b      	ldrb	r3, [r7, #20]
 8000c8a:	021b      	lsls	r3, r3, #8
 8000c8c:	b21a      	sxth	r2, r3
 8000c8e:	7d7b      	ldrb	r3, [r7, #21]
 8000c90:	b21b      	sxth	r3, r3
 8000c92:	4313      	orrs	r3, r2
 8000c94:	b21a      	sxth	r2, r3
 8000c96:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <read_calibration_data+0x138>)
 8000c98:	801a      	strh	r2, [r3, #0]

}
 8000c9a:	bf00      	nop
 8000c9c:	3718      	adds	r7, #24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000028 	.word	0x20000028
 8000ca8:	200000d8 	.word	0x200000d8
 8000cac:	200000da 	.word	0x200000da
 8000cb0:	200000dc 	.word	0x200000dc
 8000cb4:	200000de 	.word	0x200000de
 8000cb8:	200000e0 	.word	0x200000e0
 8000cbc:	200000e2 	.word	0x200000e2
 8000cc0:	200000e4 	.word	0x200000e4
 8000cc4:	200000e6 	.word	0x200000e6
 8000cc8:	200000e8 	.word	0x200000e8
 8000ccc:	200000ea 	.word	0x200000ea
 8000cd0:	200000ec 	.word	0x200000ec

08000cd4 <BMP180_Start>:
	BMP180_GetPress (oss);
	return 44330*(1-(pow((Press/(float)atmPress), 0.19029495718)));
}

void BMP180_Start (void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
	read_calibration_data();
 8000cd8:	f7ff ff5e 	bl	8000b98 <read_calibration_data>
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af02      	add	r7, sp, #8
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	f023 030f 	bic.w	r3, r3, #15
 8000cf0:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	011b      	lsls	r3, r3, #4
 8000cf6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000cf8:	7bfb      	ldrb	r3, [r7, #15]
 8000cfa:	f043 030c 	orr.w	r3, r3, #12
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000d02:	7bfb      	ldrb	r3, [r7, #15]
 8000d04:	f043 0308 	orr.w	r3, r3, #8
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000d0c:	7bbb      	ldrb	r3, [r7, #14]
 8000d0e:	f043 030c 	orr.w	r3, r3, #12
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000d16:	7bbb      	ldrb	r3, [r7, #14]
 8000d18:	f043 0308 	orr.w	r3, r3, #8
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000d20:	f107 0208 	add.w	r2, r7, #8
 8000d24:	2364      	movs	r3, #100	; 0x64
 8000d26:	9300      	str	r3, [sp, #0]
 8000d28:	2304      	movs	r3, #4
 8000d2a:	214e      	movs	r1, #78	; 0x4e
 8000d2c:	4803      	ldr	r0, [pc, #12]	; (8000d3c <lcd_send_cmd+0x5c>)
 8000d2e:	f000 fd3d 	bl	80017ac <HAL_I2C_Master_Transmit>
}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000028 	.word	0x20000028

08000d40 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af02      	add	r7, sp, #8
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	f023 030f 	bic.w	r3, r3, #15
 8000d50:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	011b      	lsls	r3, r3, #4
 8000d56:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	f043 030d 	orr.w	r3, r3, #13
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8000d62:	7bfb      	ldrb	r3, [r7, #15]
 8000d64:	f043 0309 	orr.w	r3, r3, #9
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8000d6c:	7bbb      	ldrb	r3, [r7, #14]
 8000d6e:	f043 030d 	orr.w	r3, r3, #13
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8000d76:	7bbb      	ldrb	r3, [r7, #14]
 8000d78:	f043 0309 	orr.w	r3, r3, #9
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000d80:	f107 0208 	add.w	r2, r7, #8
 8000d84:	2364      	movs	r3, #100	; 0x64
 8000d86:	9300      	str	r3, [sp, #0]
 8000d88:	2304      	movs	r3, #4
 8000d8a:	214e      	movs	r1, #78	; 0x4e
 8000d8c:	4803      	ldr	r0, [pc, #12]	; (8000d9c <lcd_send_data+0x5c>)
 8000d8e:	f000 fd0d 	bl	80017ac <HAL_I2C_Master_Transmit>
}
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000028 	.word	0x20000028

08000da0 <lcd_clear>:

void lcd_clear (void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x00);
 8000da6:	2000      	movs	r0, #0
 8000da8:	f7ff ff9a 	bl	8000ce0 <lcd_send_cmd>
	for (int i=0; i<100; i++)
 8000dac:	2300      	movs	r3, #0
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	e005      	b.n	8000dbe <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000db2:	2020      	movs	r0, #32
 8000db4:	f7ff ffc4 	bl	8000d40 <lcd_send_data>
	for (int i=0; i<100; i++)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	607b      	str	r3, [r7, #4]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2b63      	cmp	r3, #99	; 0x63
 8000dc2:	ddf6      	ble.n	8000db2 <lcd_clear+0x12>
	}
}
 8000dc4:	bf00      	nop
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <lcd_init>:

void lcd_init (void)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000dd2:	2032      	movs	r0, #50	; 0x32
 8000dd4:	f000 f8e6 	bl	8000fa4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000dd8:	2030      	movs	r0, #48	; 0x30
 8000dda:	f7ff ff81 	bl	8000ce0 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000dde:	2005      	movs	r0, #5
 8000de0:	f000 f8e0 	bl	8000fa4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000de4:	2030      	movs	r0, #48	; 0x30
 8000de6:	f7ff ff7b 	bl	8000ce0 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000dea:	2001      	movs	r0, #1
 8000dec:	f000 f8da 	bl	8000fa4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000df0:	2030      	movs	r0, #48	; 0x30
 8000df2:	f7ff ff75 	bl	8000ce0 <lcd_send_cmd>
	HAL_Delay(10);
 8000df6:	200a      	movs	r0, #10
 8000df8:	f000 f8d4 	bl	8000fa4 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000dfc:	2020      	movs	r0, #32
 8000dfe:	f7ff ff6f 	bl	8000ce0 <lcd_send_cmd>
	HAL_Delay(10);
 8000e02:	200a      	movs	r0, #10
 8000e04:	f000 f8ce 	bl	8000fa4 <HAL_Delay>

  // dislay initialisation
	//Comment the line “lcd_send_cmd (0x28);” and it ‘ll work for 1604a LCD
	//es el display que estoy probando y así funciona ok
	//lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
	HAL_Delay(1);
 8000e08:	2001      	movs	r0, #1
 8000e0a:	f000 f8cb 	bl	8000fa4 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000e0e:	2008      	movs	r0, #8
 8000e10:	f7ff ff66 	bl	8000ce0 <lcd_send_cmd>
	HAL_Delay(1);
 8000e14:	2001      	movs	r0, #1
 8000e16:	f000 f8c5 	bl	8000fa4 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000e1a:	2001      	movs	r0, #1
 8000e1c:	f7ff ff60 	bl	8000ce0 <lcd_send_cmd>
	HAL_Delay(1);
 8000e20:	2001      	movs	r0, #1
 8000e22:	f000 f8bf 	bl	8000fa4 <HAL_Delay>
	HAL_Delay(1);
 8000e26:	2001      	movs	r0, #1
 8000e28:	f000 f8bc 	bl	8000fa4 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000e2c:	2006      	movs	r0, #6
 8000e2e:	f7ff ff57 	bl	8000ce0 <lcd_send_cmd>
	HAL_Delay(1);
 8000e32:	2001      	movs	r0, #1
 8000e34:	f000 f8b6 	bl	8000fa4 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000e38:	200c      	movs	r0, #12
 8000e3a:	f7ff ff51 	bl	8000ce0 <lcd_send_cmd>
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b082      	sub	sp, #8
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000e4a:	e006      	b.n	8000e5a <lcd_send_string+0x18>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	1c5a      	adds	r2, r3, #1
 8000e50:	607a      	str	r2, [r7, #4]
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ff73 	bl	8000d40 <lcd_send_data>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d1f4      	bne.n	8000e4c <lcd_send_string+0xa>
}
 8000e62:	bf00      	nop
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <welcome_message>:

void welcome_message(void){
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
	//Mensaje de Bienvenida PASAR A LA API
	//el or se hace según la posición de memoria de inicio
	//depende de la tabla de memoria que es distinta en 16x4 y 20x4
	//ver https://controllerstech.com/lcd-20x4-using-i2c-with-stm32/

	lcd_clear();
 8000e70:	f7ff ff96 	bl	8000da0 <lcd_clear>

	lcd_send_cmd (0x80|0x00);
 8000e74:	2080      	movs	r0, #128	; 0x80
 8000e76:	f7ff ff33 	bl	8000ce0 <lcd_send_cmd>
	lcd_send_string("Bienvenida");
 8000e7a:	480d      	ldr	r0, [pc, #52]	; (8000eb0 <welcome_message+0x44>)
 8000e7c:	f7ff ffe1 	bl	8000e42 <lcd_send_string>

	lcd_send_cmd (0x80|0x40);
 8000e80:	20c0      	movs	r0, #192	; 0xc0
 8000e82:	f7ff ff2d 	bl	8000ce0 <lcd_send_cmd>
	lcd_send_string("linea2");
 8000e86:	480b      	ldr	r0, [pc, #44]	; (8000eb4 <welcome_message+0x48>)
 8000e88:	f7ff ffdb 	bl	8000e42 <lcd_send_string>

	lcd_send_cmd (0x80|0x10);
 8000e8c:	2090      	movs	r0, #144	; 0x90
 8000e8e:	f7ff ff27 	bl	8000ce0 <lcd_send_cmd>
	lcd_send_string("linea3");
 8000e92:	4809      	ldr	r0, [pc, #36]	; (8000eb8 <welcome_message+0x4c>)
 8000e94:	f7ff ffd5 	bl	8000e42 <lcd_send_string>

	lcd_send_cmd (0x80|0x50);
 8000e98:	20d0      	movs	r0, #208	; 0xd0
 8000e9a:	f7ff ff21 	bl	8000ce0 <lcd_send_cmd>
	lcd_send_string("linea4");
 8000e9e:	4807      	ldr	r0, [pc, #28]	; (8000ebc <welcome_message+0x50>)
 8000ea0:	f7ff ffcf 	bl	8000e42 <lcd_send_string>

	HAL_Delay(2000);
 8000ea4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ea8:	f000 f87c 	bl	8000fa4 <HAL_Delay>

}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	080030c8 	.word	0x080030c8
 8000eb4:	080030d4 	.word	0x080030d4
 8000eb8:	080030dc 	.word	0x080030dc
 8000ebc:	080030e4 	.word	0x080030e4

08000ec0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ec4:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <HAL_Init+0x40>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a0d      	ldr	r2, [pc, #52]	; (8000f00 <HAL_Init+0x40>)
 8000eca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ece:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ed0:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <HAL_Init+0x40>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a0a      	ldr	r2, [pc, #40]	; (8000f00 <HAL_Init+0x40>)
 8000ed6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000edc:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <HAL_Init+0x40>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a07      	ldr	r2, [pc, #28]	; (8000f00 <HAL_Init+0x40>)
 8000ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee8:	2003      	movs	r0, #3
 8000eea:	f000 f931 	bl	8001150 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eee:	2000      	movs	r0, #0
 8000ef0:	f000 f808 	bl	8000f04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef4:	f7ff fc3c 	bl	8000770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40023c00 	.word	0x40023c00

08000f04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <HAL_InitTick+0x54>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <HAL_InitTick+0x58>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	4619      	mov	r1, r3
 8000f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 f93b 	bl	800119e <HAL_SYSTICK_Config>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e00e      	b.n	8000f50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b0f      	cmp	r3, #15
 8000f36:	d80a      	bhi.n	8000f4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f40:	f000 f911 	bl	8001166 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f44:	4a06      	ldr	r2, [pc, #24]	; (8000f60 <HAL_InitTick+0x5c>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	e000      	b.n	8000f50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000000 	.word	0x20000000
 8000f5c:	20000008 	.word	0x20000008
 8000f60:	20000004 	.word	0x20000004

08000f64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_IncTick+0x20>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_IncTick+0x24>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4413      	add	r3, r2
 8000f74:	4a04      	ldr	r2, [pc, #16]	; (8000f88 <HAL_IncTick+0x24>)
 8000f76:	6013      	str	r3, [r2, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	20000008 	.word	0x20000008
 8000f88:	200000f0 	.word	0x200000f0

08000f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f90:	4b03      	ldr	r3, [pc, #12]	; (8000fa0 <HAL_GetTick+0x14>)
 8000f92:	681b      	ldr	r3, [r3, #0]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	200000f0 	.word	0x200000f0

08000fa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fac:	f7ff ffee 	bl	8000f8c <HAL_GetTick>
 8000fb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fbc:	d005      	beq.n	8000fca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <HAL_Delay+0x44>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fca:	bf00      	nop
 8000fcc:	f7ff ffde 	bl	8000f8c <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	68fa      	ldr	r2, [r7, #12]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d8f7      	bhi.n	8000fcc <HAL_Delay+0x28>
  {
  }
}
 8000fdc:	bf00      	nop
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000008 	.word	0x20000008

08000fec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <__NVIC_SetPriorityGrouping+0x44>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001002:	68ba      	ldr	r2, [r7, #8]
 8001004:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001008:	4013      	ands	r3, r2
 800100a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001014:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800101c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800101e:	4a04      	ldr	r2, [pc, #16]	; (8001030 <__NVIC_SetPriorityGrouping+0x44>)
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	60d3      	str	r3, [r2, #12]
}
 8001024:	bf00      	nop
 8001026:	3714      	adds	r7, #20
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001038:	4b04      	ldr	r3, [pc, #16]	; (800104c <__NVIC_GetPriorityGrouping+0x18>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	0a1b      	lsrs	r3, r3, #8
 800103e:	f003 0307 	and.w	r3, r3, #7
}
 8001042:	4618      	mov	r0, r3
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	6039      	str	r1, [r7, #0]
 800105a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800105c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001060:	2b00      	cmp	r3, #0
 8001062:	db0a      	blt.n	800107a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	b2da      	uxtb	r2, r3
 8001068:	490c      	ldr	r1, [pc, #48]	; (800109c <__NVIC_SetPriority+0x4c>)
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	0112      	lsls	r2, r2, #4
 8001070:	b2d2      	uxtb	r2, r2
 8001072:	440b      	add	r3, r1
 8001074:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001078:	e00a      	b.n	8001090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4908      	ldr	r1, [pc, #32]	; (80010a0 <__NVIC_SetPriority+0x50>)
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	f003 030f 	and.w	r3, r3, #15
 8001086:	3b04      	subs	r3, #4
 8001088:	0112      	lsls	r2, r2, #4
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	440b      	add	r3, r1
 800108e:	761a      	strb	r2, [r3, #24]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	e000e100 	.word	0xe000e100
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b089      	sub	sp, #36	; 0x24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	f1c3 0307 	rsb	r3, r3, #7
 80010be:	2b04      	cmp	r3, #4
 80010c0:	bf28      	it	cs
 80010c2:	2304      	movcs	r3, #4
 80010c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3304      	adds	r3, #4
 80010ca:	2b06      	cmp	r3, #6
 80010cc:	d902      	bls.n	80010d4 <NVIC_EncodePriority+0x30>
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3b03      	subs	r3, #3
 80010d2:	e000      	b.n	80010d6 <NVIC_EncodePriority+0x32>
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43da      	mvns	r2, r3
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	401a      	ands	r2, r3
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	fa01 f303 	lsl.w	r3, r1, r3
 80010f6:	43d9      	mvns	r1, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	4313      	orrs	r3, r2
         );
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3724      	adds	r7, #36	; 0x24
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
	...

0800110c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3b01      	subs	r3, #1
 8001118:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800111c:	d301      	bcc.n	8001122 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800111e:	2301      	movs	r3, #1
 8001120:	e00f      	b.n	8001142 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001122:	4a0a      	ldr	r2, [pc, #40]	; (800114c <SysTick_Config+0x40>)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3b01      	subs	r3, #1
 8001128:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800112a:	210f      	movs	r1, #15
 800112c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001130:	f7ff ff8e 	bl	8001050 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001134:	4b05      	ldr	r3, [pc, #20]	; (800114c <SysTick_Config+0x40>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113a:	4b04      	ldr	r3, [pc, #16]	; (800114c <SysTick_Config+0x40>)
 800113c:	2207      	movs	r2, #7
 800113e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	e000e010 	.word	0xe000e010

08001150 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f7ff ff47 	bl	8000fec <__NVIC_SetPriorityGrouping>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001166:	b580      	push	{r7, lr}
 8001168:	b086      	sub	sp, #24
 800116a:	af00      	add	r7, sp, #0
 800116c:	4603      	mov	r3, r0
 800116e:	60b9      	str	r1, [r7, #8]
 8001170:	607a      	str	r2, [r7, #4]
 8001172:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001178:	f7ff ff5c 	bl	8001034 <__NVIC_GetPriorityGrouping>
 800117c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	68b9      	ldr	r1, [r7, #8]
 8001182:	6978      	ldr	r0, [r7, #20]
 8001184:	f7ff ff8e 	bl	80010a4 <NVIC_EncodePriority>
 8001188:	4602      	mov	r2, r0
 800118a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118e:	4611      	mov	r1, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ff5d 	bl	8001050 <__NVIC_SetPriority>
}
 8001196:	bf00      	nop
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b082      	sub	sp, #8
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f7ff ffb0 	bl	800110c <SysTick_Config>
 80011ac:	4603      	mov	r3, r0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b089      	sub	sp, #36	; 0x24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011c2:	2300      	movs	r3, #0
 80011c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011c6:	2300      	movs	r3, #0
 80011c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
 80011d2:	e159      	b.n	8001488 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011d4:	2201      	movs	r2, #1
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	697a      	ldr	r2, [r7, #20]
 80011e4:	4013      	ands	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	f040 8148 	bne.w	8001482 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f003 0303 	and.w	r3, r3, #3
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d005      	beq.n	800120a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001206:	2b02      	cmp	r3, #2
 8001208:	d130      	bne.n	800126c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	2203      	movs	r2, #3
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43db      	mvns	r3, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4013      	ands	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	68da      	ldr	r2, [r3, #12]
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4313      	orrs	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001240:	2201      	movs	r2, #1
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4013      	ands	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	091b      	lsrs	r3, r3, #4
 8001256:	f003 0201 	and.w	r2, r3, #1
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f003 0303 	and.w	r3, r3, #3
 8001274:	2b03      	cmp	r3, #3
 8001276:	d017      	beq.n	80012a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	2203      	movs	r2, #3
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4013      	ands	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	689a      	ldr	r2, [r3, #8]
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f003 0303 	and.w	r3, r3, #3
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d123      	bne.n	80012fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	08da      	lsrs	r2, r3, #3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3208      	adds	r2, #8
 80012bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	f003 0307 	and.w	r3, r3, #7
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	220f      	movs	r2, #15
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	691a      	ldr	r2, [r3, #16]
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	08da      	lsrs	r2, r3, #3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	3208      	adds	r2, #8
 80012f6:	69b9      	ldr	r1, [r7, #24]
 80012f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	2203      	movs	r2, #3
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f003 0203 	and.w	r2, r3, #3
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4313      	orrs	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001338:	2b00      	cmp	r3, #0
 800133a:	f000 80a2 	beq.w	8001482 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	4b57      	ldr	r3, [pc, #348]	; (80014a0 <HAL_GPIO_Init+0x2e8>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001346:	4a56      	ldr	r2, [pc, #344]	; (80014a0 <HAL_GPIO_Init+0x2e8>)
 8001348:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800134c:	6453      	str	r3, [r2, #68]	; 0x44
 800134e:	4b54      	ldr	r3, [pc, #336]	; (80014a0 <HAL_GPIO_Init+0x2e8>)
 8001350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001352:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800135a:	4a52      	ldr	r2, [pc, #328]	; (80014a4 <HAL_GPIO_Init+0x2ec>)
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	089b      	lsrs	r3, r3, #2
 8001360:	3302      	adds	r3, #2
 8001362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001366:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	f003 0303 	and.w	r3, r3, #3
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	220f      	movs	r2, #15
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43db      	mvns	r3, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4013      	ands	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a49      	ldr	r2, [pc, #292]	; (80014a8 <HAL_GPIO_Init+0x2f0>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d019      	beq.n	80013ba <HAL_GPIO_Init+0x202>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a48      	ldr	r2, [pc, #288]	; (80014ac <HAL_GPIO_Init+0x2f4>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d013      	beq.n	80013b6 <HAL_GPIO_Init+0x1fe>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a47      	ldr	r2, [pc, #284]	; (80014b0 <HAL_GPIO_Init+0x2f8>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d00d      	beq.n	80013b2 <HAL_GPIO_Init+0x1fa>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a46      	ldr	r2, [pc, #280]	; (80014b4 <HAL_GPIO_Init+0x2fc>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d007      	beq.n	80013ae <HAL_GPIO_Init+0x1f6>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a45      	ldr	r2, [pc, #276]	; (80014b8 <HAL_GPIO_Init+0x300>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d101      	bne.n	80013aa <HAL_GPIO_Init+0x1f2>
 80013a6:	2304      	movs	r3, #4
 80013a8:	e008      	b.n	80013bc <HAL_GPIO_Init+0x204>
 80013aa:	2307      	movs	r3, #7
 80013ac:	e006      	b.n	80013bc <HAL_GPIO_Init+0x204>
 80013ae:	2303      	movs	r3, #3
 80013b0:	e004      	b.n	80013bc <HAL_GPIO_Init+0x204>
 80013b2:	2302      	movs	r3, #2
 80013b4:	e002      	b.n	80013bc <HAL_GPIO_Init+0x204>
 80013b6:	2301      	movs	r3, #1
 80013b8:	e000      	b.n	80013bc <HAL_GPIO_Init+0x204>
 80013ba:	2300      	movs	r3, #0
 80013bc:	69fa      	ldr	r2, [r7, #28]
 80013be:	f002 0203 	and.w	r2, r2, #3
 80013c2:	0092      	lsls	r2, r2, #2
 80013c4:	4093      	lsls	r3, r2
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013cc:	4935      	ldr	r1, [pc, #212]	; (80014a4 <HAL_GPIO_Init+0x2ec>)
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	089b      	lsrs	r3, r3, #2
 80013d2:	3302      	adds	r3, #2
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013da:	4b38      	ldr	r3, [pc, #224]	; (80014bc <HAL_GPIO_Init+0x304>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	43db      	mvns	r3, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4013      	ands	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013fe:	4a2f      	ldr	r2, [pc, #188]	; (80014bc <HAL_GPIO_Init+0x304>)
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001404:	4b2d      	ldr	r3, [pc, #180]	; (80014bc <HAL_GPIO_Init+0x304>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	43db      	mvns	r3, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	4313      	orrs	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001428:	4a24      	ldr	r2, [pc, #144]	; (80014bc <HAL_GPIO_Init+0x304>)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800142e:	4b23      	ldr	r3, [pc, #140]	; (80014bc <HAL_GPIO_Init+0x304>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	43db      	mvns	r3, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4013      	ands	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	4313      	orrs	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001452:	4a1a      	ldr	r2, [pc, #104]	; (80014bc <HAL_GPIO_Init+0x304>)
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001458:	4b18      	ldr	r3, [pc, #96]	; (80014bc <HAL_GPIO_Init+0x304>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d003      	beq.n	800147c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	4313      	orrs	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800147c:	4a0f      	ldr	r2, [pc, #60]	; (80014bc <HAL_GPIO_Init+0x304>)
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3301      	adds	r3, #1
 8001486:	61fb      	str	r3, [r7, #28]
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	2b0f      	cmp	r3, #15
 800148c:	f67f aea2 	bls.w	80011d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001490:	bf00      	nop
 8001492:	bf00      	nop
 8001494:	3724      	adds	r7, #36	; 0x24
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40013800 	.word	0x40013800
 80014a8:	40020000 	.word	0x40020000
 80014ac:	40020400 	.word	0x40020400
 80014b0:	40020800 	.word	0x40020800
 80014b4:	40020c00 	.word	0x40020c00
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40013c00 	.word	0x40013c00

080014c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	691a      	ldr	r2, [r3, #16]
 80014d0:	887b      	ldrh	r3, [r7, #2]
 80014d2:	4013      	ands	r3, r2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d002      	beq.n	80014de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014d8:	2301      	movs	r3, #1
 80014da:	73fb      	strb	r3, [r7, #15]
 80014dc:	e001      	b.n	80014e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014de:	2300      	movs	r3, #0
 80014e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	460b      	mov	r3, r1
 80014fa:	807b      	strh	r3, [r7, #2]
 80014fc:	4613      	mov	r3, r2
 80014fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001500:	787b      	ldrb	r3, [r7, #1]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d003      	beq.n	800150e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001506:	887a      	ldrh	r2, [r7, #2]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800150c:	e003      	b.n	8001516 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800150e:	887b      	ldrh	r3, [r7, #2]
 8001510:	041a      	lsls	r2, r3, #16
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	619a      	str	r2, [r3, #24]
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
	...

08001524 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e12b      	b.n	800178e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b00      	cmp	r3, #0
 8001540:	d106      	bne.n	8001550 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7ff f938 	bl	80007c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2224      	movs	r2, #36	; 0x24
 8001554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f022 0201 	bic.w	r2, r2, #1
 8001566:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001576:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001586:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001588:	f001 fbec 	bl	8002d64 <HAL_RCC_GetPCLK1Freq>
 800158c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	4a81      	ldr	r2, [pc, #516]	; (8001798 <HAL_I2C_Init+0x274>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d807      	bhi.n	80015a8 <HAL_I2C_Init+0x84>
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4a80      	ldr	r2, [pc, #512]	; (800179c <HAL_I2C_Init+0x278>)
 800159c:	4293      	cmp	r3, r2
 800159e:	bf94      	ite	ls
 80015a0:	2301      	movls	r3, #1
 80015a2:	2300      	movhi	r3, #0
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	e006      	b.n	80015b6 <HAL_I2C_Init+0x92>
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	4a7d      	ldr	r2, [pc, #500]	; (80017a0 <HAL_I2C_Init+0x27c>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	bf94      	ite	ls
 80015b0:	2301      	movls	r3, #1
 80015b2:	2300      	movhi	r3, #0
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e0e7      	b.n	800178e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	4a78      	ldr	r2, [pc, #480]	; (80017a4 <HAL_I2C_Init+0x280>)
 80015c2:	fba2 2303 	umull	r2, r3, r2, r3
 80015c6:	0c9b      	lsrs	r3, r3, #18
 80015c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	68ba      	ldr	r2, [r7, #8]
 80015da:	430a      	orrs	r2, r1
 80015dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	6a1b      	ldr	r3, [r3, #32]
 80015e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	4a6a      	ldr	r2, [pc, #424]	; (8001798 <HAL_I2C_Init+0x274>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d802      	bhi.n	80015f8 <HAL_I2C_Init+0xd4>
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	3301      	adds	r3, #1
 80015f6:	e009      	b.n	800160c <HAL_I2C_Init+0xe8>
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015fe:	fb02 f303 	mul.w	r3, r2, r3
 8001602:	4a69      	ldr	r2, [pc, #420]	; (80017a8 <HAL_I2C_Init+0x284>)
 8001604:	fba2 2303 	umull	r2, r3, r2, r3
 8001608:	099b      	lsrs	r3, r3, #6
 800160a:	3301      	adds	r3, #1
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	6812      	ldr	r2, [r2, #0]
 8001610:	430b      	orrs	r3, r1
 8001612:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800161e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	495c      	ldr	r1, [pc, #368]	; (8001798 <HAL_I2C_Init+0x274>)
 8001628:	428b      	cmp	r3, r1
 800162a:	d819      	bhi.n	8001660 <HAL_I2C_Init+0x13c>
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	1e59      	subs	r1, r3, #1
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	fbb1 f3f3 	udiv	r3, r1, r3
 800163a:	1c59      	adds	r1, r3, #1
 800163c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001640:	400b      	ands	r3, r1
 8001642:	2b00      	cmp	r3, #0
 8001644:	d00a      	beq.n	800165c <HAL_I2C_Init+0x138>
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	1e59      	subs	r1, r3, #1
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	fbb1 f3f3 	udiv	r3, r1, r3
 8001654:	3301      	adds	r3, #1
 8001656:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800165a:	e051      	b.n	8001700 <HAL_I2C_Init+0x1dc>
 800165c:	2304      	movs	r3, #4
 800165e:	e04f      	b.n	8001700 <HAL_I2C_Init+0x1dc>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d111      	bne.n	800168c <HAL_I2C_Init+0x168>
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	1e58      	subs	r0, r3, #1
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6859      	ldr	r1, [r3, #4]
 8001670:	460b      	mov	r3, r1
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	440b      	add	r3, r1
 8001676:	fbb0 f3f3 	udiv	r3, r0, r3
 800167a:	3301      	adds	r3, #1
 800167c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001680:	2b00      	cmp	r3, #0
 8001682:	bf0c      	ite	eq
 8001684:	2301      	moveq	r3, #1
 8001686:	2300      	movne	r3, #0
 8001688:	b2db      	uxtb	r3, r3
 800168a:	e012      	b.n	80016b2 <HAL_I2C_Init+0x18e>
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	1e58      	subs	r0, r3, #1
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6859      	ldr	r1, [r3, #4]
 8001694:	460b      	mov	r3, r1
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	440b      	add	r3, r1
 800169a:	0099      	lsls	r1, r3, #2
 800169c:	440b      	add	r3, r1
 800169e:	fbb0 f3f3 	udiv	r3, r0, r3
 80016a2:	3301      	adds	r3, #1
 80016a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	bf0c      	ite	eq
 80016ac:	2301      	moveq	r3, #1
 80016ae:	2300      	movne	r3, #0
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <HAL_I2C_Init+0x196>
 80016b6:	2301      	movs	r3, #1
 80016b8:	e022      	b.n	8001700 <HAL_I2C_Init+0x1dc>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d10e      	bne.n	80016e0 <HAL_I2C_Init+0x1bc>
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	1e58      	subs	r0, r3, #1
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6859      	ldr	r1, [r3, #4]
 80016ca:	460b      	mov	r3, r1
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	440b      	add	r3, r1
 80016d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80016d4:	3301      	adds	r3, #1
 80016d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016de:	e00f      	b.n	8001700 <HAL_I2C_Init+0x1dc>
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	1e58      	subs	r0, r3, #1
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6859      	ldr	r1, [r3, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	440b      	add	r3, r1
 80016ee:	0099      	lsls	r1, r3, #2
 80016f0:	440b      	add	r3, r1
 80016f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80016f6:	3301      	adds	r3, #1
 80016f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001700:	6879      	ldr	r1, [r7, #4]
 8001702:	6809      	ldr	r1, [r1, #0]
 8001704:	4313      	orrs	r3, r2
 8001706:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	69da      	ldr	r2, [r3, #28]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	431a      	orrs	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	430a      	orrs	r2, r1
 8001722:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800172e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	6911      	ldr	r1, [r2, #16]
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	68d2      	ldr	r2, [r2, #12]
 800173a:	4311      	orrs	r1, r2
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	6812      	ldr	r2, [r2, #0]
 8001740:	430b      	orrs	r3, r1
 8001742:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	695a      	ldr	r2, [r3, #20]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	431a      	orrs	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	430a      	orrs	r2, r1
 800175e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f042 0201 	orr.w	r2, r2, #1
 800176e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2220      	movs	r2, #32
 800177a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	000186a0 	.word	0x000186a0
 800179c:	001e847f 	.word	0x001e847f
 80017a0:	003d08ff 	.word	0x003d08ff
 80017a4:	431bde83 	.word	0x431bde83
 80017a8:	10624dd3 	.word	0x10624dd3

080017ac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b088      	sub	sp, #32
 80017b0:	af02      	add	r7, sp, #8
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	607a      	str	r2, [r7, #4]
 80017b6:	461a      	mov	r2, r3
 80017b8:	460b      	mov	r3, r1
 80017ba:	817b      	strh	r3, [r7, #10]
 80017bc:	4613      	mov	r3, r2
 80017be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80017c0:	f7ff fbe4 	bl	8000f8c <HAL_GetTick>
 80017c4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b20      	cmp	r3, #32
 80017d0:	f040 80e0 	bne.w	8001994 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	2319      	movs	r3, #25
 80017da:	2201      	movs	r2, #1
 80017dc:	4970      	ldr	r1, [pc, #448]	; (80019a0 <HAL_I2C_Master_Transmit+0x1f4>)
 80017de:	68f8      	ldr	r0, [r7, #12]
 80017e0:	f000 fc72 	bl	80020c8 <I2C_WaitOnFlagUntilTimeout>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80017ea:	2302      	movs	r3, #2
 80017ec:	e0d3      	b.n	8001996 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d101      	bne.n	80017fc <HAL_I2C_Master_Transmit+0x50>
 80017f8:	2302      	movs	r3, #2
 80017fa:	e0cc      	b.n	8001996 <HAL_I2C_Master_Transmit+0x1ea>
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b01      	cmp	r3, #1
 8001810:	d007      	beq.n	8001822 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f042 0201 	orr.w	r2, r2, #1
 8001820:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001830:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2221      	movs	r2, #33	; 0x21
 8001836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2210      	movs	r2, #16
 800183e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2200      	movs	r2, #0
 8001846:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	893a      	ldrh	r2, [r7, #8]
 8001852:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001858:	b29a      	uxth	r2, r3
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	4a50      	ldr	r2, [pc, #320]	; (80019a4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001862:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001864:	8979      	ldrh	r1, [r7, #10]
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	6a3a      	ldr	r2, [r7, #32]
 800186a:	68f8      	ldr	r0, [r7, #12]
 800186c:	f000 fac2 	bl	8001df4 <I2C_MasterRequestWrite>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e08d      	b.n	8001996 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800187a:	2300      	movs	r3, #0
 800187c:	613b      	str	r3, [r7, #16]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	695b      	ldr	r3, [r3, #20]
 8001884:	613b      	str	r3, [r7, #16]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	613b      	str	r3, [r7, #16]
 800188e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001890:	e066      	b.n	8001960 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001892:	697a      	ldr	r2, [r7, #20]
 8001894:	6a39      	ldr	r1, [r7, #32]
 8001896:	68f8      	ldr	r0, [r7, #12]
 8001898:	f000 fcec 	bl	8002274 <I2C_WaitOnTXEFlagUntilTimeout>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d00d      	beq.n	80018be <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	2b04      	cmp	r3, #4
 80018a8:	d107      	bne.n	80018ba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e06b      	b.n	8001996 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c2:	781a      	ldrb	r2, [r3, #0]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ce:	1c5a      	adds	r2, r3, #1
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018d8:	b29b      	uxth	r3, r3
 80018da:	3b01      	subs	r3, #1
 80018dc:	b29a      	uxth	r2, r3
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018e6:	3b01      	subs	r3, #1
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	2b04      	cmp	r3, #4
 80018fa:	d11b      	bne.n	8001934 <HAL_I2C_Master_Transmit+0x188>
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001900:	2b00      	cmp	r3, #0
 8001902:	d017      	beq.n	8001934 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001908:	781a      	ldrb	r2, [r3, #0]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001914:	1c5a      	adds	r2, r3, #1
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800191e:	b29b      	uxth	r3, r3
 8001920:	3b01      	subs	r3, #1
 8001922:	b29a      	uxth	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800192c:	3b01      	subs	r3, #1
 800192e:	b29a      	uxth	r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	6a39      	ldr	r1, [r7, #32]
 8001938:	68f8      	ldr	r0, [r7, #12]
 800193a:	f000 fcdc 	bl	80022f6 <I2C_WaitOnBTFFlagUntilTimeout>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d00d      	beq.n	8001960 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001948:	2b04      	cmp	r3, #4
 800194a:	d107      	bne.n	800195c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800195a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e01a      	b.n	8001996 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001964:	2b00      	cmp	r3, #0
 8001966:	d194      	bne.n	8001892 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001976:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2220      	movs	r2, #32
 800197c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001990:	2300      	movs	r3, #0
 8001992:	e000      	b.n	8001996 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001994:	2302      	movs	r3, #2
  }
}
 8001996:	4618      	mov	r0, r3
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	00100002 	.word	0x00100002
 80019a4:	ffff0000 	.word	0xffff0000

080019a8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b08c      	sub	sp, #48	; 0x30
 80019ac:	af02      	add	r7, sp, #8
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	4608      	mov	r0, r1
 80019b2:	4611      	mov	r1, r2
 80019b4:	461a      	mov	r2, r3
 80019b6:	4603      	mov	r3, r0
 80019b8:	817b      	strh	r3, [r7, #10]
 80019ba:	460b      	mov	r3, r1
 80019bc:	813b      	strh	r3, [r7, #8]
 80019be:	4613      	mov	r3, r2
 80019c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80019c2:	f7ff fae3 	bl	8000f8c <HAL_GetTick>
 80019c6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	2b20      	cmp	r3, #32
 80019d2:	f040 8208 	bne.w	8001de6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	2319      	movs	r3, #25
 80019dc:	2201      	movs	r2, #1
 80019de:	497b      	ldr	r1, [pc, #492]	; (8001bcc <HAL_I2C_Mem_Read+0x224>)
 80019e0:	68f8      	ldr	r0, [r7, #12]
 80019e2:	f000 fb71 	bl	80020c8 <I2C_WaitOnFlagUntilTimeout>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80019ec:	2302      	movs	r3, #2
 80019ee:	e1fb      	b.n	8001de8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d101      	bne.n	80019fe <HAL_I2C_Mem_Read+0x56>
 80019fa:	2302      	movs	r3, #2
 80019fc:	e1f4      	b.n	8001de8 <HAL_I2C_Mem_Read+0x440>
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2201      	movs	r2, #1
 8001a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d007      	beq.n	8001a24 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f042 0201 	orr.w	r2, r2, #1
 8001a22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2222      	movs	r2, #34	; 0x22
 8001a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2240      	movs	r2, #64	; 0x40
 8001a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2200      	movs	r2, #0
 8001a48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001a54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	4a5b      	ldr	r2, [pc, #364]	; (8001bd0 <HAL_I2C_Mem_Read+0x228>)
 8001a64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a66:	88f8      	ldrh	r0, [r7, #6]
 8001a68:	893a      	ldrh	r2, [r7, #8]
 8001a6a:	8979      	ldrh	r1, [r7, #10]
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6e:	9301      	str	r3, [sp, #4]
 8001a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	4603      	mov	r3, r0
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	f000 fa3e 	bl	8001ef8 <I2C_RequestMemoryRead>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e1b0      	b.n	8001de8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d113      	bne.n	8001ab6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a8e:	2300      	movs	r3, #0
 8001a90:	623b      	str	r3, [r7, #32]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	695b      	ldr	r3, [r3, #20]
 8001a98:	623b      	str	r3, [r7, #32]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	623b      	str	r3, [r7, #32]
 8001aa2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	e184      	b.n	8001dc0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d11b      	bne.n	8001af6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001acc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61fb      	str	r3, [r7, #28]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	695b      	ldr	r3, [r3, #20]
 8001ad8:	61fb      	str	r3, [r7, #28]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	61fb      	str	r3, [r7, #28]
 8001ae2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	e164      	b.n	8001dc0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d11b      	bne.n	8001b36 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b0c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61bb      	str	r3, [r7, #24]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	695b      	ldr	r3, [r3, #20]
 8001b28:	61bb      	str	r3, [r7, #24]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	61bb      	str	r3, [r7, #24]
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	e144      	b.n	8001dc0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	695b      	ldr	r3, [r3, #20]
 8001b40:	617b      	str	r3, [r7, #20]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	617b      	str	r3, [r7, #20]
 8001b4a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001b4c:	e138      	b.n	8001dc0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b52:	2b03      	cmp	r3, #3
 8001b54:	f200 80f1 	bhi.w	8001d3a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d123      	bne.n	8001ba8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001b64:	68f8      	ldr	r0, [r7, #12]
 8001b66:	f000 fc07 	bl	8002378 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e139      	b.n	8001de8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	691a      	ldr	r2, [r3, #16]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7e:	b2d2      	uxtb	r2, r2
 8001b80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b86:	1c5a      	adds	r2, r3, #1
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b90:	3b01      	subs	r3, #1
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ba6:	e10b      	b.n	8001dc0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d14e      	bne.n	8001c4e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	4906      	ldr	r1, [pc, #24]	; (8001bd4 <HAL_I2C_Mem_Read+0x22c>)
 8001bba:	68f8      	ldr	r0, [r7, #12]
 8001bbc:	f000 fa84 	bl	80020c8 <I2C_WaitOnFlagUntilTimeout>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d008      	beq.n	8001bd8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e10e      	b.n	8001de8 <HAL_I2C_Mem_Read+0x440>
 8001bca:	bf00      	nop
 8001bcc:	00100002 	.word	0x00100002
 8001bd0:	ffff0000 	.word	0xffff0000
 8001bd4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001be6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	691a      	ldr	r2, [r3, #16]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf2:	b2d2      	uxtb	r2, r2
 8001bf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfa:	1c5a      	adds	r2, r3, #1
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c04:	3b01      	subs	r3, #1
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	3b01      	subs	r3, #1
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	691a      	ldr	r2, [r3, #16]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c24:	b2d2      	uxtb	r2, r2
 8001c26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2c:	1c5a      	adds	r2, r3, #1
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c36:	3b01      	subs	r3, #1
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	3b01      	subs	r3, #1
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c4c:	e0b8      	b.n	8001dc0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c54:	2200      	movs	r2, #0
 8001c56:	4966      	ldr	r1, [pc, #408]	; (8001df0 <HAL_I2C_Mem_Read+0x448>)
 8001c58:	68f8      	ldr	r0, [r7, #12]
 8001c5a:	f000 fa35 	bl	80020c8 <I2C_WaitOnFlagUntilTimeout>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e0bf      	b.n	8001de8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	691a      	ldr	r2, [r3, #16]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8a:	1c5a      	adds	r2, r3, #1
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c94:	3b01      	subs	r3, #1
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	494f      	ldr	r1, [pc, #316]	; (8001df0 <HAL_I2C_Mem_Read+0x448>)
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	f000 fa07 	bl	80020c8 <I2C_WaitOnFlagUntilTimeout>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e091      	b.n	8001de8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	691a      	ldr	r2, [r3, #16]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce6:	1c5a      	adds	r2, r3, #1
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	691a      	ldr	r2, [r3, #16]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d18:	1c5a      	adds	r2, r3, #1
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d22:	3b01      	subs	r3, #1
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	3b01      	subs	r3, #1
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d38:	e042      	b.n	8001dc0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d3c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001d3e:	68f8      	ldr	r0, [r7, #12]
 8001d40:	f000 fb1a 	bl	8002378 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e04c      	b.n	8001de8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	691a      	ldr	r2, [r3, #16]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d58:	b2d2      	uxtb	r2, r2
 8001d5a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d60:	1c5a      	adds	r2, r3, #1
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	f003 0304 	and.w	r3, r3, #4
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	d118      	bne.n	8001dc0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	691a      	ldr	r2, [r3, #16]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da0:	1c5a      	adds	r2, r3, #1
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001daa:	3b01      	subs	r3, #1
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	3b01      	subs	r3, #1
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f47f aec2 	bne.w	8001b4e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2220      	movs	r2, #32
 8001dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001de2:	2300      	movs	r3, #0
 8001de4:	e000      	b.n	8001de8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001de6:	2302      	movs	r3, #2
  }
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3728      	adds	r7, #40	; 0x28
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	00010004 	.word	0x00010004

08001df4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b088      	sub	sp, #32
 8001df8:	af02      	add	r7, sp, #8
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	607a      	str	r2, [r7, #4]
 8001dfe:	603b      	str	r3, [r7, #0]
 8001e00:	460b      	mov	r3, r1
 8001e02:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e08:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	2b08      	cmp	r3, #8
 8001e0e:	d006      	beq.n	8001e1e <I2C_MasterRequestWrite+0x2a>
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d003      	beq.n	8001e1e <I2C_MasterRequestWrite+0x2a>
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e1c:	d108      	bne.n	8001e30 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	e00b      	b.n	8001e48 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e34:	2b12      	cmp	r3, #18
 8001e36:	d107      	bne.n	8001e48 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e46:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e54:	68f8      	ldr	r0, [r7, #12]
 8001e56:	f000 f937 	bl	80020c8 <I2C_WaitOnFlagUntilTimeout>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d00d      	beq.n	8001e7c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e6e:	d103      	bne.n	8001e78 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e76:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e035      	b.n	8001ee8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e84:	d108      	bne.n	8001e98 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e86:	897b      	ldrh	r3, [r7, #10]
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e94:	611a      	str	r2, [r3, #16]
 8001e96:	e01b      	b.n	8001ed0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e98:	897b      	ldrh	r3, [r7, #10]
 8001e9a:	11db      	asrs	r3, r3, #7
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	f003 0306 	and.w	r3, r3, #6
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	f063 030f 	orn	r3, r3, #15
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	490e      	ldr	r1, [pc, #56]	; (8001ef0 <I2C_MasterRequestWrite+0xfc>)
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	f000 f95d 	bl	8002176 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e010      	b.n	8001ee8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001ec6:	897b      	ldrh	r3, [r7, #10]
 8001ec8:	b2da      	uxtb	r2, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	4907      	ldr	r1, [pc, #28]	; (8001ef4 <I2C_MasterRequestWrite+0x100>)
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f000 f94d 	bl	8002176 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e000      	b.n	8001ee8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	00010008 	.word	0x00010008
 8001ef4:	00010002 	.word	0x00010002

08001ef8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b088      	sub	sp, #32
 8001efc:	af02      	add	r7, sp, #8
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	4608      	mov	r0, r1
 8001f02:	4611      	mov	r1, r2
 8001f04:	461a      	mov	r2, r3
 8001f06:	4603      	mov	r3, r0
 8001f08:	817b      	strh	r3, [r7, #10]
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	813b      	strh	r3, [r7, #8]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f20:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f34:	9300      	str	r3, [sp, #0]
 8001f36:	6a3b      	ldr	r3, [r7, #32]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f3e:	68f8      	ldr	r0, [r7, #12]
 8001f40:	f000 f8c2 	bl	80020c8 <I2C_WaitOnFlagUntilTimeout>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00d      	beq.n	8001f66 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f58:	d103      	bne.n	8001f62 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f60:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e0aa      	b.n	80020bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f66:	897b      	ldrh	r3, [r7, #10]
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	6a3a      	ldr	r2, [r7, #32]
 8001f7a:	4952      	ldr	r1, [pc, #328]	; (80020c4 <I2C_RequestMemoryRead+0x1cc>)
 8001f7c:	68f8      	ldr	r0, [r7, #12]
 8001f7e:	f000 f8fa 	bl	8002176 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e097      	b.n	80020bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	617b      	str	r3, [r7, #20]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	617b      	str	r3, [r7, #20]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	617b      	str	r3, [r7, #20]
 8001fa0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fa4:	6a39      	ldr	r1, [r7, #32]
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f000 f964 	bl	8002274 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00d      	beq.n	8001fce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	d107      	bne.n	8001fca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fc8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e076      	b.n	80020bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001fce:	88fb      	ldrh	r3, [r7, #6]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d105      	bne.n	8001fe0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001fd4:	893b      	ldrh	r3, [r7, #8]
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	611a      	str	r2, [r3, #16]
 8001fde:	e021      	b.n	8002024 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001fe0:	893b      	ldrh	r3, [r7, #8]
 8001fe2:	0a1b      	lsrs	r3, r3, #8
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	b2da      	uxtb	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ff0:	6a39      	ldr	r1, [r7, #32]
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f000 f93e 	bl	8002274 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00d      	beq.n	800201a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	2b04      	cmp	r3, #4
 8002004:	d107      	bne.n	8002016 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002014:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e050      	b.n	80020bc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800201a:	893b      	ldrh	r3, [r7, #8]
 800201c:	b2da      	uxtb	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002026:	6a39      	ldr	r1, [r7, #32]
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f000 f923 	bl	8002274 <I2C_WaitOnTXEFlagUntilTimeout>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d00d      	beq.n	8002050 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002038:	2b04      	cmp	r3, #4
 800203a:	d107      	bne.n	800204c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800204a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e035      	b.n	80020bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800205e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	6a3b      	ldr	r3, [r7, #32]
 8002066:	2200      	movs	r2, #0
 8002068:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	f000 f82b 	bl	80020c8 <I2C_WaitOnFlagUntilTimeout>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00d      	beq.n	8002094 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002082:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002086:	d103      	bne.n	8002090 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800208e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e013      	b.n	80020bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002094:	897b      	ldrh	r3, [r7, #10]
 8002096:	b2db      	uxtb	r3, r3
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	b2da      	uxtb	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a6:	6a3a      	ldr	r2, [r7, #32]
 80020a8:	4906      	ldr	r1, [pc, #24]	; (80020c4 <I2C_RequestMemoryRead+0x1cc>)
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f000 f863 	bl	8002176 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e000      	b.n	80020bc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	00010002 	.word	0x00010002

080020c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	603b      	str	r3, [r7, #0]
 80020d4:	4613      	mov	r3, r2
 80020d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020d8:	e025      	b.n	8002126 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020e0:	d021      	beq.n	8002126 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020e2:	f7fe ff53 	bl	8000f8c <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d302      	bcc.n	80020f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d116      	bne.n	8002126 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2220      	movs	r2, #32
 8002102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	f043 0220 	orr.w	r2, r3, #32
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e023      	b.n	800216e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	0c1b      	lsrs	r3, r3, #16
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2b01      	cmp	r3, #1
 800212e:	d10d      	bne.n	800214c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	43da      	mvns	r2, r3
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	4013      	ands	r3, r2
 800213c:	b29b      	uxth	r3, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	bf0c      	ite	eq
 8002142:	2301      	moveq	r3, #1
 8002144:	2300      	movne	r3, #0
 8002146:	b2db      	uxtb	r3, r3
 8002148:	461a      	mov	r2, r3
 800214a:	e00c      	b.n	8002166 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	43da      	mvns	r2, r3
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	4013      	ands	r3, r2
 8002158:	b29b      	uxth	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	bf0c      	ite	eq
 800215e:	2301      	moveq	r3, #1
 8002160:	2300      	movne	r3, #0
 8002162:	b2db      	uxtb	r3, r3
 8002164:	461a      	mov	r2, r3
 8002166:	79fb      	ldrb	r3, [r7, #7]
 8002168:	429a      	cmp	r2, r3
 800216a:	d0b6      	beq.n	80020da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b084      	sub	sp, #16
 800217a:	af00      	add	r7, sp, #0
 800217c:	60f8      	str	r0, [r7, #12]
 800217e:	60b9      	str	r1, [r7, #8]
 8002180:	607a      	str	r2, [r7, #4]
 8002182:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002184:	e051      	b.n	800222a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	695b      	ldr	r3, [r3, #20]
 800218c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002190:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002194:	d123      	bne.n	80021de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2220      	movs	r2, #32
 80021ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	f043 0204 	orr.w	r2, r3, #4
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e046      	b.n	800226c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021e4:	d021      	beq.n	800222a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021e6:	f7fe fed1 	bl	8000f8c <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d302      	bcc.n	80021fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d116      	bne.n	800222a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2220      	movs	r2, #32
 8002206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	f043 0220 	orr.w	r2, r3, #32
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e020      	b.n	800226c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	0c1b      	lsrs	r3, r3, #16
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b01      	cmp	r3, #1
 8002232:	d10c      	bne.n	800224e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	43da      	mvns	r2, r3
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	4013      	ands	r3, r2
 8002240:	b29b      	uxth	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	bf14      	ite	ne
 8002246:	2301      	movne	r3, #1
 8002248:	2300      	moveq	r3, #0
 800224a:	b2db      	uxtb	r3, r3
 800224c:	e00b      	b.n	8002266 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	43da      	mvns	r2, r3
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	4013      	ands	r3, r2
 800225a:	b29b      	uxth	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	bf14      	ite	ne
 8002260:	2301      	movne	r3, #1
 8002262:	2300      	moveq	r3, #0
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d18d      	bne.n	8002186 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002280:	e02d      	b.n	80022de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002282:	68f8      	ldr	r0, [r7, #12]
 8002284:	f000 f8ce 	bl	8002424 <I2C_IsAcknowledgeFailed>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e02d      	b.n	80022ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002298:	d021      	beq.n	80022de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800229a:	f7fe fe77 	bl	8000f8c <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	68ba      	ldr	r2, [r7, #8]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d302      	bcc.n	80022b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d116      	bne.n	80022de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2220      	movs	r2, #32
 80022ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	f043 0220 	orr.w	r2, r3, #32
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e007      	b.n	80022ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e8:	2b80      	cmp	r3, #128	; 0x80
 80022ea:	d1ca      	bne.n	8002282 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b084      	sub	sp, #16
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	60f8      	str	r0, [r7, #12]
 80022fe:	60b9      	str	r1, [r7, #8]
 8002300:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002302:	e02d      	b.n	8002360 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f000 f88d 	bl	8002424 <I2C_IsAcknowledgeFailed>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e02d      	b.n	8002370 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800231a:	d021      	beq.n	8002360 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800231c:	f7fe fe36 	bl	8000f8c <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	429a      	cmp	r2, r3
 800232a:	d302      	bcc.n	8002332 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d116      	bne.n	8002360 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2220      	movs	r2, #32
 800233c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234c:	f043 0220 	orr.w	r2, r3, #32
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e007      	b.n	8002370 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	f003 0304 	and.w	r3, r3, #4
 800236a:	2b04      	cmp	r3, #4
 800236c:	d1ca      	bne.n	8002304 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002384:	e042      	b.n	800240c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	f003 0310 	and.w	r3, r3, #16
 8002390:	2b10      	cmp	r3, #16
 8002392:	d119      	bne.n	80023c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f06f 0210 	mvn.w	r2, #16
 800239c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2220      	movs	r2, #32
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e029      	b.n	800241c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023c8:	f7fe fde0 	bl	8000f8c <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	68ba      	ldr	r2, [r7, #8]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d302      	bcc.n	80023de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d116      	bne.n	800240c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2220      	movs	r2, #32
 80023e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f8:	f043 0220 	orr.w	r2, r3, #32
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e007      	b.n	800241c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002416:	2b40      	cmp	r3, #64	; 0x40
 8002418:	d1b5      	bne.n	8002386 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002436:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800243a:	d11b      	bne.n	8002474 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002444:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2220      	movs	r2, #32
 8002450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002460:	f043 0204 	orr.w	r2, r3, #4
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e000      	b.n	8002476 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
	...

08002484 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e267      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d075      	beq.n	800258e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024a2:	4b88      	ldr	r3, [pc, #544]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 030c 	and.w	r3, r3, #12
 80024aa:	2b04      	cmp	r3, #4
 80024ac:	d00c      	beq.n	80024c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ae:	4b85      	ldr	r3, [pc, #532]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024b6:	2b08      	cmp	r3, #8
 80024b8:	d112      	bne.n	80024e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ba:	4b82      	ldr	r3, [pc, #520]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024c6:	d10b      	bne.n	80024e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c8:	4b7e      	ldr	r3, [pc, #504]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d05b      	beq.n	800258c <HAL_RCC_OscConfig+0x108>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d157      	bne.n	800258c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e242      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024e8:	d106      	bne.n	80024f8 <HAL_RCC_OscConfig+0x74>
 80024ea:	4b76      	ldr	r3, [pc, #472]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a75      	ldr	r2, [pc, #468]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 80024f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024f4:	6013      	str	r3, [r2, #0]
 80024f6:	e01d      	b.n	8002534 <HAL_RCC_OscConfig+0xb0>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002500:	d10c      	bne.n	800251c <HAL_RCC_OscConfig+0x98>
 8002502:	4b70      	ldr	r3, [pc, #448]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a6f      	ldr	r2, [pc, #444]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002508:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800250c:	6013      	str	r3, [r2, #0]
 800250e:	4b6d      	ldr	r3, [pc, #436]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a6c      	ldr	r2, [pc, #432]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	e00b      	b.n	8002534 <HAL_RCC_OscConfig+0xb0>
 800251c:	4b69      	ldr	r3, [pc, #420]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a68      	ldr	r2, [pc, #416]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002522:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002526:	6013      	str	r3, [r2, #0]
 8002528:	4b66      	ldr	r3, [pc, #408]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a65      	ldr	r2, [pc, #404]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 800252e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002532:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d013      	beq.n	8002564 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253c:	f7fe fd26 	bl	8000f8c <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002544:	f7fe fd22 	bl	8000f8c <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b64      	cmp	r3, #100	; 0x64
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e207      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002556:	4b5b      	ldr	r3, [pc, #364]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0f0      	beq.n	8002544 <HAL_RCC_OscConfig+0xc0>
 8002562:	e014      	b.n	800258e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002564:	f7fe fd12 	bl	8000f8c <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800256c:	f7fe fd0e 	bl	8000f8c <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b64      	cmp	r3, #100	; 0x64
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e1f3      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257e:	4b51      	ldr	r3, [pc, #324]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1f0      	bne.n	800256c <HAL_RCC_OscConfig+0xe8>
 800258a:	e000      	b.n	800258e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800258c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d063      	beq.n	8002662 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800259a:	4b4a      	ldr	r3, [pc, #296]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 030c 	and.w	r3, r3, #12
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00b      	beq.n	80025be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025a6:	4b47      	ldr	r3, [pc, #284]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025ae:	2b08      	cmp	r3, #8
 80025b0:	d11c      	bne.n	80025ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025b2:	4b44      	ldr	r3, [pc, #272]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d116      	bne.n	80025ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025be:	4b41      	ldr	r3, [pc, #260]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d005      	beq.n	80025d6 <HAL_RCC_OscConfig+0x152>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d001      	beq.n	80025d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e1c7      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d6:	4b3b      	ldr	r3, [pc, #236]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	4937      	ldr	r1, [pc, #220]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ea:	e03a      	b.n	8002662 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d020      	beq.n	8002636 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025f4:	4b34      	ldr	r3, [pc, #208]	; (80026c8 <HAL_RCC_OscConfig+0x244>)
 80025f6:	2201      	movs	r2, #1
 80025f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fa:	f7fe fcc7 	bl	8000f8c <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002602:	f7fe fcc3 	bl	8000f8c <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e1a8      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002614:	4b2b      	ldr	r3, [pc, #172]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0f0      	beq.n	8002602 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002620:	4b28      	ldr	r3, [pc, #160]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	4925      	ldr	r1, [pc, #148]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002630:	4313      	orrs	r3, r2
 8002632:	600b      	str	r3, [r1, #0]
 8002634:	e015      	b.n	8002662 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002636:	4b24      	ldr	r3, [pc, #144]	; (80026c8 <HAL_RCC_OscConfig+0x244>)
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263c:	f7fe fca6 	bl	8000f8c <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002644:	f7fe fca2 	bl	8000f8c <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e187      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002656:	4b1b      	ldr	r3, [pc, #108]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f0      	bne.n	8002644 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b00      	cmp	r3, #0
 800266c:	d036      	beq.n	80026dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d016      	beq.n	80026a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002676:	4b15      	ldr	r3, [pc, #84]	; (80026cc <HAL_RCC_OscConfig+0x248>)
 8002678:	2201      	movs	r2, #1
 800267a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800267c:	f7fe fc86 	bl	8000f8c <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002684:	f7fe fc82 	bl	8000f8c <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e167      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002696:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002698:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0f0      	beq.n	8002684 <HAL_RCC_OscConfig+0x200>
 80026a2:	e01b      	b.n	80026dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026a4:	4b09      	ldr	r3, [pc, #36]	; (80026cc <HAL_RCC_OscConfig+0x248>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026aa:	f7fe fc6f 	bl	8000f8c <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026b0:	e00e      	b.n	80026d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026b2:	f7fe fc6b 	bl	8000f8c <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d907      	bls.n	80026d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e150      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
 80026c4:	40023800 	.word	0x40023800
 80026c8:	42470000 	.word	0x42470000
 80026cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d0:	4b88      	ldr	r3, [pc, #544]	; (80028f4 <HAL_RCC_OscConfig+0x470>)
 80026d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1ea      	bne.n	80026b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0304 	and.w	r3, r3, #4
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 8097 	beq.w	8002818 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ea:	2300      	movs	r3, #0
 80026ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ee:	4b81      	ldr	r3, [pc, #516]	; (80028f4 <HAL_RCC_OscConfig+0x470>)
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10f      	bne.n	800271a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	4b7d      	ldr	r3, [pc, #500]	; (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	4a7c      	ldr	r2, [pc, #496]	; (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002708:	6413      	str	r3, [r2, #64]	; 0x40
 800270a:	4b7a      	ldr	r3, [pc, #488]	; (80028f4 <HAL_RCC_OscConfig+0x470>)
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002712:	60bb      	str	r3, [r7, #8]
 8002714:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002716:	2301      	movs	r3, #1
 8002718:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800271a:	4b77      	ldr	r3, [pc, #476]	; (80028f8 <HAL_RCC_OscConfig+0x474>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002722:	2b00      	cmp	r3, #0
 8002724:	d118      	bne.n	8002758 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002726:	4b74      	ldr	r3, [pc, #464]	; (80028f8 <HAL_RCC_OscConfig+0x474>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a73      	ldr	r2, [pc, #460]	; (80028f8 <HAL_RCC_OscConfig+0x474>)
 800272c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002730:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002732:	f7fe fc2b 	bl	8000f8c <HAL_GetTick>
 8002736:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002738:	e008      	b.n	800274c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800273a:	f7fe fc27 	bl	8000f8c <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e10c      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800274c:	4b6a      	ldr	r3, [pc, #424]	; (80028f8 <HAL_RCC_OscConfig+0x474>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0f0      	beq.n	800273a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d106      	bne.n	800276e <HAL_RCC_OscConfig+0x2ea>
 8002760:	4b64      	ldr	r3, [pc, #400]	; (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002764:	4a63      	ldr	r2, [pc, #396]	; (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002766:	f043 0301 	orr.w	r3, r3, #1
 800276a:	6713      	str	r3, [r2, #112]	; 0x70
 800276c:	e01c      	b.n	80027a8 <HAL_RCC_OscConfig+0x324>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	2b05      	cmp	r3, #5
 8002774:	d10c      	bne.n	8002790 <HAL_RCC_OscConfig+0x30c>
 8002776:	4b5f      	ldr	r3, [pc, #380]	; (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800277a:	4a5e      	ldr	r2, [pc, #376]	; (80028f4 <HAL_RCC_OscConfig+0x470>)
 800277c:	f043 0304 	orr.w	r3, r3, #4
 8002780:	6713      	str	r3, [r2, #112]	; 0x70
 8002782:	4b5c      	ldr	r3, [pc, #368]	; (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002786:	4a5b      	ldr	r2, [pc, #364]	; (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	6713      	str	r3, [r2, #112]	; 0x70
 800278e:	e00b      	b.n	80027a8 <HAL_RCC_OscConfig+0x324>
 8002790:	4b58      	ldr	r3, [pc, #352]	; (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002794:	4a57      	ldr	r2, [pc, #348]	; (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002796:	f023 0301 	bic.w	r3, r3, #1
 800279a:	6713      	str	r3, [r2, #112]	; 0x70
 800279c:	4b55      	ldr	r3, [pc, #340]	; (80028f4 <HAL_RCC_OscConfig+0x470>)
 800279e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a0:	4a54      	ldr	r2, [pc, #336]	; (80028f4 <HAL_RCC_OscConfig+0x470>)
 80027a2:	f023 0304 	bic.w	r3, r3, #4
 80027a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d015      	beq.n	80027dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b0:	f7fe fbec 	bl	8000f8c <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b6:	e00a      	b.n	80027ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027b8:	f7fe fbe8 	bl	8000f8c <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e0cb      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ce:	4b49      	ldr	r3, [pc, #292]	; (80028f4 <HAL_RCC_OscConfig+0x470>)
 80027d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d0ee      	beq.n	80027b8 <HAL_RCC_OscConfig+0x334>
 80027da:	e014      	b.n	8002806 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027dc:	f7fe fbd6 	bl	8000f8c <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e2:	e00a      	b.n	80027fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027e4:	f7fe fbd2 	bl	8000f8c <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e0b5      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027fa:	4b3e      	ldr	r3, [pc, #248]	; (80028f4 <HAL_RCC_OscConfig+0x470>)
 80027fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1ee      	bne.n	80027e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002806:	7dfb      	ldrb	r3, [r7, #23]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d105      	bne.n	8002818 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800280c:	4b39      	ldr	r3, [pc, #228]	; (80028f4 <HAL_RCC_OscConfig+0x470>)
 800280e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002810:	4a38      	ldr	r2, [pc, #224]	; (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002812:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002816:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	2b00      	cmp	r3, #0
 800281e:	f000 80a1 	beq.w	8002964 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002822:	4b34      	ldr	r3, [pc, #208]	; (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 030c 	and.w	r3, r3, #12
 800282a:	2b08      	cmp	r3, #8
 800282c:	d05c      	beq.n	80028e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	2b02      	cmp	r3, #2
 8002834:	d141      	bne.n	80028ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002836:	4b31      	ldr	r3, [pc, #196]	; (80028fc <HAL_RCC_OscConfig+0x478>)
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283c:	f7fe fba6 	bl	8000f8c <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002844:	f7fe fba2 	bl	8000f8c <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e087      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002856:	4b27      	ldr	r3, [pc, #156]	; (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f0      	bne.n	8002844 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69da      	ldr	r2, [r3, #28]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	431a      	orrs	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	019b      	lsls	r3, r3, #6
 8002872:	431a      	orrs	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002878:	085b      	lsrs	r3, r3, #1
 800287a:	3b01      	subs	r3, #1
 800287c:	041b      	lsls	r3, r3, #16
 800287e:	431a      	orrs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002884:	061b      	lsls	r3, r3, #24
 8002886:	491b      	ldr	r1, [pc, #108]	; (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002888:	4313      	orrs	r3, r2
 800288a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800288c:	4b1b      	ldr	r3, [pc, #108]	; (80028fc <HAL_RCC_OscConfig+0x478>)
 800288e:	2201      	movs	r2, #1
 8002890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002892:	f7fe fb7b 	bl	8000f8c <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002898:	e008      	b.n	80028ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800289a:	f7fe fb77 	bl	8000f8c <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e05c      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ac:	4b11      	ldr	r3, [pc, #68]	; (80028f4 <HAL_RCC_OscConfig+0x470>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0f0      	beq.n	800289a <HAL_RCC_OscConfig+0x416>
 80028b8:	e054      	b.n	8002964 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ba:	4b10      	ldr	r3, [pc, #64]	; (80028fc <HAL_RCC_OscConfig+0x478>)
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c0:	f7fe fb64 	bl	8000f8c <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c8:	f7fe fb60 	bl	8000f8c <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e045      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028da:	4b06      	ldr	r3, [pc, #24]	; (80028f4 <HAL_RCC_OscConfig+0x470>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1f0      	bne.n	80028c8 <HAL_RCC_OscConfig+0x444>
 80028e6:	e03d      	b.n	8002964 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d107      	bne.n	8002900 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e038      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
 80028f4:	40023800 	.word	0x40023800
 80028f8:	40007000 	.word	0x40007000
 80028fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002900:	4b1b      	ldr	r3, [pc, #108]	; (8002970 <HAL_RCC_OscConfig+0x4ec>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d028      	beq.n	8002960 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002918:	429a      	cmp	r2, r3
 800291a:	d121      	bne.n	8002960 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002926:	429a      	cmp	r2, r3
 8002928:	d11a      	bne.n	8002960 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002930:	4013      	ands	r3, r2
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002936:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002938:	4293      	cmp	r3, r2
 800293a:	d111      	bne.n	8002960 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002946:	085b      	lsrs	r3, r3, #1
 8002948:	3b01      	subs	r3, #1
 800294a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800294c:	429a      	cmp	r2, r3
 800294e:	d107      	bne.n	8002960 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800295c:	429a      	cmp	r2, r3
 800295e:	d001      	beq.n	8002964 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e000      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3718      	adds	r7, #24
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40023800 	.word	0x40023800

08002974 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e0cc      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002988:	4b68      	ldr	r3, [pc, #416]	; (8002b2c <HAL_RCC_ClockConfig+0x1b8>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d90c      	bls.n	80029b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002996:	4b65      	ldr	r3, [pc, #404]	; (8002b2c <HAL_RCC_ClockConfig+0x1b8>)
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800299e:	4b63      	ldr	r3, [pc, #396]	; (8002b2c <HAL_RCC_ClockConfig+0x1b8>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d001      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e0b8      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d020      	beq.n	80029fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d005      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029c8:	4b59      	ldr	r3, [pc, #356]	; (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	4a58      	ldr	r2, [pc, #352]	; (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 80029ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0308 	and.w	r3, r3, #8
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d005      	beq.n	80029ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029e0:	4b53      	ldr	r3, [pc, #332]	; (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	4a52      	ldr	r2, [pc, #328]	; (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 80029e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029ec:	4b50      	ldr	r3, [pc, #320]	; (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	494d      	ldr	r1, [pc, #308]	; (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d044      	beq.n	8002a94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d107      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a12:	4b47      	ldr	r3, [pc, #284]	; (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d119      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e07f      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d003      	beq.n	8002a32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a2e:	2b03      	cmp	r3, #3
 8002a30:	d107      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a32:	4b3f      	ldr	r3, [pc, #252]	; (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d109      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e06f      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a42:	4b3b      	ldr	r3, [pc, #236]	; (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e067      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a52:	4b37      	ldr	r3, [pc, #220]	; (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f023 0203 	bic.w	r2, r3, #3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	4934      	ldr	r1, [pc, #208]	; (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a64:	f7fe fa92 	bl	8000f8c <HAL_GetTick>
 8002a68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a6a:	e00a      	b.n	8002a82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a6c:	f7fe fa8e 	bl	8000f8c <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e04f      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a82:	4b2b      	ldr	r3, [pc, #172]	; (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 020c 	and.w	r2, r3, #12
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d1eb      	bne.n	8002a6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a94:	4b25      	ldr	r3, [pc, #148]	; (8002b2c <HAL_RCC_ClockConfig+0x1b8>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0307 	and.w	r3, r3, #7
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d20c      	bcs.n	8002abc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aa2:	4b22      	ldr	r3, [pc, #136]	; (8002b2c <HAL_RCC_ClockConfig+0x1b8>)
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aaa:	4b20      	ldr	r3, [pc, #128]	; (8002b2c <HAL_RCC_ClockConfig+0x1b8>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	683a      	ldr	r2, [r7, #0]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d001      	beq.n	8002abc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e032      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0304 	and.w	r3, r3, #4
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d008      	beq.n	8002ada <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ac8:	4b19      	ldr	r3, [pc, #100]	; (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	4916      	ldr	r1, [pc, #88]	; (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0308 	and.w	r3, r3, #8
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d009      	beq.n	8002afa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ae6:	4b12      	ldr	r3, [pc, #72]	; (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	490e      	ldr	r1, [pc, #56]	; (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002afa:	f000 f821 	bl	8002b40 <HAL_RCC_GetSysClockFreq>
 8002afe:	4602      	mov	r2, r0
 8002b00:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	091b      	lsrs	r3, r3, #4
 8002b06:	f003 030f 	and.w	r3, r3, #15
 8002b0a:	490a      	ldr	r1, [pc, #40]	; (8002b34 <HAL_RCC_ClockConfig+0x1c0>)
 8002b0c:	5ccb      	ldrb	r3, [r1, r3]
 8002b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b12:	4a09      	ldr	r2, [pc, #36]	; (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 8002b14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b16:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <HAL_RCC_ClockConfig+0x1c8>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7fe f9f2 	bl	8000f04 <HAL_InitTick>

  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40023c00 	.word	0x40023c00
 8002b30:	40023800 	.word	0x40023800
 8002b34:	080030ec 	.word	0x080030ec
 8002b38:	20000000 	.word	0x20000000
 8002b3c:	20000004 	.word	0x20000004

08002b40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b44:	b094      	sub	sp, #80	; 0x50
 8002b46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	647b      	str	r3, [r7, #68]	; 0x44
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b50:	2300      	movs	r3, #0
 8002b52:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002b54:	2300      	movs	r3, #0
 8002b56:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b58:	4b79      	ldr	r3, [pc, #484]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f003 030c 	and.w	r3, r3, #12
 8002b60:	2b08      	cmp	r3, #8
 8002b62:	d00d      	beq.n	8002b80 <HAL_RCC_GetSysClockFreq+0x40>
 8002b64:	2b08      	cmp	r3, #8
 8002b66:	f200 80e1 	bhi.w	8002d2c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d002      	beq.n	8002b74 <HAL_RCC_GetSysClockFreq+0x34>
 8002b6e:	2b04      	cmp	r3, #4
 8002b70:	d003      	beq.n	8002b7a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b72:	e0db      	b.n	8002d2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b74:	4b73      	ldr	r3, [pc, #460]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b76:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002b78:	e0db      	b.n	8002d32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b7a:	4b73      	ldr	r3, [pc, #460]	; (8002d48 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b7e:	e0d8      	b.n	8002d32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b80:	4b6f      	ldr	r3, [pc, #444]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b88:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b8a:	4b6d      	ldr	r3, [pc, #436]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d063      	beq.n	8002c5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b96:	4b6a      	ldr	r3, [pc, #424]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	099b      	lsrs	r3, r3, #6
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ba0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ba8:	633b      	str	r3, [r7, #48]	; 0x30
 8002baa:	2300      	movs	r3, #0
 8002bac:	637b      	str	r3, [r7, #52]	; 0x34
 8002bae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002bb2:	4622      	mov	r2, r4
 8002bb4:	462b      	mov	r3, r5
 8002bb6:	f04f 0000 	mov.w	r0, #0
 8002bba:	f04f 0100 	mov.w	r1, #0
 8002bbe:	0159      	lsls	r1, r3, #5
 8002bc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bc4:	0150      	lsls	r0, r2, #5
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	4621      	mov	r1, r4
 8002bcc:	1a51      	subs	r1, r2, r1
 8002bce:	6139      	str	r1, [r7, #16]
 8002bd0:	4629      	mov	r1, r5
 8002bd2:	eb63 0301 	sbc.w	r3, r3, r1
 8002bd6:	617b      	str	r3, [r7, #20]
 8002bd8:	f04f 0200 	mov.w	r2, #0
 8002bdc:	f04f 0300 	mov.w	r3, #0
 8002be0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002be4:	4659      	mov	r1, fp
 8002be6:	018b      	lsls	r3, r1, #6
 8002be8:	4651      	mov	r1, sl
 8002bea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bee:	4651      	mov	r1, sl
 8002bf0:	018a      	lsls	r2, r1, #6
 8002bf2:	4651      	mov	r1, sl
 8002bf4:	ebb2 0801 	subs.w	r8, r2, r1
 8002bf8:	4659      	mov	r1, fp
 8002bfa:	eb63 0901 	sbc.w	r9, r3, r1
 8002bfe:	f04f 0200 	mov.w	r2, #0
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c12:	4690      	mov	r8, r2
 8002c14:	4699      	mov	r9, r3
 8002c16:	4623      	mov	r3, r4
 8002c18:	eb18 0303 	adds.w	r3, r8, r3
 8002c1c:	60bb      	str	r3, [r7, #8]
 8002c1e:	462b      	mov	r3, r5
 8002c20:	eb49 0303 	adc.w	r3, r9, r3
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	f04f 0200 	mov.w	r2, #0
 8002c2a:	f04f 0300 	mov.w	r3, #0
 8002c2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c32:	4629      	mov	r1, r5
 8002c34:	024b      	lsls	r3, r1, #9
 8002c36:	4621      	mov	r1, r4
 8002c38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c3c:	4621      	mov	r1, r4
 8002c3e:	024a      	lsls	r2, r1, #9
 8002c40:	4610      	mov	r0, r2
 8002c42:	4619      	mov	r1, r3
 8002c44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c46:	2200      	movs	r2, #0
 8002c48:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c50:	f7fd fac0 	bl	80001d4 <__aeabi_uldivmod>
 8002c54:	4602      	mov	r2, r0
 8002c56:	460b      	mov	r3, r1
 8002c58:	4613      	mov	r3, r2
 8002c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c5c:	e058      	b.n	8002d10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c5e:	4b38      	ldr	r3, [pc, #224]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	099b      	lsrs	r3, r3, #6
 8002c64:	2200      	movs	r2, #0
 8002c66:	4618      	mov	r0, r3
 8002c68:	4611      	mov	r1, r2
 8002c6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c6e:	623b      	str	r3, [r7, #32]
 8002c70:	2300      	movs	r3, #0
 8002c72:	627b      	str	r3, [r7, #36]	; 0x24
 8002c74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c78:	4642      	mov	r2, r8
 8002c7a:	464b      	mov	r3, r9
 8002c7c:	f04f 0000 	mov.w	r0, #0
 8002c80:	f04f 0100 	mov.w	r1, #0
 8002c84:	0159      	lsls	r1, r3, #5
 8002c86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c8a:	0150      	lsls	r0, r2, #5
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4641      	mov	r1, r8
 8002c92:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c96:	4649      	mov	r1, r9
 8002c98:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c9c:	f04f 0200 	mov.w	r2, #0
 8002ca0:	f04f 0300 	mov.w	r3, #0
 8002ca4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ca8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002cac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002cb0:	ebb2 040a 	subs.w	r4, r2, sl
 8002cb4:	eb63 050b 	sbc.w	r5, r3, fp
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	f04f 0300 	mov.w	r3, #0
 8002cc0:	00eb      	lsls	r3, r5, #3
 8002cc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cc6:	00e2      	lsls	r2, r4, #3
 8002cc8:	4614      	mov	r4, r2
 8002cca:	461d      	mov	r5, r3
 8002ccc:	4643      	mov	r3, r8
 8002cce:	18e3      	adds	r3, r4, r3
 8002cd0:	603b      	str	r3, [r7, #0]
 8002cd2:	464b      	mov	r3, r9
 8002cd4:	eb45 0303 	adc.w	r3, r5, r3
 8002cd8:	607b      	str	r3, [r7, #4]
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	f04f 0300 	mov.w	r3, #0
 8002ce2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ce6:	4629      	mov	r1, r5
 8002ce8:	028b      	lsls	r3, r1, #10
 8002cea:	4621      	mov	r1, r4
 8002cec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cf0:	4621      	mov	r1, r4
 8002cf2:	028a      	lsls	r2, r1, #10
 8002cf4:	4610      	mov	r0, r2
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	61bb      	str	r3, [r7, #24]
 8002cfe:	61fa      	str	r2, [r7, #28]
 8002d00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d04:	f7fd fa66 	bl	80001d4 <__aeabi_uldivmod>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d10:	4b0b      	ldr	r3, [pc, #44]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	0c1b      	lsrs	r3, r3, #16
 8002d16:	f003 0303 	and.w	r3, r3, #3
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002d20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d2a:	e002      	b.n	8002d32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d2c:	4b05      	ldr	r3, [pc, #20]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d2e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3750      	adds	r7, #80	; 0x50
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d3e:	bf00      	nop
 8002d40:	40023800 	.word	0x40023800
 8002d44:	00f42400 	.word	0x00f42400
 8002d48:	007a1200 	.word	0x007a1200

08002d4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d50:	4b03      	ldr	r3, [pc, #12]	; (8002d60 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d52:	681b      	ldr	r3, [r3, #0]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	20000000 	.word	0x20000000

08002d64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d68:	f7ff fff0 	bl	8002d4c <HAL_RCC_GetHCLKFreq>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	4b05      	ldr	r3, [pc, #20]	; (8002d84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	0a9b      	lsrs	r3, r3, #10
 8002d74:	f003 0307 	and.w	r3, r3, #7
 8002d78:	4903      	ldr	r1, [pc, #12]	; (8002d88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d7a:	5ccb      	ldrb	r3, [r1, r3]
 8002d7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40023800 	.word	0x40023800
 8002d88:	080030fc 	.word	0x080030fc

08002d8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d122      	bne.n	8002de8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d11b      	bne.n	8002de8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f06f 0202 	mvn.w	r2, #2
 8002db8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	f003 0303 	and.w	r3, r3, #3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 f8f8 	bl	8002fc4 <HAL_TIM_IC_CaptureCallback>
 8002dd4:	e005      	b.n	8002de2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f8ea 	bl	8002fb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 f8fb 	bl	8002fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	f003 0304 	and.w	r3, r3, #4
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	d122      	bne.n	8002e3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	2b04      	cmp	r3, #4
 8002e02:	d11b      	bne.n	8002e3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f06f 0204 	mvn.w	r2, #4
 8002e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2202      	movs	r2, #2
 8002e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 f8ce 	bl	8002fc4 <HAL_TIM_IC_CaptureCallback>
 8002e28:	e005      	b.n	8002e36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 f8c0 	bl	8002fb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 f8d1 	bl	8002fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	f003 0308 	and.w	r3, r3, #8
 8002e46:	2b08      	cmp	r3, #8
 8002e48:	d122      	bne.n	8002e90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	f003 0308 	and.w	r3, r3, #8
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	d11b      	bne.n	8002e90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f06f 0208 	mvn.w	r2, #8
 8002e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2204      	movs	r2, #4
 8002e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	f003 0303 	and.w	r3, r3, #3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f8a4 	bl	8002fc4 <HAL_TIM_IC_CaptureCallback>
 8002e7c:	e005      	b.n	8002e8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f896 	bl	8002fb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 f8a7 	bl	8002fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	f003 0310 	and.w	r3, r3, #16
 8002e9a:	2b10      	cmp	r3, #16
 8002e9c:	d122      	bne.n	8002ee4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	f003 0310 	and.w	r3, r3, #16
 8002ea8:	2b10      	cmp	r3, #16
 8002eaa:	d11b      	bne.n	8002ee4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f06f 0210 	mvn.w	r2, #16
 8002eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2208      	movs	r2, #8
 8002eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 f87a 	bl	8002fc4 <HAL_TIM_IC_CaptureCallback>
 8002ed0:	e005      	b.n	8002ede <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 f86c 	bl	8002fb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 f87d 	bl	8002fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d10e      	bne.n	8002f10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d107      	bne.n	8002f10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f06f 0201 	mvn.w	r2, #1
 8002f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f846 	bl	8002f9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f1a:	2b80      	cmp	r3, #128	; 0x80
 8002f1c:	d10e      	bne.n	8002f3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f28:	2b80      	cmp	r3, #128	; 0x80
 8002f2a:	d107      	bne.n	8002f3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f86c 	bl	8003014 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f46:	2b40      	cmp	r3, #64	; 0x40
 8002f48:	d10e      	bne.n	8002f68 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f54:	2b40      	cmp	r3, #64	; 0x40
 8002f56:	d107      	bne.n	8002f68 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f842 	bl	8002fec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	f003 0320 	and.w	r3, r3, #32
 8002f72:	2b20      	cmp	r3, #32
 8002f74:	d10e      	bne.n	8002f94 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	f003 0320 	and.w	r3, r3, #32
 8002f80:	2b20      	cmp	r3, #32
 8002f82:	d107      	bne.n	8002f94 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f06f 0220 	mvn.w	r2, #32
 8002f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 f836 	bl	8003000 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f94:	bf00      	nop
 8002f96:	3708      	adds	r7, #8
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <memset>:
 8003028:	4402      	add	r2, r0
 800302a:	4603      	mov	r3, r0
 800302c:	4293      	cmp	r3, r2
 800302e:	d100      	bne.n	8003032 <memset+0xa>
 8003030:	4770      	bx	lr
 8003032:	f803 1b01 	strb.w	r1, [r3], #1
 8003036:	e7f9      	b.n	800302c <memset+0x4>

08003038 <__libc_init_array>:
 8003038:	b570      	push	{r4, r5, r6, lr}
 800303a:	4d0d      	ldr	r5, [pc, #52]	; (8003070 <__libc_init_array+0x38>)
 800303c:	4c0d      	ldr	r4, [pc, #52]	; (8003074 <__libc_init_array+0x3c>)
 800303e:	1b64      	subs	r4, r4, r5
 8003040:	10a4      	asrs	r4, r4, #2
 8003042:	2600      	movs	r6, #0
 8003044:	42a6      	cmp	r6, r4
 8003046:	d109      	bne.n	800305c <__libc_init_array+0x24>
 8003048:	4d0b      	ldr	r5, [pc, #44]	; (8003078 <__libc_init_array+0x40>)
 800304a:	4c0c      	ldr	r4, [pc, #48]	; (800307c <__libc_init_array+0x44>)
 800304c:	f000 f818 	bl	8003080 <_init>
 8003050:	1b64      	subs	r4, r4, r5
 8003052:	10a4      	asrs	r4, r4, #2
 8003054:	2600      	movs	r6, #0
 8003056:	42a6      	cmp	r6, r4
 8003058:	d105      	bne.n	8003066 <__libc_init_array+0x2e>
 800305a:	bd70      	pop	{r4, r5, r6, pc}
 800305c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003060:	4798      	blx	r3
 8003062:	3601      	adds	r6, #1
 8003064:	e7ee      	b.n	8003044 <__libc_init_array+0xc>
 8003066:	f855 3b04 	ldr.w	r3, [r5], #4
 800306a:	4798      	blx	r3
 800306c:	3601      	adds	r6, #1
 800306e:	e7f2      	b.n	8003056 <__libc_init_array+0x1e>
 8003070:	0800310c 	.word	0x0800310c
 8003074:	0800310c 	.word	0x0800310c
 8003078:	0800310c 	.word	0x0800310c
 800307c:	08003110 	.word	0x08003110

08003080 <_init>:
 8003080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003082:	bf00      	nop
 8003084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003086:	bc08      	pop	{r3}
 8003088:	469e      	mov	lr, r3
 800308a:	4770      	bx	lr

0800308c <_fini>:
 800308c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800308e:	bf00      	nop
 8003090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003092:	bc08      	pop	{r3}
 8003094:	469e      	mov	lr, r3
 8003096:	4770      	bx	lr
