
Trabajo_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006740  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  080068e0  080068e0  000168e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069c8  080069c8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080069c8  080069c8  000169c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069d0  080069d0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069d0  080069d0  000169d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069d4  080069d4  000169d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080069d8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  20000070  08006a48  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  08006a48  00020328  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010533  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002633  00000000  00000000  00030616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa0  00000000  00000000  00032c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c46  00000000  00000000  00033bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001767a  00000000  00000000  00034836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013811  00000000  00000000  0004beb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090376  00000000  00000000  0005f6c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004b68  00000000  00000000  000efa38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000f45a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080068c8 	.word	0x080068c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080068c8 	.word	0x080068c8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b970 	b.w	8000f90 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	460d      	mov	r5, r1
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	460f      	mov	r7, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d14a      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4694      	mov	ip, r2
 8000cdc:	d965      	bls.n	8000daa <__udivmoddi4+0xe2>
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	b143      	cbz	r3, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ce8:	f1c3 0220 	rsb	r2, r3, #32
 8000cec:	409f      	lsls	r7, r3
 8000cee:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf2:	4317      	orrs	r7, r2
 8000cf4:	409c      	lsls	r4, r3
 8000cf6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cfa:	fa1f f58c 	uxth.w	r5, ip
 8000cfe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d02:	0c22      	lsrs	r2, r4, #16
 8000d04:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d08:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d0c:	fb01 f005 	mul.w	r0, r1, r5
 8000d10:	4290      	cmp	r0, r2
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x62>
 8000d14:	eb1c 0202 	adds.w	r2, ip, r2
 8000d18:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d1c:	f080 811c 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d20:	4290      	cmp	r0, r2
 8000d22:	f240 8119 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d26:	3902      	subs	r1, #2
 8000d28:	4462      	add	r2, ip
 8000d2a:	1a12      	subs	r2, r2, r0
 8000d2c:	b2a4      	uxth	r4, r4
 8000d2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d36:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3a:	fb00 f505 	mul.w	r5, r0, r5
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	d90a      	bls.n	8000d58 <__udivmoddi4+0x90>
 8000d42:	eb1c 0404 	adds.w	r4, ip, r4
 8000d46:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d4a:	f080 8107 	bcs.w	8000f5c <__udivmoddi4+0x294>
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	f240 8104 	bls.w	8000f5c <__udivmoddi4+0x294>
 8000d54:	4464      	add	r4, ip
 8000d56:	3802      	subs	r0, #2
 8000d58:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d5c:	1b64      	subs	r4, r4, r5
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11e      	cbz	r6, 8000d6a <__udivmoddi4+0xa2>
 8000d62:	40dc      	lsrs	r4, r3
 8000d64:	2300      	movs	r3, #0
 8000d66:	e9c6 4300 	strd	r4, r3, [r6]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0xbc>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80ed 	beq.w	8000f52 <__udivmoddi4+0x28a>
 8000d78:	2100      	movs	r1, #0
 8000d7a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d84:	fab3 f183 	clz	r1, r3
 8000d88:	2900      	cmp	r1, #0
 8000d8a:	d149      	bne.n	8000e20 <__udivmoddi4+0x158>
 8000d8c:	42ab      	cmp	r3, r5
 8000d8e:	d302      	bcc.n	8000d96 <__udivmoddi4+0xce>
 8000d90:	4282      	cmp	r2, r0
 8000d92:	f200 80f8 	bhi.w	8000f86 <__udivmoddi4+0x2be>
 8000d96:	1a84      	subs	r4, r0, r2
 8000d98:	eb65 0203 	sbc.w	r2, r5, r3
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	4617      	mov	r7, r2
 8000da0:	2e00      	cmp	r6, #0
 8000da2:	d0e2      	beq.n	8000d6a <__udivmoddi4+0xa2>
 8000da4:	e9c6 4700 	strd	r4, r7, [r6]
 8000da8:	e7df      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000daa:	b902      	cbnz	r2, 8000dae <__udivmoddi4+0xe6>
 8000dac:	deff      	udf	#255	; 0xff
 8000dae:	fab2 f382 	clz	r3, r2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000db8:	1a8a      	subs	r2, r1, r2
 8000dba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dbe:	fa1f fe8c 	uxth.w	lr, ip
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dc8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dcc:	0c22      	lsrs	r2, r4, #16
 8000dce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dd2:	fb0e f005 	mul.w	r0, lr, r5
 8000dd6:	4290      	cmp	r0, r2
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x124>
 8000dda:	eb1c 0202 	adds.w	r2, ip, r2
 8000dde:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4290      	cmp	r0, r2
 8000de6:	f200 80cb 	bhi.w	8000f80 <__udivmoddi4+0x2b8>
 8000dea:	4645      	mov	r5, r8
 8000dec:	1a12      	subs	r2, r2, r0
 8000dee:	b2a4      	uxth	r4, r4
 8000df0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000df4:	fb07 2210 	mls	r2, r7, r0, r2
 8000df8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000e00:	45a6      	cmp	lr, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x14e>
 8000e04:	eb1c 0404 	adds.w	r4, ip, r4
 8000e08:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x14c>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f200 80bb 	bhi.w	8000f8a <__udivmoddi4+0x2c2>
 8000e14:	4610      	mov	r0, r2
 8000e16:	eba4 040e 	sub.w	r4, r4, lr
 8000e1a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e1e:	e79f      	b.n	8000d60 <__udivmoddi4+0x98>
 8000e20:	f1c1 0720 	rsb	r7, r1, #32
 8000e24:	408b      	lsls	r3, r1
 8000e26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e2e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e32:	fa20 f307 	lsr.w	r3, r0, r7
 8000e36:	40fd      	lsrs	r5, r7
 8000e38:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e3c:	4323      	orrs	r3, r4
 8000e3e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	fb09 5518 	mls	r5, r9, r8, r5
 8000e4a:	0c1c      	lsrs	r4, r3, #16
 8000e4c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e50:	fb08 f50e 	mul.w	r5, r8, lr
 8000e54:	42a5      	cmp	r5, r4
 8000e56:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e68:	f080 8088 	bcs.w	8000f7c <__udivmoddi4+0x2b4>
 8000e6c:	42a5      	cmp	r5, r4
 8000e6e:	f240 8085 	bls.w	8000f7c <__udivmoddi4+0x2b4>
 8000e72:	f1a8 0802 	sub.w	r8, r8, #2
 8000e76:	4464      	add	r4, ip
 8000e78:	1b64      	subs	r4, r4, r5
 8000e7a:	b29d      	uxth	r5, r3
 8000e7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e80:	fb09 4413 	mls	r4, r9, r3, r4
 8000e84:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e88:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e98:	d26c      	bcs.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	d96a      	bls.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9e:	3b02      	subs	r3, #2
 8000ea0:	4464      	add	r4, ip
 8000ea2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ea6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	42ac      	cmp	r4, r5
 8000eb0:	46c8      	mov	r8, r9
 8000eb2:	46ae      	mov	lr, r5
 8000eb4:	d356      	bcc.n	8000f64 <__udivmoddi4+0x29c>
 8000eb6:	d053      	beq.n	8000f60 <__udivmoddi4+0x298>
 8000eb8:	b156      	cbz	r6, 8000ed0 <__udivmoddi4+0x208>
 8000eba:	ebb0 0208 	subs.w	r2, r0, r8
 8000ebe:	eb64 040e 	sbc.w	r4, r4, lr
 8000ec2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ec6:	40ca      	lsrs	r2, r1
 8000ec8:	40cc      	lsrs	r4, r1
 8000eca:	4317      	orrs	r7, r2
 8000ecc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed8:	f1c3 0120 	rsb	r1, r3, #32
 8000edc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ee0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ee4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ee8:	409d      	lsls	r5, r3
 8000eea:	432a      	orrs	r2, r5
 8000eec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef0:	fa1f fe8c 	uxth.w	lr, ip
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1510 	mls	r5, r7, r0, r1
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f02:	fb00 f50e 	mul.w	r5, r0, lr
 8000f06:	428d      	cmp	r5, r1
 8000f08:	fa04 f403 	lsl.w	r4, r4, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x258>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f16:	d22f      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f18:	428d      	cmp	r5, r1
 8000f1a:	d92d      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4461      	add	r1, ip
 8000f20:	1b49      	subs	r1, r1, r5
 8000f22:	b292      	uxth	r2, r2
 8000f24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f28:	fb07 1115 	mls	r1, r7, r5, r1
 8000f2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f30:	fb05 f10e 	mul.w	r1, r5, lr
 8000f34:	4291      	cmp	r1, r2
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x282>
 8000f38:	eb1c 0202 	adds.w	r2, ip, r2
 8000f3c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f40:	d216      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000f42:	4291      	cmp	r1, r2
 8000f44:	d914      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000f46:	3d02      	subs	r5, #2
 8000f48:	4462      	add	r2, ip
 8000f4a:	1a52      	subs	r2, r2, r1
 8000f4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f50:	e738      	b.n	8000dc4 <__udivmoddi4+0xfc>
 8000f52:	4631      	mov	r1, r6
 8000f54:	4630      	mov	r0, r6
 8000f56:	e708      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000f58:	4639      	mov	r1, r7
 8000f5a:	e6e6      	b.n	8000d2a <__udivmoddi4+0x62>
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	e6fb      	b.n	8000d58 <__udivmoddi4+0x90>
 8000f60:	4548      	cmp	r0, r9
 8000f62:	d2a9      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f64:	ebb9 0802 	subs.w	r8, r9, r2
 8000f68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	e7a3      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f70:	4645      	mov	r5, r8
 8000f72:	e7ea      	b.n	8000f4a <__udivmoddi4+0x282>
 8000f74:	462b      	mov	r3, r5
 8000f76:	e794      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f78:	4640      	mov	r0, r8
 8000f7a:	e7d1      	b.n	8000f20 <__udivmoddi4+0x258>
 8000f7c:	46d0      	mov	r8, sl
 8000f7e:	e77b      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f80:	3d02      	subs	r5, #2
 8000f82:	4462      	add	r2, ip
 8000f84:	e732      	b.n	8000dec <__udivmoddi4+0x124>
 8000f86:	4608      	mov	r0, r1
 8000f88:	e70a      	b.n	8000da0 <__udivmoddi4+0xd8>
 8000f8a:	4464      	add	r4, ip
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	e742      	b.n	8000e16 <__udivmoddi4+0x14e>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <HAL_TIM_PeriodElapsedCallback>:
//static void MX_USART2_UART_Init(void);
static void MX_I2C1_Init(void);
static void MX_TIM10_Init(void);
/* USER CODE BEGIN PFP */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]

	static uint16_t count = 0;
	if(count==10){
 8000f9c:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000f9e:	881b      	ldrh	r3, [r3, #0]
 8000fa0:	2b0a      	cmp	r3, #10
 8000fa2:	d106      	bne.n	8000fb2 <HAL_TIM_PeriodElapsedCallback+0x1e>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000fa4:	2120      	movs	r1, #32
 8000fa6:	4809      	ldr	r0, [pc, #36]	; (8000fcc <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000fa8:	f001 fce7 	bl	800297a <HAL_GPIO_TogglePin>
		count = 0;
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	801a      	strh	r2, [r3, #0]
	}
	count++;
 8000fb2:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000fbc:	801a      	strh	r2, [r3, #0]

}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000134 	.word	0x20000134
 8000fcc:	40020000 	.word	0x40020000

08000fd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd4:	f001 f974 	bl	80022c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd8:	f000 f860 	bl	800109c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fdc:	f000 f91c 	bl	8001218 <MX_GPIO_Init>
  //MX_USART2_UART_Init();
  MX_I2C1_Init();
 8000fe0:	f000 f8c8 	bl	8001174 <MX_I2C1_Init>
  MX_TIM10_Init();
 8000fe4:	f000 f8f4 	bl	80011d0 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay (2000);
 8000fe8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000fec:	f001 f9da 	bl	80023a4 <HAL_Delay>

  //Inicio y lectura de calibración de sensor
  BMP180_Start();
 8000ff0:	f001 f8d4 	bl	800219c <BMP180_Start>

  //Inicialización de antirebote y carga de retardo no bloqueante en API_debounce.h
  debounceFSM_init();
 8000ff4:	f000 fb0a 	bl	800160c <debounceFSM_init>

  //Inicialización de fsm de pantalla
  void screenFSM_init(void);

  //Inicialización de uart2 implementada en API_uart.c Si hay error manda a Error_Handler()
   if(!uartInit()){
 8000ff8:	f000 fc3c 	bl	8001874 <uartInit>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	f083 0301 	eor.w	r3, r3, #1
 8001002:	b2db      	uxtb	r3, r3
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <main+0x3c>
 	  Error_Handler();
 8001008:	f000 f974 	bl	80012f4 <Error_Handler>
   //Mensaje de Bienvenida PASAR A LA API
   //el or se hace según la posición de memoria de inicio
   //depende de la tabla de memoria que es distinta en 16x4 y 20x4
   //ver https://controllerstech.com/lcd-20x4-using-i2c-with-stm32/

   lcd_clear();
 800100c:	f001 f92c 	bl	8002268 <lcd_clear>

   lcd_send_cmd (0x80|0x00);
 8001010:	2080      	movs	r0, #128	; 0x80
 8001012:	f001 f8c9 	bl	80021a8 <lcd_send_cmd>
   lcd_send_string("HELLO WORLD");
 8001016:	481a      	ldr	r0, [pc, #104]	; (8001080 <main+0xb0>)
 8001018:	f001 f93d 	bl	8002296 <lcd_send_string>

   lcd_send_cmd (0x80|0x40);
 800101c:	20c0      	movs	r0, #192	; 0xc0
 800101e:	f001 f8c3 	bl	80021a8 <lcd_send_cmd>
   lcd_send_string("LCD 16x4 DEMO");
 8001022:	4818      	ldr	r0, [pc, #96]	; (8001084 <main+0xb4>)
 8001024:	f001 f937 	bl	8002296 <lcd_send_string>

   lcd_send_cmd (0x80|0x10);
 8001028:	2090      	movs	r0, #144	; 0x90
 800102a:	f001 f8bd 	bl	80021a8 <lcd_send_cmd>
   lcd_send_string("BY");
 800102e:	4816      	ldr	r0, [pc, #88]	; (8001088 <main+0xb8>)
 8001030:	f001 f931 	bl	8002296 <lcd_send_string>

   lcd_send_cmd (0x80|0x50);
 8001034:	20d0      	movs	r0, #208	; 0xd0
 8001036:	f001 f8b7 	bl	80021a8 <lcd_send_cmd>
   lcd_send_string("Gustavo");
 800103a:	4814      	ldr	r0, [pc, #80]	; (800108c <main+0xbc>)
 800103c:	f001 f92b 	bl	8002296 <lcd_send_string>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  Temperature = BMP180_GetTemp();
 8001040:	f000 fd36 	bl	8001ab0 <BMP180_GetTemp>
 8001044:	eef0 7a40 	vmov.f32	s15, s0
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <main+0xc0>)
 800104a:	edc3 7a00 	vstr	s15, [r3]

	  Pressure = BMP180_GetPress (0);
 800104e:	2000      	movs	r0, #0
 8001050:	f000 fe2a 	bl	8001ca8 <BMP180_GetPress>
 8001054:	eef0 7a40 	vmov.f32	s15, s0
 8001058:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <main+0xc4>)
 800105a:	edc3 7a00 	vstr	s15, [r3]

	  Altitude = BMP180_GetAlt(0);
 800105e:	2000      	movs	r0, #0
 8001060:	f001 f852 	bl	8002108 <BMP180_GetAlt>
 8001064:	eef0 7a40 	vmov.f32	s15, s0
 8001068:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <main+0xc8>)
 800106a:	edc3 7a00 	vstr	s15, [r3]

	  HAL_Delay (2000);
 800106e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001072:	f001 f997 	bl	80023a4 <HAL_Delay>

	  //Llamado a función de actualización de antirebote de pulsador
	  debounceFSM_update();
 8001076:	f000 fad9 	bl	800162c <debounceFSM_update>

	  //Llamado a la función de actualización de screen managment

	  screenFSM_update();
 800107a:	f000 fbc5 	bl	8001808 <screenFSM_update>
	  Temperature = BMP180_GetTemp();
 800107e:	e7df      	b.n	8001040 <main+0x70>
 8001080:	080068e0 	.word	0x080068e0
 8001084:	080068ec 	.word	0x080068ec
 8001088:	080068fc 	.word	0x080068fc
 800108c:	08006900 	.word	0x08006900
 8001090:	20000128 	.word	0x20000128
 8001094:	2000012c 	.word	0x2000012c
 8001098:	20000130 	.word	0x20000130

0800109c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b094      	sub	sp, #80	; 0x50
 80010a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a2:	f107 0320 	add.w	r3, r7, #32
 80010a6:	2230      	movs	r2, #48	; 0x30
 80010a8:	2100      	movs	r1, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f004 f84e 	bl	800514c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b0:	f107 030c 	add.w	r3, r7, #12
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c0:	2300      	movs	r3, #0
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	4b29      	ldr	r3, [pc, #164]	; (800116c <SystemClock_Config+0xd0>)
 80010c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c8:	4a28      	ldr	r2, [pc, #160]	; (800116c <SystemClock_Config+0xd0>)
 80010ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ce:	6413      	str	r3, [r2, #64]	; 0x40
 80010d0:	4b26      	ldr	r3, [pc, #152]	; (800116c <SystemClock_Config+0xd0>)
 80010d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80010dc:	2300      	movs	r3, #0
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	4b23      	ldr	r3, [pc, #140]	; (8001170 <SystemClock_Config+0xd4>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010e8:	4a21      	ldr	r2, [pc, #132]	; (8001170 <SystemClock_Config+0xd4>)
 80010ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010ee:	6013      	str	r3, [r2, #0]
 80010f0:	4b1f      	ldr	r3, [pc, #124]	; (8001170 <SystemClock_Config+0xd4>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010fc:	2302      	movs	r3, #2
 80010fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001100:	2301      	movs	r3, #1
 8001102:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001104:	2310      	movs	r3, #16
 8001106:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001108:	2302      	movs	r3, #2
 800110a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800110c:	2300      	movs	r3, #0
 800110e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001110:	2310      	movs	r3, #16
 8001112:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001114:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001118:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800111a:	2304      	movs	r3, #4
 800111c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800111e:	2307      	movs	r3, #7
 8001120:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001122:	f107 0320 	add.w	r3, r7, #32
 8001126:	4618      	mov	r0, r3
 8001128:	f002 fd82 	bl	8003c30 <HAL_RCC_OscConfig>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001132:	f000 f8df 	bl	80012f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001136:	230f      	movs	r3, #15
 8001138:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800113a:	2302      	movs	r3, #2
 800113c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001142:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001146:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001148:	2300      	movs	r3, #0
 800114a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800114c:	f107 030c 	add.w	r3, r7, #12
 8001150:	2102      	movs	r1, #2
 8001152:	4618      	mov	r0, r3
 8001154:	f002 ffe4 	bl	8004120 <HAL_RCC_ClockConfig>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800115e:	f000 f8c9 	bl	80012f4 <Error_Handler>
  }
}
 8001162:	bf00      	nop
 8001164:	3750      	adds	r7, #80	; 0x50
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40023800 	.word	0x40023800
 8001170:	40007000 	.word	0x40007000

08001174 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001178:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <MX_I2C1_Init+0x50>)
 800117a:	4a13      	ldr	r2, [pc, #76]	; (80011c8 <MX_I2C1_Init+0x54>)
 800117c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800117e:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <MX_I2C1_Init+0x50>)
 8001180:	4a12      	ldr	r2, [pc, #72]	; (80011cc <MX_I2C1_Init+0x58>)
 8001182:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001184:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <MX_I2C1_Init+0x50>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800118a:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <MX_I2C1_Init+0x50>)
 800118c:	2200      	movs	r2, #0
 800118e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <MX_I2C1_Init+0x50>)
 8001192:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001196:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001198:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <MX_I2C1_Init+0x50>)
 800119a:	2200      	movs	r2, #0
 800119c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800119e:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <MX_I2C1_Init+0x50>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011a4:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <MX_I2C1_Init+0x50>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <MX_I2C1_Init+0x50>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011b0:	4804      	ldr	r0, [pc, #16]	; (80011c4 <MX_I2C1_Init+0x50>)
 80011b2:	f001 fbfd 	bl	80029b0 <HAL_I2C_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011bc:	f000 f89a 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	2000008c 	.word	0x2000008c
 80011c8:	40005400 	.word	0x40005400
 80011cc:	000186a0 	.word	0x000186a0

080011d0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80011d4:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <MX_TIM10_Init+0x40>)
 80011d6:	4a0f      	ldr	r2, [pc, #60]	; (8001214 <MX_TIM10_Init+0x44>)
 80011d8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9999;
 80011da:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <MX_TIM10_Init+0x40>)
 80011dc:	f242 720f 	movw	r2, #9999	; 0x270f
 80011e0:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e2:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <MX_TIM10_Init+0x40>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8399;
 80011e8:	4b09      	ldr	r3, [pc, #36]	; (8001210 <MX_TIM10_Init+0x40>)
 80011ea:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80011ee:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f0:	4b07      	ldr	r3, [pc, #28]	; (8001210 <MX_TIM10_Init+0x40>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <MX_TIM10_Init+0x40>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80011fc:	4804      	ldr	r0, [pc, #16]	; (8001210 <MX_TIM10_Init+0x40>)
 80011fe:	f003 f9af 	bl	8004560 <HAL_TIM_Base_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001208:	f000 f874 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}
 8001210:	200000e0 	.word	0x200000e0
 8001214:	40014400 	.word	0x40014400

08001218 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08a      	sub	sp, #40	; 0x28
 800121c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121e:	f107 0314 	add.w	r3, r7, #20
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
 800122c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
 8001232:	4b2d      	ldr	r3, [pc, #180]	; (80012e8 <MX_GPIO_Init+0xd0>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a2c      	ldr	r2, [pc, #176]	; (80012e8 <MX_GPIO_Init+0xd0>)
 8001238:	f043 0304 	orr.w	r3, r3, #4
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b2a      	ldr	r3, [pc, #168]	; (80012e8 <MX_GPIO_Init+0xd0>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0304 	and.w	r3, r3, #4
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	4b26      	ldr	r3, [pc, #152]	; (80012e8 <MX_GPIO_Init+0xd0>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a25      	ldr	r2, [pc, #148]	; (80012e8 <MX_GPIO_Init+0xd0>)
 8001254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b23      	ldr	r3, [pc, #140]	; (80012e8 <MX_GPIO_Init+0xd0>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	4b1f      	ldr	r3, [pc, #124]	; (80012e8 <MX_GPIO_Init+0xd0>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a1e      	ldr	r2, [pc, #120]	; (80012e8 <MX_GPIO_Init+0xd0>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b1c      	ldr	r3, [pc, #112]	; (80012e8 <MX_GPIO_Init+0xd0>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	607b      	str	r3, [r7, #4]
 8001286:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <MX_GPIO_Init+0xd0>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	4a17      	ldr	r2, [pc, #92]	; (80012e8 <MX_GPIO_Init+0xd0>)
 800128c:	f043 0302 	orr.w	r3, r3, #2
 8001290:	6313      	str	r3, [r2, #48]	; 0x30
 8001292:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <MX_GPIO_Init+0xd0>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800129e:	2200      	movs	r2, #0
 80012a0:	21e0      	movs	r1, #224	; 0xe0
 80012a2:	4812      	ldr	r0, [pc, #72]	; (80012ec <MX_GPIO_Init+0xd4>)
 80012a4:	f001 fb50 	bl	8002948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012ae:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	4619      	mov	r1, r3
 80012be:	480c      	ldr	r0, [pc, #48]	; (80012f0 <MX_GPIO_Init+0xd8>)
 80012c0:	f001 f9a6 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA7 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7;
 80012c4:	23e0      	movs	r3, #224	; 0xe0
 80012c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c8:	2301      	movs	r3, #1
 80012ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d0:	2300      	movs	r3, #0
 80012d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	4619      	mov	r1, r3
 80012da:	4804      	ldr	r0, [pc, #16]	; (80012ec <MX_GPIO_Init+0xd4>)
 80012dc:	f001 f998 	bl	8002610 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012e0:	bf00      	nop
 80012e2:	3728      	adds	r7, #40	; 0x28
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40020000 	.word	0x40020000
 80012f0:	40020800 	.word	0x40020800

080012f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f8:	b672      	cpsid	i
}
 80012fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012fc:	e7fe      	b.n	80012fc <Error_Handler+0x8>
	...

08001300 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	4b10      	ldr	r3, [pc, #64]	; (800134c <HAL_MspInit+0x4c>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130e:	4a0f      	ldr	r2, [pc, #60]	; (800134c <HAL_MspInit+0x4c>)
 8001310:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001314:	6453      	str	r3, [r2, #68]	; 0x44
 8001316:	4b0d      	ldr	r3, [pc, #52]	; (800134c <HAL_MspInit+0x4c>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	603b      	str	r3, [r7, #0]
 8001326:	4b09      	ldr	r3, [pc, #36]	; (800134c <HAL_MspInit+0x4c>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	4a08      	ldr	r2, [pc, #32]	; (800134c <HAL_MspInit+0x4c>)
 800132c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001330:	6413      	str	r3, [r2, #64]	; 0x40
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <HAL_MspInit+0x4c>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800133e:	2007      	movs	r0, #7
 8001340:	f001 f924 	bl	800258c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001344:	bf00      	nop
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40023800 	.word	0x40023800

08001350 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08a      	sub	sp, #40	; 0x28
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a19      	ldr	r2, [pc, #100]	; (80013d4 <HAL_I2C_MspInit+0x84>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d12b      	bne.n	80013ca <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <HAL_I2C_MspInit+0x88>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a17      	ldr	r2, [pc, #92]	; (80013d8 <HAL_I2C_MspInit+0x88>)
 800137c:	f043 0302 	orr.w	r3, r3, #2
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <HAL_I2C_MspInit+0x88>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	613b      	str	r3, [r7, #16]
 800138c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800138e:	23c0      	movs	r3, #192	; 0xc0
 8001390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001392:	2312      	movs	r3, #18
 8001394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139a:	2303      	movs	r3, #3
 800139c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800139e:	2304      	movs	r3, #4
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	4619      	mov	r1, r3
 80013a8:	480c      	ldr	r0, [pc, #48]	; (80013dc <HAL_I2C_MspInit+0x8c>)
 80013aa:	f001 f931 	bl	8002610 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <HAL_I2C_MspInit+0x88>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	4a08      	ldr	r2, [pc, #32]	; (80013d8 <HAL_I2C_MspInit+0x88>)
 80013b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013bc:	6413      	str	r3, [r2, #64]	; 0x40
 80013be:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <HAL_I2C_MspInit+0x88>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013ca:	bf00      	nop
 80013cc:	3728      	adds	r7, #40	; 0x28
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40005400 	.word	0x40005400
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40020400 	.word	0x40020400

080013e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a0e      	ldr	r2, [pc, #56]	; (8001428 <HAL_TIM_Base_MspInit+0x48>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d115      	bne.n	800141e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	4b0d      	ldr	r3, [pc, #52]	; (800142c <HAL_TIM_Base_MspInit+0x4c>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fa:	4a0c      	ldr	r2, [pc, #48]	; (800142c <HAL_TIM_Base_MspInit+0x4c>)
 80013fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001400:	6453      	str	r3, [r2, #68]	; 0x44
 8001402:	4b0a      	ldr	r3, [pc, #40]	; (800142c <HAL_TIM_Base_MspInit+0x4c>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800140e:	2200      	movs	r2, #0
 8001410:	2100      	movs	r1, #0
 8001412:	2019      	movs	r0, #25
 8001414:	f001 f8c5 	bl	80025a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001418:	2019      	movs	r0, #25
 800141a:	f001 f8de 	bl	80025da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800141e:	bf00      	nop
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40014400 	.word	0x40014400
 800142c:	40023800 	.word	0x40023800

08001430 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	; 0x28
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a19      	ldr	r2, [pc, #100]	; (80014b4 <HAL_UART_MspInit+0x84>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d12b      	bne.n	80014aa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]
 8001456:	4b18      	ldr	r3, [pc, #96]	; (80014b8 <HAL_UART_MspInit+0x88>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	4a17      	ldr	r2, [pc, #92]	; (80014b8 <HAL_UART_MspInit+0x88>)
 800145c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001460:	6413      	str	r3, [r2, #64]	; 0x40
 8001462:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <HAL_UART_MspInit+0x88>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <HAL_UART_MspInit+0x88>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a10      	ldr	r2, [pc, #64]	; (80014b8 <HAL_UART_MspInit+0x88>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <HAL_UART_MspInit+0x88>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800148a:	230c      	movs	r3, #12
 800148c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148e:	2302      	movs	r3, #2
 8001490:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001496:	2300      	movs	r3, #0
 8001498:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800149a:	2307      	movs	r3, #7
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	4619      	mov	r1, r3
 80014a4:	4805      	ldr	r0, [pc, #20]	; (80014bc <HAL_UART_MspInit+0x8c>)
 80014a6:	f001 f8b3 	bl	8002610 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014aa:	bf00      	nop
 80014ac:	3728      	adds	r7, #40	; 0x28
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40004400 	.word	0x40004400
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40020000 	.word	0x40020000

080014c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <NMI_Handler+0x4>

080014c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ca:	e7fe      	b.n	80014ca <HardFault_Handler+0x4>

080014cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <MemManage_Handler+0x4>

080014d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014d6:	e7fe      	b.n	80014d6 <BusFault_Handler+0x4>

080014d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014dc:	e7fe      	b.n	80014dc <UsageFault_Handler+0x4>

080014de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800150c:	f000 ff2a 	bl	8002364 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}

08001514 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001518:	4802      	ldr	r0, [pc, #8]	; (8001524 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800151a:	f003 f870 	bl	80045fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200000e0 	.word	0x200000e0

08001528 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001530:	4a14      	ldr	r2, [pc, #80]	; (8001584 <_sbrk+0x5c>)
 8001532:	4b15      	ldr	r3, [pc, #84]	; (8001588 <_sbrk+0x60>)
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800153c:	4b13      	ldr	r3, [pc, #76]	; (800158c <_sbrk+0x64>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d102      	bne.n	800154a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001544:	4b11      	ldr	r3, [pc, #68]	; (800158c <_sbrk+0x64>)
 8001546:	4a12      	ldr	r2, [pc, #72]	; (8001590 <_sbrk+0x68>)
 8001548:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800154a:	4b10      	ldr	r3, [pc, #64]	; (800158c <_sbrk+0x64>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4413      	add	r3, r2
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	429a      	cmp	r2, r3
 8001556:	d207      	bcs.n	8001568 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001558:	f003 fe00 	bl	800515c <__errno>
 800155c:	4603      	mov	r3, r0
 800155e:	220c      	movs	r2, #12
 8001560:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001562:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001566:	e009      	b.n	800157c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001568:	4b08      	ldr	r3, [pc, #32]	; (800158c <_sbrk+0x64>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800156e:	4b07      	ldr	r3, [pc, #28]	; (800158c <_sbrk+0x64>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4413      	add	r3, r2
 8001576:	4a05      	ldr	r2, [pc, #20]	; (800158c <_sbrk+0x64>)
 8001578:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800157a:	68fb      	ldr	r3, [r7, #12]
}
 800157c:	4618      	mov	r0, r3
 800157e:	3718      	adds	r7, #24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20018000 	.word	0x20018000
 8001588:	00000400 	.word	0x00000400
 800158c:	20000138 	.word	0x20000138
 8001590:	20000328 	.word	0x20000328

08001594 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <SystemInit+0x20>)
 800159a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800159e:	4a05      	ldr	r2, [pc, #20]	; (80015b4 <SystemInit+0x20>)
 80015a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015bc:	480d      	ldr	r0, [pc, #52]	; (80015f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015be:	490e      	ldr	r1, [pc, #56]	; (80015f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015c0:	4a0e      	ldr	r2, [pc, #56]	; (80015fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015c4:	e002      	b.n	80015cc <LoopCopyDataInit>

080015c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ca:	3304      	adds	r3, #4

080015cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d0:	d3f9      	bcc.n	80015c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015d2:	4a0b      	ldr	r2, [pc, #44]	; (8001600 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015d4:	4c0b      	ldr	r4, [pc, #44]	; (8001604 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015d8:	e001      	b.n	80015de <LoopFillZerobss>

080015da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015dc:	3204      	adds	r2, #4

080015de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e0:	d3fb      	bcc.n	80015da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015e2:	f7ff ffd7 	bl	8001594 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015e6:	f003 fdbf 	bl	8005168 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ea:	f7ff fcf1 	bl	8000fd0 <main>
  bx  lr    
 80015ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015f0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80015f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015f8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80015fc:	080069d8 	.word	0x080069d8
  ldr r2, =_sbss
 8001600:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001604:	20000328 	.word	0x20000328

08001608 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001608:	e7fe      	b.n	8001608 <ADC_IRQHandler>
	...

0800160c <debounceFSM_init>:
//Definición de variable interna del módulo flag para detección de flanco ascendente
static bool_t keyReleased = 0;



void debounceFSM_init(void){
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0

	//inicio de la máquina de estados
	debounceState = BUTTON_UP;
 8001610:	4b04      	ldr	r3, [pc, #16]	; (8001624 <debounceFSM_init+0x18>)
 8001612:	2200      	movs	r2, #0
 8001614:	701a      	strb	r2, [r3, #0]
	//se inicia también el delay no retentivo
	delayInit(&delay02,DEBOUNCED_DELAY);
 8001616:	2128      	movs	r1, #40	; 0x28
 8001618:	4803      	ldr	r0, [pc, #12]	; (8001628 <debounceFSM_init+0x1c>)
 800161a:	f000 f8b7 	bl	800178c <delayInit>

}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	2000013c 	.word	0x2000013c
 8001628:	20000140 	.word	0x20000140

0800162c <debounceFSM_update>:


void debounceFSM_update(void){
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0


		switch(debounceState){
 8001630:	4b39      	ldr	r3, [pc, #228]	; (8001718 <debounceFSM_update+0xec>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b03      	cmp	r3, #3
 8001636:	d861      	bhi.n	80016fc <debounceFSM_update+0xd0>
 8001638:	a201      	add	r2, pc, #4	; (adr r2, 8001640 <debounceFSM_update+0x14>)
 800163a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800163e:	bf00      	nop
 8001640:	08001651 	.word	0x08001651
 8001644:	08001669 	.word	0x08001669
 8001648:	080016a7 	.word	0x080016a7
 800164c:	080016bf 	.word	0x080016bf

		case BUTTON_UP:

			if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)==0){
 8001650:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001654:	4831      	ldr	r0, [pc, #196]	; (800171c <debounceFSM_update+0xf0>)
 8001656:	f001 f95f 	bl	8002918 <HAL_GPIO_ReadPin>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d151      	bne.n	8001704 <debounceFSM_update+0xd8>

				debounceState = BUTTON_FALLING;
 8001660:	4b2d      	ldr	r3, [pc, #180]	; (8001718 <debounceFSM_update+0xec>)
 8001662:	2201      	movs	r2, #1
 8001664:	701a      	strb	r2, [r3, #0]
			}

		break;
 8001666:	e04d      	b.n	8001704 <debounceFSM_update+0xd8>

		case BUTTON_FALLING:

			if(delayRead(&delay02)==1){
 8001668:	482d      	ldr	r0, [pc, #180]	; (8001720 <debounceFSM_update+0xf4>)
 800166a:	f000 f8a3 	bl	80017b4 <delayRead>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d049      	beq.n	8001708 <debounceFSM_update+0xdc>
				if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)==0){
 8001674:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001678:	4828      	ldr	r0, [pc, #160]	; (800171c <debounceFSM_update+0xf0>)
 800167a:	f001 f94d 	bl	8002918 <HAL_GPIO_ReadPin>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d104      	bne.n	800168e <debounceFSM_update+0x62>
					debounceState = BUTTON_DOWN;
 8001684:	4b24      	ldr	r3, [pc, #144]	; (8001718 <debounceFSM_update+0xec>)
 8001686:	2202      	movs	r2, #2
 8001688:	701a      	strb	r2, [r3, #0]
					buttonPressed();
 800168a:	f000 f84b 	bl	8001724 <buttonPressed>
				}
				if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)==1){
 800168e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001692:	4822      	ldr	r0, [pc, #136]	; (800171c <debounceFSM_update+0xf0>)
 8001694:	f001 f940 	bl	8002918 <HAL_GPIO_ReadPin>
 8001698:	4603      	mov	r3, r0
 800169a:	2b01      	cmp	r3, #1
 800169c:	d134      	bne.n	8001708 <debounceFSM_update+0xdc>
					debounceState = BUTTON_UP;
 800169e:	4b1e      	ldr	r3, [pc, #120]	; (8001718 <debounceFSM_update+0xec>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	701a      	strb	r2, [r3, #0]
				}

			}

		break;
 80016a4:	e030      	b.n	8001708 <debounceFSM_update+0xdc>

		case BUTTON_DOWN:

			if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)==1){
 80016a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016aa:	481c      	ldr	r0, [pc, #112]	; (800171c <debounceFSM_update+0xf0>)
 80016ac:	f001 f934 	bl	8002918 <HAL_GPIO_ReadPin>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d12a      	bne.n	800170c <debounceFSM_update+0xe0>

				debounceState = BUTTON_RAISING;
 80016b6:	4b18      	ldr	r3, [pc, #96]	; (8001718 <debounceFSM_update+0xec>)
 80016b8:	2203      	movs	r2, #3
 80016ba:	701a      	strb	r2, [r3, #0]
			}

		break;
 80016bc:	e026      	b.n	800170c <debounceFSM_update+0xe0>

		case BUTTON_RAISING:

			if(delayRead(&delay02)==1){
 80016be:	4818      	ldr	r0, [pc, #96]	; (8001720 <debounceFSM_update+0xf4>)
 80016c0:	f000 f878 	bl	80017b4 <delayRead>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d022      	beq.n	8001710 <debounceFSM_update+0xe4>
				if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)==1){
 80016ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016ce:	4813      	ldr	r0, [pc, #76]	; (800171c <debounceFSM_update+0xf0>)
 80016d0:	f001 f922 	bl	8002918 <HAL_GPIO_ReadPin>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d104      	bne.n	80016e4 <debounceFSM_update+0xb8>
					debounceState = BUTTON_UP;
 80016da:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <debounceFSM_update+0xec>)
 80016dc:	2200      	movs	r2, #0
 80016de:	701a      	strb	r2, [r3, #0]
					buttonReleased();
 80016e0:	f000 f82c 	bl	800173c <buttonReleased>
				}
				if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)==0){
 80016e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016e8:	480c      	ldr	r0, [pc, #48]	; (800171c <debounceFSM_update+0xf0>)
 80016ea:	f001 f915 	bl	8002918 <HAL_GPIO_ReadPin>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d10d      	bne.n	8001710 <debounceFSM_update+0xe4>
					debounceState = BUTTON_DOWN;
 80016f4:	4b08      	ldr	r3, [pc, #32]	; (8001718 <debounceFSM_update+0xec>)
 80016f6:	2202      	movs	r2, #2
 80016f8:	701a      	strb	r2, [r3, #0]
				}

			}

		break;
 80016fa:	e009      	b.n	8001710 <debounceFSM_update+0xe4>

		default:
		debounceState = BUTTON_UP;
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <debounceFSM_update+0xec>)
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]

		}


}
 8001702:	e006      	b.n	8001712 <debounceFSM_update+0xe6>
		break;
 8001704:	bf00      	nop
 8001706:	e004      	b.n	8001712 <debounceFSM_update+0xe6>
		break;
 8001708:	bf00      	nop
 800170a:	e002      	b.n	8001712 <debounceFSM_update+0xe6>
		break;
 800170c:	bf00      	nop
 800170e:	e000      	b.n	8001712 <debounceFSM_update+0xe6>
		break;
 8001710:	bf00      	nop
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	2000013c 	.word	0x2000013c
 800171c:	40020800 	.word	0x40020800
 8001720:	20000140 	.word	0x20000140

08001724 <buttonPressed>:
void buttonPressed(void){
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, true);  //utilizado en parte uno de la práctica
	//seteo de flag para detección de flanco
	keyPressed = 1;
 8001728:	4b03      	ldr	r3, [pc, #12]	; (8001738 <buttonPressed+0x14>)
 800172a:	2201      	movs	r2, #1
 800172c:	701a      	strb	r2, [r3, #0]

}
 800172e:	bf00      	nop
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	2000014c 	.word	0x2000014c

0800173c <buttonReleased>:

void buttonReleased(void){
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, false);	//utilizado en parte uno de la práctica
	keyReleased = 1;
 8001740:	4b03      	ldr	r3, [pc, #12]	; (8001750 <buttonReleased+0x14>)
 8001742:	2201      	movs	r2, #1
 8001744:	701a      	strb	r2, [r3, #0]

}
 8001746:	bf00      	nop
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	2000014d 	.word	0x2000014d

08001754 <readKey>:

bool_t readKey(void){
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0

	if(keyPressed){
 8001758:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <readKey+0x34>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d004      	beq.n	800176a <readKey+0x16>
		keyPressed = 0;
 8001760:	4b09      	ldr	r3, [pc, #36]	; (8001788 <readKey+0x34>)
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]
		return 1;
 8001766:	2301      	movs	r3, #1
 8001768:	e009      	b.n	800177e <readKey+0x2a>
	}
	if(keyPressed==0){
 800176a:	4b07      	ldr	r3, [pc, #28]	; (8001788 <readKey+0x34>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	f083 0301 	eor.w	r3, r3, #1
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <readKey+0x28>
		return 0;
 8001778:	2300      	movs	r3, #0
 800177a:	e000      	b.n	800177e <readKey+0x2a>
	}
	return 0;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	2000014c 	.word	0x2000014c

0800178c <delayInit>:
#include "API_delay.h"
#include "stm32f4xx_hal.h"


void delayInit( delay_t * delay, tick_t duration ){
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]

		delay->duration = duration;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	605a      	str	r2, [r3, #4]
		delay->running = false;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	721a      	strb	r2, [r3, #8]
		delay->startTime = 0;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]

}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <delayRead>:

bool_t delayRead( delay_t * delay ){
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]

		if(delay->running == false){
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	7a1b      	ldrb	r3, [r3, #8]
 80017c0:	f083 0301 	eor.w	r3, r3, #1
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d009      	beq.n	80017de <delayRead+0x2a>

			delay->startTime = HAL_GetTick();
 80017ca:	f000 fddf 	bl	800238c <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	601a      	str	r2, [r3, #0]
			delay->running = true;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	721a      	strb	r2, [r3, #8]
			return 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	e00f      	b.n	80017fe <delayRead+0x4a>
		}
		else{
			if(HAL_GetTick()- delay->startTime >= delay->duration){
 80017de:	f000 fdd5 	bl	800238c <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	1ad2      	subs	r2, r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d304      	bcc.n	80017fc <delayRead+0x48>
				delay->running = false;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	721a      	strb	r2, [r3, #8]
				return 1;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e000      	b.n	80017fe <delayRead+0x4a>
			}
			else{
				return 0;
 80017fc:	2300      	movs	r3, #0
		}

}


	}
 80017fe:	4618      	mov	r0, r3
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <screenFSM_update>:
	//inicio de la máquina de estados
	screenState = SCREEN_MAIN;

}

void screenFSM_update(void){
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0


		switch(screenState){
 800180c:	4b18      	ldr	r3, [pc, #96]	; (8001870 <screenFSM_update+0x68>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b02      	cmp	r3, #2
 8001812:	d018      	beq.n	8001846 <screenFSM_update+0x3e>
 8001814:	2b02      	cmp	r3, #2
 8001816:	dc1f      	bgt.n	8001858 <screenFSM_update+0x50>
 8001818:	2b00      	cmp	r3, #0
 800181a:	d002      	beq.n	8001822 <screenFSM_update+0x1a>
 800181c:	2b01      	cmp	r3, #1
 800181e:	d009      	beq.n	8001834 <screenFSM_update+0x2c>
 8001820:	e01a      	b.n	8001858 <screenFSM_update+0x50>

		case SCREEN_MAIN:
			if(readKey()){
 8001822:	f7ff ff97 	bl	8001754 <readKey>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d019      	beq.n	8001860 <screenFSM_update+0x58>
				screenState = SCREEN_ALARMS;
 800182c:	4b10      	ldr	r3, [pc, #64]	; (8001870 <screenFSM_update+0x68>)
 800182e:	2201      	movs	r2, #1
 8001830:	701a      	strb	r2, [r3, #0]
			}

		break;
 8001832:	e015      	b.n	8001860 <screenFSM_update+0x58>

		case SCREEN_ALARMS:
			if(readKey()){
 8001834:	f7ff ff8e 	bl	8001754 <readKey>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d012      	beq.n	8001864 <screenFSM_update+0x5c>
				screenState = SCREEN_HISTORICAL;
 800183e:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <screenFSM_update+0x68>)
 8001840:	2202      	movs	r2, #2
 8001842:	701a      	strb	r2, [r3, #0]
			}


		break;
 8001844:	e00e      	b.n	8001864 <screenFSM_update+0x5c>

		case SCREEN_HISTORICAL:
			if(readKey()){
 8001846:	f7ff ff85 	bl	8001754 <readKey>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d00b      	beq.n	8001868 <screenFSM_update+0x60>
				screenState = SCREEN_MAIN;
 8001850:	4b07      	ldr	r3, [pc, #28]	; (8001870 <screenFSM_update+0x68>)
 8001852:	2200      	movs	r2, #0
 8001854:	701a      	strb	r2, [r3, #0]
			}


		break;
 8001856:	e007      	b.n	8001868 <screenFSM_update+0x60>



		default:
		screenState = SCREEN_MAIN;
 8001858:	4b05      	ldr	r3, [pc, #20]	; (8001870 <screenFSM_update+0x68>)
 800185a:	2200      	movs	r2, #0
 800185c:	701a      	strb	r2, [r3, #0]

		}


}
 800185e:	e004      	b.n	800186a <screenFSM_update+0x62>
		break;
 8001860:	bf00      	nop
 8001862:	e002      	b.n	800186a <screenFSM_update+0x62>
		break;
 8001864:	bf00      	nop
 8001866:	e000      	b.n	800186a <screenFSM_update+0x62>
		break;
 8001868:	bf00      	nop
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	2000014e 	.word	0x2000014e

08001874 <uartInit>:

//instancia de la  estructura: huart2
static UART_HandleTypeDef huart2;


bool_t uartInit(void){
 8001874:	b590      	push	{r4, r7, lr}
 8001876:	b09d      	sub	sp, #116	; 0x74
 8001878:	af02      	add	r7, sp, #8

	huart2.Instance = USART2;
 800187a:	4b22      	ldr	r3, [pc, #136]	; (8001904 <uartInit+0x90>)
 800187c:	4a22      	ldr	r2, [pc, #136]	; (8001908 <uartInit+0x94>)
 800187e:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001880:	4b20      	ldr	r3, [pc, #128]	; (8001904 <uartInit+0x90>)
 8001882:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001886:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001888:	4b1e      	ldr	r3, [pc, #120]	; (8001904 <uartInit+0x90>)
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800188e:	4b1d      	ldr	r3, [pc, #116]	; (8001904 <uartInit+0x90>)
 8001890:	2200      	movs	r2, #0
 8001892:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001894:	4b1b      	ldr	r3, [pc, #108]	; (8001904 <uartInit+0x90>)
 8001896:	2200      	movs	r2, #0
 8001898:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800189a:	4b1a      	ldr	r3, [pc, #104]	; (8001904 <uartInit+0x90>)
 800189c:	220c      	movs	r2, #12
 800189e:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018a0:	4b18      	ldr	r3, [pc, #96]	; (8001904 <uartInit+0x90>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018a6:	4b17      	ldr	r3, [pc, #92]	; (8001904 <uartInit+0x90>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80018ac:	4815      	ldr	r0, [pc, #84]	; (8001904 <uartInit+0x90>)
 80018ae:	f003 f86b 	bl	8004988 <HAL_UART_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <uartInit+0x48>
	{
		return false;
 80018b8:	2300      	movs	r3, #0
 80018ba:	e01f      	b.n	80018fc <uartInit+0x88>
	}
	else{
		char parametros[100];


		sprintf(parametros,"\nBaudRate=%ld\n\rWordLength=%ld\n\rStopBits=%ld\n\rParity=%ld\n\r",huart2.Init.BaudRate,huart2.Init.WordLength,huart2.Init.StopBits,huart2.Init.Parity);
 80018bc:	4b11      	ldr	r3, [pc, #68]	; (8001904 <uartInit+0x90>)
 80018be:	6859      	ldr	r1, [r3, #4]
 80018c0:	4b10      	ldr	r3, [pc, #64]	; (8001904 <uartInit+0x90>)
 80018c2:	689c      	ldr	r4, [r3, #8]
 80018c4:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <uartInit+0x90>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	4a0e      	ldr	r2, [pc, #56]	; (8001904 <uartInit+0x90>)
 80018ca:	6912      	ldr	r2, [r2, #16]
 80018cc:	1d38      	adds	r0, r7, #4
 80018ce:	9201      	str	r2, [sp, #4]
 80018d0:	9300      	str	r3, [sp, #0]
 80018d2:	4623      	mov	r3, r4
 80018d4:	460a      	mov	r2, r1
 80018d6:	490d      	ldr	r1, [pc, #52]	; (800190c <uartInit+0x98>)
 80018d8:	f003 fc18 	bl	800510c <siprintf>
		//caracteres en lugar de sizeof
		//Atención: en lugar de sizeof se podría utilizar strlen para que realmente llegue hasta el '\0' (realizado)
		//Atención: acá también se podría usar la función uartSendString que envía hasta '\0'

		//HAL_UART_Transmit(&huart2, (const uint8_t *)parametros , sizeof(parametros), 100);
		HAL_UART_Transmit(&huart2, (const uint8_t *)parametros , strlen(parametros), 100);
 80018dc:	1d3b      	adds	r3, r7, #4
 80018de:	4618      	mov	r0, r3
 80018e0:	f7fe fc7e 	bl	80001e0 <strlen>
 80018e4:	4603      	mov	r3, r0
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	1d39      	adds	r1, r7, #4
 80018ea:	2364      	movs	r3, #100	; 0x64
 80018ec:	4805      	ldr	r0, [pc, #20]	; (8001904 <uartInit+0x90>)
 80018ee:	f003 f898 	bl	8004a22 <HAL_UART_Transmit>

		//Demora bloqueante para observar los valores de la uart
		HAL_Delay(2000);
 80018f2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80018f6:	f000 fd55 	bl	80023a4 <HAL_Delay>


		return true;
 80018fa:	2301      	movs	r3, #1
	}



}
 80018fc:	4618      	mov	r0, r3
 80018fe:	376c      	adds	r7, #108	; 0x6c
 8001900:	46bd      	mov	sp, r7
 8001902:	bd90      	pop	{r4, r7, pc}
 8001904:	20000150 	.word	0x20000150
 8001908:	40004400 	.word	0x40004400
 800190c:	08006908 	.word	0x08006908

08001910 <read_calliberation_data>:
#define atmPress 101325 //Pa



void read_calliberation_data (void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08a      	sub	sp, #40	; 0x28
 8001914:	af04      	add	r7, sp, #16
	uint8_t Callib_Data[22] = {0};
 8001916:	2300      	movs	r3, #0
 8001918:	603b      	str	r3, [r7, #0]
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	821a      	strh	r2, [r3, #16]
	uint16_t Callib_Start = 0xAA;
 8001928:	23aa      	movs	r3, #170	; 0xaa
 800192a:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, Callib_Start, 1, Callib_Data,22, HAL_MAX_DELAY);
 800192c:	8afa      	ldrh	r2, [r7, #22]
 800192e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001932:	9302      	str	r3, [sp, #8]
 8001934:	2316      	movs	r3, #22
 8001936:	9301      	str	r3, [sp, #4]
 8001938:	463b      	mov	r3, r7
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	2301      	movs	r3, #1
 800193e:	21ee      	movs	r1, #238	; 0xee
 8001940:	4836      	ldr	r0, [pc, #216]	; (8001a1c <read_calliberation_data+0x10c>)
 8001942:	f001 fb71 	bl	8003028 <HAL_I2C_Mem_Read>

	AC1 = ((Callib_Data[0] << 8) | Callib_Data[1]);
 8001946:	783b      	ldrb	r3, [r7, #0]
 8001948:	021b      	lsls	r3, r3, #8
 800194a:	b21a      	sxth	r2, r3
 800194c:	787b      	ldrb	r3, [r7, #1]
 800194e:	b21b      	sxth	r3, r3
 8001950:	4313      	orrs	r3, r2
 8001952:	b21a      	sxth	r2, r3
 8001954:	4b32      	ldr	r3, [pc, #200]	; (8001a20 <read_calliberation_data+0x110>)
 8001956:	801a      	strh	r2, [r3, #0]
	AC2 = ((Callib_Data[2] << 8) | Callib_Data[3]);
 8001958:	78bb      	ldrb	r3, [r7, #2]
 800195a:	021b      	lsls	r3, r3, #8
 800195c:	b21a      	sxth	r2, r3
 800195e:	78fb      	ldrb	r3, [r7, #3]
 8001960:	b21b      	sxth	r3, r3
 8001962:	4313      	orrs	r3, r2
 8001964:	b21a      	sxth	r2, r3
 8001966:	4b2f      	ldr	r3, [pc, #188]	; (8001a24 <read_calliberation_data+0x114>)
 8001968:	801a      	strh	r2, [r3, #0]
	AC3 = ((Callib_Data[4] << 8) | Callib_Data[5]);
 800196a:	793b      	ldrb	r3, [r7, #4]
 800196c:	021b      	lsls	r3, r3, #8
 800196e:	b21a      	sxth	r2, r3
 8001970:	797b      	ldrb	r3, [r7, #5]
 8001972:	b21b      	sxth	r3, r3
 8001974:	4313      	orrs	r3, r2
 8001976:	b21a      	sxth	r2, r3
 8001978:	4b2b      	ldr	r3, [pc, #172]	; (8001a28 <read_calliberation_data+0x118>)
 800197a:	801a      	strh	r2, [r3, #0]
	AC4 = ((Callib_Data[6] << 8) | Callib_Data[7]);
 800197c:	79bb      	ldrb	r3, [r7, #6]
 800197e:	021b      	lsls	r3, r3, #8
 8001980:	b21a      	sxth	r2, r3
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	b21b      	sxth	r3, r3
 8001986:	4313      	orrs	r3, r2
 8001988:	b21b      	sxth	r3, r3
 800198a:	b29a      	uxth	r2, r3
 800198c:	4b27      	ldr	r3, [pc, #156]	; (8001a2c <read_calliberation_data+0x11c>)
 800198e:	801a      	strh	r2, [r3, #0]
	AC5 = ((Callib_Data[8] << 8) | Callib_Data[9]);
 8001990:	7a3b      	ldrb	r3, [r7, #8]
 8001992:	021b      	lsls	r3, r3, #8
 8001994:	b21a      	sxth	r2, r3
 8001996:	7a7b      	ldrb	r3, [r7, #9]
 8001998:	b21b      	sxth	r3, r3
 800199a:	4313      	orrs	r3, r2
 800199c:	b21b      	sxth	r3, r3
 800199e:	b29a      	uxth	r2, r3
 80019a0:	4b23      	ldr	r3, [pc, #140]	; (8001a30 <read_calliberation_data+0x120>)
 80019a2:	801a      	strh	r2, [r3, #0]
	AC6 = ((Callib_Data[10] << 8) | Callib_Data[11]);
 80019a4:	7abb      	ldrb	r3, [r7, #10]
 80019a6:	021b      	lsls	r3, r3, #8
 80019a8:	b21a      	sxth	r2, r3
 80019aa:	7afb      	ldrb	r3, [r7, #11]
 80019ac:	b21b      	sxth	r3, r3
 80019ae:	4313      	orrs	r3, r2
 80019b0:	b21b      	sxth	r3, r3
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	4b1f      	ldr	r3, [pc, #124]	; (8001a34 <read_calliberation_data+0x124>)
 80019b6:	801a      	strh	r2, [r3, #0]
	B1 = ((Callib_Data[12] << 8) | Callib_Data[13]);
 80019b8:	7b3b      	ldrb	r3, [r7, #12]
 80019ba:	021b      	lsls	r3, r3, #8
 80019bc:	b21a      	sxth	r2, r3
 80019be:	7b7b      	ldrb	r3, [r7, #13]
 80019c0:	b21b      	sxth	r3, r3
 80019c2:	4313      	orrs	r3, r2
 80019c4:	b21a      	sxth	r2, r3
 80019c6:	4b1c      	ldr	r3, [pc, #112]	; (8001a38 <read_calliberation_data+0x128>)
 80019c8:	801a      	strh	r2, [r3, #0]
	B2 = ((Callib_Data[14] << 8) | Callib_Data[15]);
 80019ca:	7bbb      	ldrb	r3, [r7, #14]
 80019cc:	021b      	lsls	r3, r3, #8
 80019ce:	b21a      	sxth	r2, r3
 80019d0:	7bfb      	ldrb	r3, [r7, #15]
 80019d2:	b21b      	sxth	r3, r3
 80019d4:	4313      	orrs	r3, r2
 80019d6:	b21a      	sxth	r2, r3
 80019d8:	4b18      	ldr	r3, [pc, #96]	; (8001a3c <read_calliberation_data+0x12c>)
 80019da:	801a      	strh	r2, [r3, #0]
	MB = ((Callib_Data[16] << 8) | Callib_Data[17]);
 80019dc:	7c3b      	ldrb	r3, [r7, #16]
 80019de:	021b      	lsls	r3, r3, #8
 80019e0:	b21a      	sxth	r2, r3
 80019e2:	7c7b      	ldrb	r3, [r7, #17]
 80019e4:	b21b      	sxth	r3, r3
 80019e6:	4313      	orrs	r3, r2
 80019e8:	b21a      	sxth	r2, r3
 80019ea:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <read_calliberation_data+0x130>)
 80019ec:	801a      	strh	r2, [r3, #0]
	MC = ((Callib_Data[18] << 8) | Callib_Data[19]);
 80019ee:	7cbb      	ldrb	r3, [r7, #18]
 80019f0:	021b      	lsls	r3, r3, #8
 80019f2:	b21a      	sxth	r2, r3
 80019f4:	7cfb      	ldrb	r3, [r7, #19]
 80019f6:	b21b      	sxth	r3, r3
 80019f8:	4313      	orrs	r3, r2
 80019fa:	b21a      	sxth	r2, r3
 80019fc:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <read_calliberation_data+0x134>)
 80019fe:	801a      	strh	r2, [r3, #0]
	MD = ((Callib_Data[20] << 8) | Callib_Data[21]);
 8001a00:	7d3b      	ldrb	r3, [r7, #20]
 8001a02:	021b      	lsls	r3, r3, #8
 8001a04:	b21a      	sxth	r2, r3
 8001a06:	7d7b      	ldrb	r3, [r7, #21]
 8001a08:	b21b      	sxth	r3, r3
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	b21a      	sxth	r2, r3
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <read_calliberation_data+0x138>)
 8001a10:	801a      	strh	r2, [r3, #0]

}
 8001a12:	bf00      	nop
 8001a14:	3718      	adds	r7, #24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	2000008c 	.word	0x2000008c
 8001a20:	20000194 	.word	0x20000194
 8001a24:	20000196 	.word	0x20000196
 8001a28:	20000198 	.word	0x20000198
 8001a2c:	2000019a 	.word	0x2000019a
 8001a30:	2000019c 	.word	0x2000019c
 8001a34:	2000019e 	.word	0x2000019e
 8001a38:	200001a0 	.word	0x200001a0
 8001a3c:	200001a2 	.word	0x200001a2
 8001a40:	200001a4 	.word	0x200001a4
 8001a44:	200001a6 	.word	0x200001a6
 8001a48:	200001a8 	.word	0x200001a8

08001a4c <Get_UTemp>:


// Get uncompensated Temp
uint16_t Get_UTemp (void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af04      	add	r7, sp, #16
	uint8_t datatowrite = 0x2E;
 8001a52:	232e      	movs	r3, #46	; 0x2e
 8001a54:	71fb      	strb	r3, [r7, #7]
	uint8_t Temp_RAW[2] = {0};
 8001a56:	2300      	movs	r3, #0
 8001a58:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 8001a5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a5e:	9302      	str	r3, [sp, #8]
 8001a60:	2301      	movs	r3, #1
 8001a62:	9301      	str	r3, [sp, #4]
 8001a64:	1dfb      	adds	r3, r7, #7
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	2301      	movs	r3, #1
 8001a6a:	22f4      	movs	r2, #244	; 0xf4
 8001a6c:	21ee      	movs	r1, #238	; 0xee
 8001a6e:	480f      	ldr	r0, [pc, #60]	; (8001aac <Get_UTemp+0x60>)
 8001a70:	f001 f9e0 	bl	8002e34 <HAL_I2C_Mem_Write>
	HAL_Delay (5);  // wait 4.5 ms
 8001a74:	2005      	movs	r0, #5
 8001a76:	f000 fc95 	bl	80023a4 <HAL_Delay>
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Temp_RAW, 2, 1000);
 8001a7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a7e:	9302      	str	r3, [sp, #8]
 8001a80:	2302      	movs	r3, #2
 8001a82:	9301      	str	r3, [sp, #4]
 8001a84:	1d3b      	adds	r3, r7, #4
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	2301      	movs	r3, #1
 8001a8a:	22f6      	movs	r2, #246	; 0xf6
 8001a8c:	21ee      	movs	r1, #238	; 0xee
 8001a8e:	4807      	ldr	r0, [pc, #28]	; (8001aac <Get_UTemp+0x60>)
 8001a90:	f001 faca 	bl	8003028 <HAL_I2C_Mem_Read>
	return ((Temp_RAW[0]<<8) + Temp_RAW[1]);
 8001a94:	793b      	ldrb	r3, [r7, #4]
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	021b      	lsls	r3, r3, #8
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	797b      	ldrb	r3, [r7, #5]
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	4413      	add	r3, r2
 8001aa2:	b29b      	uxth	r3, r3
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	2000008c 	.word	0x2000008c

08001ab0 <BMP180_GetTemp>:

float BMP180_GetTemp (void)
{
 8001ab0:	b5b0      	push	{r4, r5, r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
	UT = Get_UTemp();
 8001ab4:	f7ff ffca 	bl	8001a4c <Get_UTemp>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	461a      	mov	r2, r3
 8001abc:	4b3e      	ldr	r3, [pc, #248]	; (8001bb8 <BMP180_GetTemp+0x108>)
 8001abe:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 8001ac0:	4b3d      	ldr	r3, [pc, #244]	; (8001bb8 <BMP180_GetTemp+0x108>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a3d      	ldr	r2, [pc, #244]	; (8001bbc <BMP180_GetTemp+0x10c>)
 8001ac6:	8812      	ldrh	r2, [r2, #0]
 8001ac8:	1a9b      	subs	r3, r3, r2
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7fe fd32 	bl	8000534 <__aeabi_i2d>
 8001ad0:	4604      	mov	r4, r0
 8001ad2:	460d      	mov	r5, r1
 8001ad4:	4b3a      	ldr	r3, [pc, #232]	; (8001bc0 <BMP180_GetTemp+0x110>)
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7fe fd2b 	bl	8000534 <__aeabi_i2d>
 8001ade:	f04f 0200 	mov.w	r2, #0
 8001ae2:	4b38      	ldr	r3, [pc, #224]	; (8001bc4 <BMP180_GetTemp+0x114>)
 8001ae4:	f7fe feba 	bl	800085c <__aeabi_ddiv>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4620      	mov	r0, r4
 8001aee:	4629      	mov	r1, r5
 8001af0:	f7fe fd8a 	bl	8000608 <__aeabi_dmul>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4610      	mov	r0, r2
 8001afa:	4619      	mov	r1, r3
 8001afc:	f7ff f834 	bl	8000b68 <__aeabi_d2iz>
 8001b00:	4603      	mov	r3, r0
 8001b02:	4a31      	ldr	r2, [pc, #196]	; (8001bc8 <BMP180_GetTemp+0x118>)
 8001b04:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 8001b06:	4b31      	ldr	r3, [pc, #196]	; (8001bcc <BMP180_GetTemp+0x11c>)
 8001b08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7fe fd11 	bl	8000534 <__aeabi_i2d>
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	4b2e      	ldr	r3, [pc, #184]	; (8001bd0 <BMP180_GetTemp+0x120>)
 8001b18:	f7fe fd76 	bl	8000608 <__aeabi_dmul>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4614      	mov	r4, r2
 8001b22:	461d      	mov	r5, r3
 8001b24:	4b2b      	ldr	r3, [pc, #172]	; (8001bd4 <BMP180_GetTemp+0x124>)
 8001b26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	4b26      	ldr	r3, [pc, #152]	; (8001bc8 <BMP180_GetTemp+0x118>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4413      	add	r3, r2
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7fe fcfe 	bl	8000534 <__aeabi_i2d>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4620      	mov	r0, r4
 8001b3e:	4629      	mov	r1, r5
 8001b40:	f7fe fe8c 	bl	800085c <__aeabi_ddiv>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4610      	mov	r0, r2
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	f7ff f80c 	bl	8000b68 <__aeabi_d2iz>
 8001b50:	4603      	mov	r3, r0
 8001b52:	4a21      	ldr	r2, [pc, #132]	; (8001bd8 <BMP180_GetTemp+0x128>)
 8001b54:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 8001b56:	4b1c      	ldr	r3, [pc, #112]	; (8001bc8 <BMP180_GetTemp+0x118>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	4b1f      	ldr	r3, [pc, #124]	; (8001bd8 <BMP180_GetTemp+0x128>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4413      	add	r3, r2
 8001b60:	4a1e      	ldr	r2, [pc, #120]	; (8001bdc <BMP180_GetTemp+0x12c>)
 8001b62:	6013      	str	r3, [r2, #0]
	Temp = (B5+8)/(pow(2,4));
 8001b64:	4b1d      	ldr	r3, [pc, #116]	; (8001bdc <BMP180_GetTemp+0x12c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	3308      	adds	r3, #8
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7fe fce2 	bl	8000534 <__aeabi_i2d>
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	4b1a      	ldr	r3, [pc, #104]	; (8001be0 <BMP180_GetTemp+0x130>)
 8001b76:	f7fe fe71 	bl	800085c <__aeabi_ddiv>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4610      	mov	r0, r2
 8001b80:	4619      	mov	r1, r3
 8001b82:	f7fe fff1 	bl	8000b68 <__aeabi_d2iz>
 8001b86:	4603      	mov	r3, r0
 8001b88:	4a16      	ldr	r2, [pc, #88]	; (8001be4 <BMP180_GetTemp+0x134>)
 8001b8a:	6013      	str	r3, [r2, #0]
	return Temp/10.0;
 8001b8c:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <BMP180_GetTemp+0x134>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7fe fccf 	bl	8000534 <__aeabi_i2d>
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <BMP180_GetTemp+0x138>)
 8001b9c:	f7fe fe5e 	bl	800085c <__aeabi_ddiv>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4610      	mov	r0, r2
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	f7ff f826 	bl	8000bf8 <__aeabi_d2f>
 8001bac:	4603      	mov	r3, r0
 8001bae:	ee07 3a90 	vmov	s15, r3
}
 8001bb2:	eeb0 0a67 	vmov.f32	s0, s15
 8001bb6:	bdb0      	pop	{r4, r5, r7, pc}
 8001bb8:	200001ac 	.word	0x200001ac
 8001bbc:	2000019e 	.word	0x2000019e
 8001bc0:	2000019c 	.word	0x2000019c
 8001bc4:	40e00000 	.word	0x40e00000
 8001bc8:	200001b4 	.word	0x200001b4
 8001bcc:	200001a6 	.word	0x200001a6
 8001bd0:	40a00000 	.word	0x40a00000
 8001bd4:	200001a8 	.word	0x200001a8
 8001bd8:	200001b8 	.word	0x200001b8
 8001bdc:	200001c4 	.word	0x200001c4
 8001be0:	40300000 	.word	0x40300000
 8001be4:	200001d8 	.word	0x200001d8
 8001be8:	40240000 	.word	0x40240000

08001bec <Get_UPress>:

// Get uncompensated Pressure
uint32_t Get_UPress (int oss)   // oversampling setting 0,1,2,3
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b088      	sub	sp, #32
 8001bf0:	af04      	add	r7, sp, #16
 8001bf2:	6078      	str	r0, [r7, #4]
	uint8_t datatowrite = 0x34+(oss<<6);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	019b      	lsls	r3, r3, #6
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	3334      	adds	r3, #52	; 0x34
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	73fb      	strb	r3, [r7, #15]
	uint8_t Press_RAW[3] = {0};
 8001c02:	4b27      	ldr	r3, [pc, #156]	; (8001ca0 <Get_UPress+0xb4>)
 8001c04:	881b      	ldrh	r3, [r3, #0]
 8001c06:	81bb      	strh	r3, [r7, #12]
 8001c08:	2300      	movs	r3, #0
 8001c0a:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 8001c0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c10:	9302      	str	r3, [sp, #8]
 8001c12:	2301      	movs	r3, #1
 8001c14:	9301      	str	r3, [sp, #4]
 8001c16:	f107 030f 	add.w	r3, r7, #15
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	22f4      	movs	r2, #244	; 0xf4
 8001c20:	21ee      	movs	r1, #238	; 0xee
 8001c22:	4820      	ldr	r0, [pc, #128]	; (8001ca4 <Get_UPress+0xb8>)
 8001c24:	f001 f906 	bl	8002e34 <HAL_I2C_Mem_Write>
	switch (oss)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b03      	cmp	r3, #3
 8001c2c:	d81a      	bhi.n	8001c64 <Get_UPress+0x78>
 8001c2e:	a201      	add	r2, pc, #4	; (adr r2, 8001c34 <Get_UPress+0x48>)
 8001c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c34:	08001c45 	.word	0x08001c45
 8001c38:	08001c4d 	.word	0x08001c4d
 8001c3c:	08001c55 	.word	0x08001c55
 8001c40:	08001c5d 	.word	0x08001c5d
	{
		case (0):
			HAL_Delay (5);
 8001c44:	2005      	movs	r0, #5
 8001c46:	f000 fbad 	bl	80023a4 <HAL_Delay>
			break;
 8001c4a:	e00b      	b.n	8001c64 <Get_UPress+0x78>
		case (1):
			HAL_Delay (8);
 8001c4c:	2008      	movs	r0, #8
 8001c4e:	f000 fba9 	bl	80023a4 <HAL_Delay>
			break;
 8001c52:	e007      	b.n	8001c64 <Get_UPress+0x78>
		case (2):
			HAL_Delay (14);
 8001c54:	200e      	movs	r0, #14
 8001c56:	f000 fba5 	bl	80023a4 <HAL_Delay>
			break;
 8001c5a:	e003      	b.n	8001c64 <Get_UPress+0x78>
		case (3):
			HAL_Delay (26);
 8001c5c:	201a      	movs	r0, #26
 8001c5e:	f000 fba1 	bl	80023a4 <HAL_Delay>
			break;
 8001c62:	bf00      	nop
	}
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Press_RAW, 3, 1000);
 8001c64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c68:	9302      	str	r3, [sp, #8]
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	9301      	str	r3, [sp, #4]
 8001c6e:	f107 030c 	add.w	r3, r7, #12
 8001c72:	9300      	str	r3, [sp, #0]
 8001c74:	2301      	movs	r3, #1
 8001c76:	22f6      	movs	r2, #246	; 0xf6
 8001c78:	21ee      	movs	r1, #238	; 0xee
 8001c7a:	480a      	ldr	r0, [pc, #40]	; (8001ca4 <Get_UPress+0xb8>)
 8001c7c:	f001 f9d4 	bl	8003028 <HAL_I2C_Mem_Read>
	return (((Press_RAW[0]<<16)+(Press_RAW[1]<<8)+Press_RAW[2]) >> (8-oss));
 8001c80:	7b3b      	ldrb	r3, [r7, #12]
 8001c82:	041a      	lsls	r2, r3, #16
 8001c84:	7b7b      	ldrb	r3, [r7, #13]
 8001c86:	021b      	lsls	r3, r3, #8
 8001c88:	4413      	add	r3, r2
 8001c8a:	7bba      	ldrb	r2, [r7, #14]
 8001c8c:	441a      	add	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f1c3 0308 	rsb	r3, r3, #8
 8001c94:	fa42 f303 	asr.w	r3, r2, r3
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	08006944 	.word	0x08006944
 8001ca4:	2000008c 	.word	0x2000008c

08001ca8 <BMP180_GetPress>:


float BMP180_GetPress (int oss)
{
 8001ca8:	b5b0      	push	{r4, r5, r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
	UP = Get_UPress(oss);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff ff9b 	bl	8001bec <Get_UPress>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	461a      	mov	r2, r3
 8001cba:	4ba8      	ldr	r3, [pc, #672]	; (8001f5c <BMP180_GetPress+0x2b4>)
 8001cbc:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 8001cbe:	4ba8      	ldr	r3, [pc, #672]	; (8001f60 <BMP180_GetPress+0x2b8>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4aa8      	ldr	r2, [pc, #672]	; (8001f64 <BMP180_GetPress+0x2bc>)
 8001cc4:	8812      	ldrh	r2, [r2, #0]
 8001cc6:	1a9b      	subs	r3, r3, r2
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7fe fc33 	bl	8000534 <__aeabi_i2d>
 8001cce:	4604      	mov	r4, r0
 8001cd0:	460d      	mov	r5, r1
 8001cd2:	4ba5      	ldr	r3, [pc, #660]	; (8001f68 <BMP180_GetPress+0x2c0>)
 8001cd4:	881b      	ldrh	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7fe fc2c 	bl	8000534 <__aeabi_i2d>
 8001cdc:	f04f 0200 	mov.w	r2, #0
 8001ce0:	4ba2      	ldr	r3, [pc, #648]	; (8001f6c <BMP180_GetPress+0x2c4>)
 8001ce2:	f7fe fdbb 	bl	800085c <__aeabi_ddiv>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
 8001cea:	4620      	mov	r0, r4
 8001cec:	4629      	mov	r1, r5
 8001cee:	f7fe fc8b 	bl	8000608 <__aeabi_dmul>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	4610      	mov	r0, r2
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	f7fe ff35 	bl	8000b68 <__aeabi_d2iz>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	4a9b      	ldr	r2, [pc, #620]	; (8001f70 <BMP180_GetPress+0x2c8>)
 8001d02:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 8001d04:	4b9b      	ldr	r3, [pc, #620]	; (8001f74 <BMP180_GetPress+0x2cc>)
 8001d06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe fc12 	bl	8000534 <__aeabi_i2d>
 8001d10:	f04f 0200 	mov.w	r2, #0
 8001d14:	4b98      	ldr	r3, [pc, #608]	; (8001f78 <BMP180_GetPress+0x2d0>)
 8001d16:	f7fe fc77 	bl	8000608 <__aeabi_dmul>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	4614      	mov	r4, r2
 8001d20:	461d      	mov	r5, r3
 8001d22:	4b96      	ldr	r3, [pc, #600]	; (8001f7c <BMP180_GetPress+0x2d4>)
 8001d24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4b91      	ldr	r3, [pc, #580]	; (8001f70 <BMP180_GetPress+0x2c8>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4413      	add	r3, r2
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7fe fbff 	bl	8000534 <__aeabi_i2d>
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
 8001d3a:	4620      	mov	r0, r4
 8001d3c:	4629      	mov	r1, r5
 8001d3e:	f7fe fd8d 	bl	800085c <__aeabi_ddiv>
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	4610      	mov	r0, r2
 8001d48:	4619      	mov	r1, r3
 8001d4a:	f7fe ff0d 	bl	8000b68 <__aeabi_d2iz>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	4a8b      	ldr	r2, [pc, #556]	; (8001f80 <BMP180_GetPress+0x2d8>)
 8001d52:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 8001d54:	4b86      	ldr	r3, [pc, #536]	; (8001f70 <BMP180_GetPress+0x2c8>)
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	4b89      	ldr	r3, [pc, #548]	; (8001f80 <BMP180_GetPress+0x2d8>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	4a89      	ldr	r2, [pc, #548]	; (8001f84 <BMP180_GetPress+0x2dc>)
 8001d60:	6013      	str	r3, [r2, #0]
	B6 = B5-4000;
 8001d62:	4b88      	ldr	r3, [pc, #544]	; (8001f84 <BMP180_GetPress+0x2dc>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001d6a:	4a87      	ldr	r2, [pc, #540]	; (8001f88 <BMP180_GetPress+0x2e0>)
 8001d6c:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(pow(2,12))))/(pow(2,11));
 8001d6e:	4b87      	ldr	r3, [pc, #540]	; (8001f8c <BMP180_GetPress+0x2e4>)
 8001d70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7fe fbdd 	bl	8000534 <__aeabi_i2d>
 8001d7a:	4604      	mov	r4, r0
 8001d7c:	460d      	mov	r5, r1
 8001d7e:	4b82      	ldr	r3, [pc, #520]	; (8001f88 <BMP180_GetPress+0x2e0>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a81      	ldr	r2, [pc, #516]	; (8001f88 <BMP180_GetPress+0x2e0>)
 8001d84:	6812      	ldr	r2, [r2, #0]
 8001d86:	fb02 f303 	mul.w	r3, r2, r3
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe fbd2 	bl	8000534 <__aeabi_i2d>
 8001d90:	f04f 0200 	mov.w	r2, #0
 8001d94:	4b7e      	ldr	r3, [pc, #504]	; (8001f90 <BMP180_GetPress+0x2e8>)
 8001d96:	f7fe fd61 	bl	800085c <__aeabi_ddiv>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	4620      	mov	r0, r4
 8001da0:	4629      	mov	r1, r5
 8001da2:	f7fe fc31 	bl	8000608 <__aeabi_dmul>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	4610      	mov	r0, r2
 8001dac:	4619      	mov	r1, r3
 8001dae:	f04f 0200 	mov.w	r2, #0
 8001db2:	4b71      	ldr	r3, [pc, #452]	; (8001f78 <BMP180_GetPress+0x2d0>)
 8001db4:	f7fe fd52 	bl	800085c <__aeabi_ddiv>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	4610      	mov	r0, r2
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	f7fe fed2 	bl	8000b68 <__aeabi_d2iz>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	4a6a      	ldr	r2, [pc, #424]	; (8001f70 <BMP180_GetPress+0x2c8>)
 8001dc8:	6013      	str	r3, [r2, #0]
	X2 = AC2*B6/(pow(2,11));
 8001dca:	4b72      	ldr	r3, [pc, #456]	; (8001f94 <BMP180_GetPress+0x2ec>)
 8001dcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4b6d      	ldr	r3, [pc, #436]	; (8001f88 <BMP180_GetPress+0x2e0>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	fb02 f303 	mul.w	r3, r2, r3
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7fe fbaa 	bl	8000534 <__aeabi_i2d>
 8001de0:	f04f 0200 	mov.w	r2, #0
 8001de4:	4b64      	ldr	r3, [pc, #400]	; (8001f78 <BMP180_GetPress+0x2d0>)
 8001de6:	f7fe fd39 	bl	800085c <__aeabi_ddiv>
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	4610      	mov	r0, r2
 8001df0:	4619      	mov	r1, r3
 8001df2:	f7fe feb9 	bl	8000b68 <__aeabi_d2iz>
 8001df6:	4603      	mov	r3, r0
 8001df8:	4a61      	ldr	r2, [pc, #388]	; (8001f80 <BMP180_GetPress+0x2d8>)
 8001dfa:	6013      	str	r3, [r2, #0]
	X3 = X1+X2;
 8001dfc:	4b5c      	ldr	r3, [pc, #368]	; (8001f70 <BMP180_GetPress+0x2c8>)
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	4b5f      	ldr	r3, [pc, #380]	; (8001f80 <BMP180_GetPress+0x2d8>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4413      	add	r3, r2
 8001e06:	4a64      	ldr	r2, [pc, #400]	; (8001f98 <BMP180_GetPress+0x2f0>)
 8001e08:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<oss)+2)/4;
 8001e0a:	4b64      	ldr	r3, [pc, #400]	; (8001f9c <BMP180_GetPress+0x2f4>)
 8001e0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e10:	009a      	lsls	r2, r3, #2
 8001e12:	4b61      	ldr	r3, [pc, #388]	; (8001f98 <BMP180_GetPress+0x2f0>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	441a      	add	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	3302      	adds	r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	da00      	bge.n	8001e26 <BMP180_GetPress+0x17e>
 8001e24:	3303      	adds	r3, #3
 8001e26:	109b      	asrs	r3, r3, #2
 8001e28:	461a      	mov	r2, r3
 8001e2a:	4b5d      	ldr	r3, [pc, #372]	; (8001fa0 <BMP180_GetPress+0x2f8>)
 8001e2c:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/pow(2,13);
 8001e2e:	4b5d      	ldr	r3, [pc, #372]	; (8001fa4 <BMP180_GetPress+0x2fc>)
 8001e30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e34:	461a      	mov	r2, r3
 8001e36:	4b54      	ldr	r3, [pc, #336]	; (8001f88 <BMP180_GetPress+0x2e0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	fb02 f303 	mul.w	r3, r2, r3
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7fe fb78 	bl	8000534 <__aeabi_i2d>
 8001e44:	f04f 0200 	mov.w	r2, #0
 8001e48:	4b57      	ldr	r3, [pc, #348]	; (8001fa8 <BMP180_GetPress+0x300>)
 8001e4a:	f7fe fd07 	bl	800085c <__aeabi_ddiv>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4610      	mov	r0, r2
 8001e54:	4619      	mov	r1, r3
 8001e56:	f7fe fe87 	bl	8000b68 <__aeabi_d2iz>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	4a44      	ldr	r2, [pc, #272]	; (8001f70 <BMP180_GetPress+0x2c8>)
 8001e5e:	6013      	str	r3, [r2, #0]
	X2 = (B1 * (B6*B6/(pow(2,12))))/(pow(2,16));
 8001e60:	4b52      	ldr	r3, [pc, #328]	; (8001fac <BMP180_GetPress+0x304>)
 8001e62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7fe fb64 	bl	8000534 <__aeabi_i2d>
 8001e6c:	4604      	mov	r4, r0
 8001e6e:	460d      	mov	r5, r1
 8001e70:	4b45      	ldr	r3, [pc, #276]	; (8001f88 <BMP180_GetPress+0x2e0>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a44      	ldr	r2, [pc, #272]	; (8001f88 <BMP180_GetPress+0x2e0>)
 8001e76:	6812      	ldr	r2, [r2, #0]
 8001e78:	fb02 f303 	mul.w	r3, r2, r3
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe fb59 	bl	8000534 <__aeabi_i2d>
 8001e82:	f04f 0200 	mov.w	r2, #0
 8001e86:	4b42      	ldr	r3, [pc, #264]	; (8001f90 <BMP180_GetPress+0x2e8>)
 8001e88:	f7fe fce8 	bl	800085c <__aeabi_ddiv>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	4620      	mov	r0, r4
 8001e92:	4629      	mov	r1, r5
 8001e94:	f7fe fbb8 	bl	8000608 <__aeabi_dmul>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	4610      	mov	r0, r2
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	f04f 0200 	mov.w	r2, #0
 8001ea4:	4b42      	ldr	r3, [pc, #264]	; (8001fb0 <BMP180_GetPress+0x308>)
 8001ea6:	f7fe fcd9 	bl	800085c <__aeabi_ddiv>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	4610      	mov	r0, r2
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	f7fe fe59 	bl	8000b68 <__aeabi_d2iz>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	4a31      	ldr	r2, [pc, #196]	; (8001f80 <BMP180_GetPress+0x2d8>)
 8001eba:	6013      	str	r3, [r2, #0]
	X3 = ((X1+X2)+2)/pow(2,2);
 8001ebc:	4b2c      	ldr	r3, [pc, #176]	; (8001f70 <BMP180_GetPress+0x2c8>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	4b2f      	ldr	r3, [pc, #188]	; (8001f80 <BMP180_GetPress+0x2d8>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	3302      	adds	r3, #2
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7fe fb33 	bl	8000534 <__aeabi_i2d>
 8001ece:	f04f 0200 	mov.w	r2, #0
 8001ed2:	4b38      	ldr	r3, [pc, #224]	; (8001fb4 <BMP180_GetPress+0x30c>)
 8001ed4:	f7fe fcc2 	bl	800085c <__aeabi_ddiv>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	4610      	mov	r0, r2
 8001ede:	4619      	mov	r1, r3
 8001ee0:	f7fe fe42 	bl	8000b68 <__aeabi_d2iz>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	4a2c      	ldr	r2, [pc, #176]	; (8001f98 <BMP180_GetPress+0x2f0>)
 8001ee8:	6013      	str	r3, [r2, #0]
	B4 = AC4*(unsigned long)(X3+32768)/(pow(2,15));
 8001eea:	4b33      	ldr	r3, [pc, #204]	; (8001fb8 <BMP180_GetPress+0x310>)
 8001eec:	881b      	ldrh	r3, [r3, #0]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	4b29      	ldr	r3, [pc, #164]	; (8001f98 <BMP180_GetPress+0x2f0>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001ef8:	fb02 f303 	mul.w	r3, r2, r3
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7fe fb09 	bl	8000514 <__aeabi_ui2d>
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	4b19      	ldr	r3, [pc, #100]	; (8001f6c <BMP180_GetPress+0x2c4>)
 8001f08:	f7fe fca8 	bl	800085c <__aeabi_ddiv>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	4610      	mov	r0, r2
 8001f12:	4619      	mov	r1, r3
 8001f14:	f7fe fe50 	bl	8000bb8 <__aeabi_d2uiz>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	4a28      	ldr	r2, [pc, #160]	; (8001fbc <BMP180_GetPress+0x314>)
 8001f1c:	6013      	str	r3, [r2, #0]
	B7 = ((unsigned long)UP-B3)*(50000>>oss);
 8001f1e:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <BMP180_GetPress+0x2b4>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	461a      	mov	r2, r3
 8001f24:	4b1e      	ldr	r3, [pc, #120]	; (8001fa0 <BMP180_GetPress+0x2f8>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	f24c 3150 	movw	r1, #50000	; 0xc350
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	fa41 f202 	asr.w	r2, r1, r2
 8001f34:	fb02 f303 	mul.w	r3, r2, r3
 8001f38:	4a21      	ldr	r2, [pc, #132]	; (8001fc0 <BMP180_GetPress+0x318>)
 8001f3a:	6013      	str	r3, [r2, #0]
	if (B7<0x80000000) Press = (B7*2)/B4;
 8001f3c:	4b20      	ldr	r3, [pc, #128]	; (8001fc0 <BMP180_GetPress+0x318>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	db41      	blt.n	8001fc8 <BMP180_GetPress+0x320>
 8001f44:	4b1e      	ldr	r3, [pc, #120]	; (8001fc0 <BMP180_GetPress+0x318>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	005a      	lsls	r2, r3, #1
 8001f4a:	4b1c      	ldr	r3, [pc, #112]	; (8001fbc <BMP180_GetPress+0x314>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f52:	461a      	mov	r2, r3
 8001f54:	4b1b      	ldr	r3, [pc, #108]	; (8001fc4 <BMP180_GetPress+0x31c>)
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	e040      	b.n	8001fdc <BMP180_GetPress+0x334>
 8001f5a:	bf00      	nop
 8001f5c:	200001b0 	.word	0x200001b0
 8001f60:	200001ac 	.word	0x200001ac
 8001f64:	2000019e 	.word	0x2000019e
 8001f68:	2000019c 	.word	0x2000019c
 8001f6c:	40e00000 	.word	0x40e00000
 8001f70:	200001b4 	.word	0x200001b4
 8001f74:	200001a6 	.word	0x200001a6
 8001f78:	40a00000 	.word	0x40a00000
 8001f7c:	200001a8 	.word	0x200001a8
 8001f80:	200001b8 	.word	0x200001b8
 8001f84:	200001c4 	.word	0x200001c4
 8001f88:	200001cc 	.word	0x200001cc
 8001f8c:	200001a2 	.word	0x200001a2
 8001f90:	40b00000 	.word	0x40b00000
 8001f94:	20000196 	.word	0x20000196
 8001f98:	200001bc 	.word	0x200001bc
 8001f9c:	20000194 	.word	0x20000194
 8001fa0:	200001c0 	.word	0x200001c0
 8001fa4:	20000198 	.word	0x20000198
 8001fa8:	40c00000 	.word	0x40c00000
 8001fac:	200001a0 	.word	0x200001a0
 8001fb0:	40f00000 	.word	0x40f00000
 8001fb4:	40100000 	.word	0x40100000
 8001fb8:	2000019a 	.word	0x2000019a
 8001fbc:	200001c8 	.word	0x200001c8
 8001fc0:	200001d0 	.word	0x200001d0
 8001fc4:	200001d4 	.word	0x200001d4
	else Press = (B7/B4)*2;
 8001fc8:	4b46      	ldr	r3, [pc, #280]	; (80020e4 <BMP180_GetPress+0x43c>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	4b46      	ldr	r3, [pc, #280]	; (80020e8 <BMP180_GetPress+0x440>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	4b44      	ldr	r3, [pc, #272]	; (80020ec <BMP180_GetPress+0x444>)
 8001fda:	601a      	str	r2, [r3, #0]
	X1 = (Press/(pow(2,8)))*(Press/(pow(2,8)));
 8001fdc:	4b43      	ldr	r3, [pc, #268]	; (80020ec <BMP180_GetPress+0x444>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7fe faa7 	bl	8000534 <__aeabi_i2d>
 8001fe6:	f04f 0200 	mov.w	r2, #0
 8001fea:	4b41      	ldr	r3, [pc, #260]	; (80020f0 <BMP180_GetPress+0x448>)
 8001fec:	f7fe fc36 	bl	800085c <__aeabi_ddiv>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	4614      	mov	r4, r2
 8001ff6:	461d      	mov	r5, r3
 8001ff8:	4b3c      	ldr	r3, [pc, #240]	; (80020ec <BMP180_GetPress+0x444>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7fe fa99 	bl	8000534 <__aeabi_i2d>
 8002002:	f04f 0200 	mov.w	r2, #0
 8002006:	4b3a      	ldr	r3, [pc, #232]	; (80020f0 <BMP180_GetPress+0x448>)
 8002008:	f7fe fc28 	bl	800085c <__aeabi_ddiv>
 800200c:	4602      	mov	r2, r0
 800200e:	460b      	mov	r3, r1
 8002010:	4620      	mov	r0, r4
 8002012:	4629      	mov	r1, r5
 8002014:	f7fe faf8 	bl	8000608 <__aeabi_dmul>
 8002018:	4602      	mov	r2, r0
 800201a:	460b      	mov	r3, r1
 800201c:	4610      	mov	r0, r2
 800201e:	4619      	mov	r1, r3
 8002020:	f7fe fda2 	bl	8000b68 <__aeabi_d2iz>
 8002024:	4603      	mov	r3, r0
 8002026:	4a33      	ldr	r2, [pc, #204]	; (80020f4 <BMP180_GetPress+0x44c>)
 8002028:	6013      	str	r3, [r2, #0]
	X1 = (X1*3038)/(pow(2,16));
 800202a:	4b32      	ldr	r3, [pc, #200]	; (80020f4 <BMP180_GetPress+0x44c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f640 32de 	movw	r2, #3038	; 0xbde
 8002032:	fb02 f303 	mul.w	r3, r2, r3
 8002036:	4618      	mov	r0, r3
 8002038:	f7fe fa7c 	bl	8000534 <__aeabi_i2d>
 800203c:	f04f 0200 	mov.w	r2, #0
 8002040:	4b2d      	ldr	r3, [pc, #180]	; (80020f8 <BMP180_GetPress+0x450>)
 8002042:	f7fe fc0b 	bl	800085c <__aeabi_ddiv>
 8002046:	4602      	mov	r2, r0
 8002048:	460b      	mov	r3, r1
 800204a:	4610      	mov	r0, r2
 800204c:	4619      	mov	r1, r3
 800204e:	f7fe fd8b 	bl	8000b68 <__aeabi_d2iz>
 8002052:	4603      	mov	r3, r0
 8002054:	4a27      	ldr	r2, [pc, #156]	; (80020f4 <BMP180_GetPress+0x44c>)
 8002056:	6013      	str	r3, [r2, #0]
	X2 = (-7357*Press)/(pow(2,16));
 8002058:	4b24      	ldr	r3, [pc, #144]	; (80020ec <BMP180_GetPress+0x444>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a27      	ldr	r2, [pc, #156]	; (80020fc <BMP180_GetPress+0x454>)
 800205e:	fb02 f303 	mul.w	r3, r2, r3
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe fa66 	bl	8000534 <__aeabi_i2d>
 8002068:	f04f 0200 	mov.w	r2, #0
 800206c:	4b22      	ldr	r3, [pc, #136]	; (80020f8 <BMP180_GetPress+0x450>)
 800206e:	f7fe fbf5 	bl	800085c <__aeabi_ddiv>
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	4610      	mov	r0, r2
 8002078:	4619      	mov	r1, r3
 800207a:	f7fe fd75 	bl	8000b68 <__aeabi_d2iz>
 800207e:	4603      	mov	r3, r0
 8002080:	4a1f      	ldr	r2, [pc, #124]	; (8002100 <BMP180_GetPress+0x458>)
 8002082:	6013      	str	r3, [r2, #0]
	Press = Press + (X1+X2+3791)/(pow(2,4));
 8002084:	4b19      	ldr	r3, [pc, #100]	; (80020ec <BMP180_GetPress+0x444>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4618      	mov	r0, r3
 800208a:	f7fe fa53 	bl	8000534 <__aeabi_i2d>
 800208e:	4604      	mov	r4, r0
 8002090:	460d      	mov	r5, r1
 8002092:	4b18      	ldr	r3, [pc, #96]	; (80020f4 <BMP180_GetPress+0x44c>)
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	4b1a      	ldr	r3, [pc, #104]	; (8002100 <BMP180_GetPress+0x458>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4413      	add	r3, r2
 800209c:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7fe fa47 	bl	8000534 <__aeabi_i2d>
 80020a6:	f04f 0200 	mov.w	r2, #0
 80020aa:	4b16      	ldr	r3, [pc, #88]	; (8002104 <BMP180_GetPress+0x45c>)
 80020ac:	f7fe fbd6 	bl	800085c <__aeabi_ddiv>
 80020b0:	4602      	mov	r2, r0
 80020b2:	460b      	mov	r3, r1
 80020b4:	4620      	mov	r0, r4
 80020b6:	4629      	mov	r1, r5
 80020b8:	f7fe f8f0 	bl	800029c <__adddf3>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	4610      	mov	r0, r2
 80020c2:	4619      	mov	r1, r3
 80020c4:	f7fe fd50 	bl	8000b68 <__aeabi_d2iz>
 80020c8:	4603      	mov	r3, r0
 80020ca:	4a08      	ldr	r2, [pc, #32]	; (80020ec <BMP180_GetPress+0x444>)
 80020cc:	6013      	str	r3, [r2, #0]

	return Press;
 80020ce:	4b07      	ldr	r3, [pc, #28]	; (80020ec <BMP180_GetPress+0x444>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	ee07 3a90 	vmov	s15, r3
 80020d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80020da:	eeb0 0a67 	vmov.f32	s0, s15
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bdb0      	pop	{r4, r5, r7, pc}
 80020e4:	200001d0 	.word	0x200001d0
 80020e8:	200001c8 	.word	0x200001c8
 80020ec:	200001d4 	.word	0x200001d4
 80020f0:	40700000 	.word	0x40700000
 80020f4:	200001b4 	.word	0x200001b4
 80020f8:	40f00000 	.word	0x40f00000
 80020fc:	ffffe343 	.word	0xffffe343
 8002100:	200001b8 	.word	0x200001b8
 8002104:	40300000 	.word	0x40300000

08002108 <BMP180_GetAlt>:


float BMP180_GetAlt (int oss)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
	BMP180_GetPress (oss);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f7ff fdc9 	bl	8001ca8 <BMP180_GetPress>
	return 44330*(1-(pow((Press/(float)atmPress), 0.19029495718)));
 8002116:	4b1e      	ldr	r3, [pc, #120]	; (8002190 <BMP180_GetAlt+0x88>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	ee07 3a90 	vmov	s15, r3
 800211e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002122:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002194 <BMP180_GetAlt+0x8c>
 8002126:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800212a:	ee16 0a90 	vmov	r0, s13
 800212e:	f7fe fa13 	bl	8000558 <__aeabi_f2d>
 8002132:	4602      	mov	r2, r0
 8002134:	460b      	mov	r3, r1
 8002136:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8002180 <BMP180_GetAlt+0x78>
 800213a:	ec43 2b10 	vmov	d0, r2, r3
 800213e:	f003 fc89 	bl	8005a54 <pow>
 8002142:	ec53 2b10 	vmov	r2, r3, d0
 8002146:	f04f 0000 	mov.w	r0, #0
 800214a:	4913      	ldr	r1, [pc, #76]	; (8002198 <BMP180_GetAlt+0x90>)
 800214c:	f7fe f8a4 	bl	8000298 <__aeabi_dsub>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	4610      	mov	r0, r2
 8002156:	4619      	mov	r1, r3
 8002158:	a30b      	add	r3, pc, #44	; (adr r3, 8002188 <BMP180_GetAlt+0x80>)
 800215a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800215e:	f7fe fa53 	bl	8000608 <__aeabi_dmul>
 8002162:	4602      	mov	r2, r0
 8002164:	460b      	mov	r3, r1
 8002166:	4610      	mov	r0, r2
 8002168:	4619      	mov	r1, r3
 800216a:	f7fe fd45 	bl	8000bf8 <__aeabi_d2f>
 800216e:	4603      	mov	r3, r0
 8002170:	ee07 3a90 	vmov	s15, r3
}
 8002174:	eeb0 0a67 	vmov.f32	s0, s15
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	ccd745e4 	.word	0xccd745e4
 8002184:	3fc85b95 	.word	0x3fc85b95
 8002188:	00000000 	.word	0x00000000
 800218c:	40e5a540 	.word	0x40e5a540
 8002190:	200001d4 	.word	0x200001d4
 8002194:	47c5e680 	.word	0x47c5e680
 8002198:	3ff00000 	.word	0x3ff00000

0800219c <BMP180_Start>:

void BMP180_Start (void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
	read_calliberation_data();
 80021a0:	f7ff fbb6 	bl	8001910 <read_calliberation_data>
}
 80021a4:	bf00      	nop
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af02      	add	r7, sp, #8
 80021ae:	4603      	mov	r3, r0
 80021b0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80021b2:	79fb      	ldrb	r3, [r7, #7]
 80021b4:	f023 030f 	bic.w	r3, r3, #15
 80021b8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80021ba:	79fb      	ldrb	r3, [r7, #7]
 80021bc:	011b      	lsls	r3, r3, #4
 80021be:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80021c0:	7bfb      	ldrb	r3, [r7, #15]
 80021c2:	f043 030c 	orr.w	r3, r3, #12
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80021ca:	7bfb      	ldrb	r3, [r7, #15]
 80021cc:	f043 0308 	orr.w	r3, r3, #8
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80021d4:	7bbb      	ldrb	r3, [r7, #14]
 80021d6:	f043 030c 	orr.w	r3, r3, #12
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80021de:	7bbb      	ldrb	r3, [r7, #14]
 80021e0:	f043 0308 	orr.w	r3, r3, #8
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80021e8:	f107 0208 	add.w	r2, r7, #8
 80021ec:	2364      	movs	r3, #100	; 0x64
 80021ee:	9300      	str	r3, [sp, #0]
 80021f0:	2304      	movs	r3, #4
 80021f2:	214e      	movs	r1, #78	; 0x4e
 80021f4:	4803      	ldr	r0, [pc, #12]	; (8002204 <lcd_send_cmd+0x5c>)
 80021f6:	f000 fd1f 	bl	8002c38 <HAL_I2C_Master_Transmit>
}
 80021fa:	bf00      	nop
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	2000008c 	.word	0x2000008c

08002208 <lcd_send_data>:

void lcd_send_data (char data)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af02      	add	r7, sp, #8
 800220e:	4603      	mov	r3, r0
 8002210:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8002212:	79fb      	ldrb	r3, [r7, #7]
 8002214:	f023 030f 	bic.w	r3, r3, #15
 8002218:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800221a:	79fb      	ldrb	r3, [r7, #7]
 800221c:	011b      	lsls	r3, r3, #4
 800221e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8002220:	7bfb      	ldrb	r3, [r7, #15]
 8002222:	f043 030d 	orr.w	r3, r3, #13
 8002226:	b2db      	uxtb	r3, r3
 8002228:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 800222a:	7bfb      	ldrb	r3, [r7, #15]
 800222c:	f043 0309 	orr.w	r3, r3, #9
 8002230:	b2db      	uxtb	r3, r3
 8002232:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8002234:	7bbb      	ldrb	r3, [r7, #14]
 8002236:	f043 030d 	orr.w	r3, r3, #13
 800223a:	b2db      	uxtb	r3, r3
 800223c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 800223e:	7bbb      	ldrb	r3, [r7, #14]
 8002240:	f043 0309 	orr.w	r3, r3, #9
 8002244:	b2db      	uxtb	r3, r3
 8002246:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002248:	f107 0208 	add.w	r2, r7, #8
 800224c:	2364      	movs	r3, #100	; 0x64
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	2304      	movs	r3, #4
 8002252:	214e      	movs	r1, #78	; 0x4e
 8002254:	4803      	ldr	r0, [pc, #12]	; (8002264 <lcd_send_data+0x5c>)
 8002256:	f000 fcef 	bl	8002c38 <HAL_I2C_Master_Transmit>
}
 800225a:	bf00      	nop
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	2000008c 	.word	0x2000008c

08002268 <lcd_clear>:

void lcd_clear (void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x00);
 800226e:	2000      	movs	r0, #0
 8002270:	f7ff ff9a 	bl	80021a8 <lcd_send_cmd>
	for (int i=0; i<100; i++)
 8002274:	2300      	movs	r3, #0
 8002276:	607b      	str	r3, [r7, #4]
 8002278:	e005      	b.n	8002286 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800227a:	2020      	movs	r0, #32
 800227c:	f7ff ffc4 	bl	8002208 <lcd_send_data>
	for (int i=0; i<100; i++)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3301      	adds	r3, #1
 8002284:	607b      	str	r3, [r7, #4]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2b63      	cmp	r3, #99	; 0x63
 800228a:	ddf6      	ble.n	800227a <lcd_clear+0x12>
	}
}
 800228c:	bf00      	nop
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <lcd_send_string>:
	HAL_Delay(1);
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
}

void lcd_send_string (char *str)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800229e:	e006      	b.n	80022ae <lcd_send_string+0x18>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	1c5a      	adds	r2, r3, #1
 80022a4:	607a      	str	r2, [r7, #4]
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff ffad 	bl	8002208 <lcd_send_data>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f4      	bne.n	80022a0 <lcd_send_string+0xa>
}
 80022b6:	bf00      	nop
 80022b8:	bf00      	nop
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022c4:	4b0e      	ldr	r3, [pc, #56]	; (8002300 <HAL_Init+0x40>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a0d      	ldr	r2, [pc, #52]	; (8002300 <HAL_Init+0x40>)
 80022ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022d0:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <HAL_Init+0x40>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a0a      	ldr	r2, [pc, #40]	; (8002300 <HAL_Init+0x40>)
 80022d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022dc:	4b08      	ldr	r3, [pc, #32]	; (8002300 <HAL_Init+0x40>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a07      	ldr	r2, [pc, #28]	; (8002300 <HAL_Init+0x40>)
 80022e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022e8:	2003      	movs	r0, #3
 80022ea:	f000 f94f 	bl	800258c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022ee:	2000      	movs	r0, #0
 80022f0:	f000 f808 	bl	8002304 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022f4:	f7ff f804 	bl	8001300 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40023c00 	.word	0x40023c00

08002304 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800230c:	4b12      	ldr	r3, [pc, #72]	; (8002358 <HAL_InitTick+0x54>)
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	4b12      	ldr	r3, [pc, #72]	; (800235c <HAL_InitTick+0x58>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	4619      	mov	r1, r3
 8002316:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800231a:	fbb3 f3f1 	udiv	r3, r3, r1
 800231e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002322:	4618      	mov	r0, r3
 8002324:	f000 f967 	bl	80025f6 <HAL_SYSTICK_Config>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e00e      	b.n	8002350 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b0f      	cmp	r3, #15
 8002336:	d80a      	bhi.n	800234e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002338:	2200      	movs	r2, #0
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002340:	f000 f92f 	bl	80025a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002344:	4a06      	ldr	r2, [pc, #24]	; (8002360 <HAL_InitTick+0x5c>)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800234a:	2300      	movs	r3, #0
 800234c:	e000      	b.n	8002350 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
}
 8002350:	4618      	mov	r0, r3
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	20000000 	.word	0x20000000
 800235c:	20000008 	.word	0x20000008
 8002360:	20000004 	.word	0x20000004

08002364 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <HAL_IncTick+0x20>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	461a      	mov	r2, r3
 800236e:	4b06      	ldr	r3, [pc, #24]	; (8002388 <HAL_IncTick+0x24>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4413      	add	r3, r2
 8002374:	4a04      	ldr	r2, [pc, #16]	; (8002388 <HAL_IncTick+0x24>)
 8002376:	6013      	str	r3, [r2, #0]
}
 8002378:	bf00      	nop
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	20000008 	.word	0x20000008
 8002388:	200001dc 	.word	0x200001dc

0800238c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  return uwTick;
 8002390:	4b03      	ldr	r3, [pc, #12]	; (80023a0 <HAL_GetTick+0x14>)
 8002392:	681b      	ldr	r3, [r3, #0]
}
 8002394:	4618      	mov	r0, r3
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	200001dc 	.word	0x200001dc

080023a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023ac:	f7ff ffee 	bl	800238c <HAL_GetTick>
 80023b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023bc:	d005      	beq.n	80023ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023be:	4b0a      	ldr	r3, [pc, #40]	; (80023e8 <HAL_Delay+0x44>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	461a      	mov	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	4413      	add	r3, r2
 80023c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023ca:	bf00      	nop
 80023cc:	f7ff ffde 	bl	800238c <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d8f7      	bhi.n	80023cc <HAL_Delay+0x28>
  {
  }
}
 80023dc:	bf00      	nop
 80023de:	bf00      	nop
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	20000008 	.word	0x20000008

080023ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023fc:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <__NVIC_SetPriorityGrouping+0x44>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002408:	4013      	ands	r3, r2
 800240a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002414:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800241c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800241e:	4a04      	ldr	r2, [pc, #16]	; (8002430 <__NVIC_SetPriorityGrouping+0x44>)
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	60d3      	str	r3, [r2, #12]
}
 8002424:	bf00      	nop
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	e000ed00 	.word	0xe000ed00

08002434 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002438:	4b04      	ldr	r3, [pc, #16]	; (800244c <__NVIC_GetPriorityGrouping+0x18>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	0a1b      	lsrs	r3, r3, #8
 800243e:	f003 0307 	and.w	r3, r3, #7
}
 8002442:	4618      	mov	r0, r3
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	e000ed00 	.word	0xe000ed00

08002450 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800245a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245e:	2b00      	cmp	r3, #0
 8002460:	db0b      	blt.n	800247a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002462:	79fb      	ldrb	r3, [r7, #7]
 8002464:	f003 021f 	and.w	r2, r3, #31
 8002468:	4907      	ldr	r1, [pc, #28]	; (8002488 <__NVIC_EnableIRQ+0x38>)
 800246a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246e:	095b      	lsrs	r3, r3, #5
 8002470:	2001      	movs	r0, #1
 8002472:	fa00 f202 	lsl.w	r2, r0, r2
 8002476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	e000e100 	.word	0xe000e100

0800248c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	4603      	mov	r3, r0
 8002494:	6039      	str	r1, [r7, #0]
 8002496:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249c:	2b00      	cmp	r3, #0
 800249e:	db0a      	blt.n	80024b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	b2da      	uxtb	r2, r3
 80024a4:	490c      	ldr	r1, [pc, #48]	; (80024d8 <__NVIC_SetPriority+0x4c>)
 80024a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024aa:	0112      	lsls	r2, r2, #4
 80024ac:	b2d2      	uxtb	r2, r2
 80024ae:	440b      	add	r3, r1
 80024b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024b4:	e00a      	b.n	80024cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	4908      	ldr	r1, [pc, #32]	; (80024dc <__NVIC_SetPriority+0x50>)
 80024bc:	79fb      	ldrb	r3, [r7, #7]
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	3b04      	subs	r3, #4
 80024c4:	0112      	lsls	r2, r2, #4
 80024c6:	b2d2      	uxtb	r2, r2
 80024c8:	440b      	add	r3, r1
 80024ca:	761a      	strb	r2, [r3, #24]
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	e000e100 	.word	0xe000e100
 80024dc:	e000ed00 	.word	0xe000ed00

080024e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b089      	sub	sp, #36	; 0x24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f003 0307 	and.w	r3, r3, #7
 80024f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	f1c3 0307 	rsb	r3, r3, #7
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	bf28      	it	cs
 80024fe:	2304      	movcs	r3, #4
 8002500:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	3304      	adds	r3, #4
 8002506:	2b06      	cmp	r3, #6
 8002508:	d902      	bls.n	8002510 <NVIC_EncodePriority+0x30>
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	3b03      	subs	r3, #3
 800250e:	e000      	b.n	8002512 <NVIC_EncodePriority+0x32>
 8002510:	2300      	movs	r3, #0
 8002512:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002514:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	43da      	mvns	r2, r3
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	401a      	ands	r2, r3
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002528:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	fa01 f303 	lsl.w	r3, r1, r3
 8002532:	43d9      	mvns	r1, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002538:	4313      	orrs	r3, r2
         );
}
 800253a:	4618      	mov	r0, r3
 800253c:	3724      	adds	r7, #36	; 0x24
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
	...

08002548 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3b01      	subs	r3, #1
 8002554:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002558:	d301      	bcc.n	800255e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800255a:	2301      	movs	r3, #1
 800255c:	e00f      	b.n	800257e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800255e:	4a0a      	ldr	r2, [pc, #40]	; (8002588 <SysTick_Config+0x40>)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3b01      	subs	r3, #1
 8002564:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002566:	210f      	movs	r1, #15
 8002568:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800256c:	f7ff ff8e 	bl	800248c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002570:	4b05      	ldr	r3, [pc, #20]	; (8002588 <SysTick_Config+0x40>)
 8002572:	2200      	movs	r2, #0
 8002574:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002576:	4b04      	ldr	r3, [pc, #16]	; (8002588 <SysTick_Config+0x40>)
 8002578:	2207      	movs	r2, #7
 800257a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	e000e010 	.word	0xe000e010

0800258c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f7ff ff29 	bl	80023ec <__NVIC_SetPriorityGrouping>
}
 800259a:	bf00      	nop
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b086      	sub	sp, #24
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	4603      	mov	r3, r0
 80025aa:	60b9      	str	r1, [r7, #8]
 80025ac:	607a      	str	r2, [r7, #4]
 80025ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025b0:	2300      	movs	r3, #0
 80025b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025b4:	f7ff ff3e 	bl	8002434 <__NVIC_GetPriorityGrouping>
 80025b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	68b9      	ldr	r1, [r7, #8]
 80025be:	6978      	ldr	r0, [r7, #20]
 80025c0:	f7ff ff8e 	bl	80024e0 <NVIC_EncodePriority>
 80025c4:	4602      	mov	r2, r0
 80025c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ca:	4611      	mov	r1, r2
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff ff5d 	bl	800248c <__NVIC_SetPriority>
}
 80025d2:	bf00      	nop
 80025d4:	3718      	adds	r7, #24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b082      	sub	sp, #8
 80025de:	af00      	add	r7, sp, #0
 80025e0:	4603      	mov	r3, r0
 80025e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff ff31 	bl	8002450 <__NVIC_EnableIRQ>
}
 80025ee:	bf00      	nop
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b082      	sub	sp, #8
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7ff ffa2 	bl	8002548 <SysTick_Config>
 8002604:	4603      	mov	r3, r0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
	...

08002610 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002610:	b480      	push	{r7}
 8002612:	b089      	sub	sp, #36	; 0x24
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800261a:	2300      	movs	r3, #0
 800261c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800261e:	2300      	movs	r3, #0
 8002620:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002622:	2300      	movs	r3, #0
 8002624:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002626:	2300      	movs	r3, #0
 8002628:	61fb      	str	r3, [r7, #28]
 800262a:	e159      	b.n	80028e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800262c:	2201      	movs	r2, #1
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	4013      	ands	r3, r2
 800263e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	429a      	cmp	r2, r3
 8002646:	f040 8148 	bne.w	80028da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f003 0303 	and.w	r3, r3, #3
 8002652:	2b01      	cmp	r3, #1
 8002654:	d005      	beq.n	8002662 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800265e:	2b02      	cmp	r3, #2
 8002660:	d130      	bne.n	80026c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	2203      	movs	r2, #3
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43db      	mvns	r3, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4013      	ands	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	68da      	ldr	r2, [r3, #12]
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4313      	orrs	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002698:	2201      	movs	r2, #1
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	43db      	mvns	r3, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4013      	ands	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	091b      	lsrs	r3, r3, #4
 80026ae:	f003 0201 	and.w	r2, r3, #1
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f003 0303 	and.w	r3, r3, #3
 80026cc:	2b03      	cmp	r3, #3
 80026ce:	d017      	beq.n	8002700 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	2203      	movs	r2, #3
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4013      	ands	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	689a      	ldr	r2, [r3, #8]
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 0303 	and.w	r3, r3, #3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d123      	bne.n	8002754 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	08da      	lsrs	r2, r3, #3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3208      	adds	r2, #8
 8002714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002718:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	220f      	movs	r2, #15
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	43db      	mvns	r3, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4013      	ands	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	691a      	ldr	r2, [r3, #16]
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4313      	orrs	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	08da      	lsrs	r2, r3, #3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	3208      	adds	r2, #8
 800274e:	69b9      	ldr	r1, [r7, #24]
 8002750:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	2203      	movs	r2, #3
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43db      	mvns	r3, r3
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4013      	ands	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f003 0203 	and.w	r2, r3, #3
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	4313      	orrs	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 80a2 	beq.w	80028da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	60fb      	str	r3, [r7, #12]
 800279a:	4b57      	ldr	r3, [pc, #348]	; (80028f8 <HAL_GPIO_Init+0x2e8>)
 800279c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279e:	4a56      	ldr	r2, [pc, #344]	; (80028f8 <HAL_GPIO_Init+0x2e8>)
 80027a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027a4:	6453      	str	r3, [r2, #68]	; 0x44
 80027a6:	4b54      	ldr	r3, [pc, #336]	; (80028f8 <HAL_GPIO_Init+0x2e8>)
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027b2:	4a52      	ldr	r2, [pc, #328]	; (80028fc <HAL_GPIO_Init+0x2ec>)
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	089b      	lsrs	r3, r3, #2
 80027b8:	3302      	adds	r3, #2
 80027ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	f003 0303 	and.w	r3, r3, #3
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	220f      	movs	r2, #15
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	43db      	mvns	r3, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4013      	ands	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a49      	ldr	r2, [pc, #292]	; (8002900 <HAL_GPIO_Init+0x2f0>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d019      	beq.n	8002812 <HAL_GPIO_Init+0x202>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a48      	ldr	r2, [pc, #288]	; (8002904 <HAL_GPIO_Init+0x2f4>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d013      	beq.n	800280e <HAL_GPIO_Init+0x1fe>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a47      	ldr	r2, [pc, #284]	; (8002908 <HAL_GPIO_Init+0x2f8>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d00d      	beq.n	800280a <HAL_GPIO_Init+0x1fa>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a46      	ldr	r2, [pc, #280]	; (800290c <HAL_GPIO_Init+0x2fc>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d007      	beq.n	8002806 <HAL_GPIO_Init+0x1f6>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a45      	ldr	r2, [pc, #276]	; (8002910 <HAL_GPIO_Init+0x300>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d101      	bne.n	8002802 <HAL_GPIO_Init+0x1f2>
 80027fe:	2304      	movs	r3, #4
 8002800:	e008      	b.n	8002814 <HAL_GPIO_Init+0x204>
 8002802:	2307      	movs	r3, #7
 8002804:	e006      	b.n	8002814 <HAL_GPIO_Init+0x204>
 8002806:	2303      	movs	r3, #3
 8002808:	e004      	b.n	8002814 <HAL_GPIO_Init+0x204>
 800280a:	2302      	movs	r3, #2
 800280c:	e002      	b.n	8002814 <HAL_GPIO_Init+0x204>
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <HAL_GPIO_Init+0x204>
 8002812:	2300      	movs	r3, #0
 8002814:	69fa      	ldr	r2, [r7, #28]
 8002816:	f002 0203 	and.w	r2, r2, #3
 800281a:	0092      	lsls	r2, r2, #2
 800281c:	4093      	lsls	r3, r2
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	4313      	orrs	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002824:	4935      	ldr	r1, [pc, #212]	; (80028fc <HAL_GPIO_Init+0x2ec>)
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	089b      	lsrs	r3, r3, #2
 800282a:	3302      	adds	r3, #2
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002832:	4b38      	ldr	r3, [pc, #224]	; (8002914 <HAL_GPIO_Init+0x304>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	43db      	mvns	r3, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4013      	ands	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	4313      	orrs	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002856:	4a2f      	ldr	r2, [pc, #188]	; (8002914 <HAL_GPIO_Init+0x304>)
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800285c:	4b2d      	ldr	r3, [pc, #180]	; (8002914 <HAL_GPIO_Init+0x304>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	43db      	mvns	r3, r3
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	4013      	ands	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d003      	beq.n	8002880 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	4313      	orrs	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002880:	4a24      	ldr	r2, [pc, #144]	; (8002914 <HAL_GPIO_Init+0x304>)
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002886:	4b23      	ldr	r3, [pc, #140]	; (8002914 <HAL_GPIO_Init+0x304>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	43db      	mvns	r3, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4013      	ands	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028aa:	4a1a      	ldr	r2, [pc, #104]	; (8002914 <HAL_GPIO_Init+0x304>)
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028b0:	4b18      	ldr	r3, [pc, #96]	; (8002914 <HAL_GPIO_Init+0x304>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	43db      	mvns	r3, r3
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4013      	ands	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d003      	beq.n	80028d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028d4:	4a0f      	ldr	r2, [pc, #60]	; (8002914 <HAL_GPIO_Init+0x304>)
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	3301      	adds	r3, #1
 80028de:	61fb      	str	r3, [r7, #28]
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	2b0f      	cmp	r3, #15
 80028e4:	f67f aea2 	bls.w	800262c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028e8:	bf00      	nop
 80028ea:	bf00      	nop
 80028ec:	3724      	adds	r7, #36	; 0x24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	40023800 	.word	0x40023800
 80028fc:	40013800 	.word	0x40013800
 8002900:	40020000 	.word	0x40020000
 8002904:	40020400 	.word	0x40020400
 8002908:	40020800 	.word	0x40020800
 800290c:	40020c00 	.word	0x40020c00
 8002910:	40021000 	.word	0x40021000
 8002914:	40013c00 	.word	0x40013c00

08002918 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	460b      	mov	r3, r1
 8002922:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	691a      	ldr	r2, [r3, #16]
 8002928:	887b      	ldrh	r3, [r7, #2]
 800292a:	4013      	ands	r3, r2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d002      	beq.n	8002936 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002930:	2301      	movs	r3, #1
 8002932:	73fb      	strb	r3, [r7, #15]
 8002934:	e001      	b.n	800293a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002936:	2300      	movs	r3, #0
 8002938:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800293a:	7bfb      	ldrb	r3, [r7, #15]
}
 800293c:	4618      	mov	r0, r3
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	460b      	mov	r3, r1
 8002952:	807b      	strh	r3, [r7, #2]
 8002954:	4613      	mov	r3, r2
 8002956:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002958:	787b      	ldrb	r3, [r7, #1]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800295e:	887a      	ldrh	r2, [r7, #2]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002964:	e003      	b.n	800296e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002966:	887b      	ldrh	r3, [r7, #2]
 8002968:	041a      	lsls	r2, r3, #16
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	619a      	str	r2, [r3, #24]
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800297a:	b480      	push	{r7}
 800297c:	b085      	sub	sp, #20
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
 8002982:	460b      	mov	r3, r1
 8002984:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800298c:	887a      	ldrh	r2, [r7, #2]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	4013      	ands	r3, r2
 8002992:	041a      	lsls	r2, r3, #16
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	43d9      	mvns	r1, r3
 8002998:	887b      	ldrh	r3, [r7, #2]
 800299a:	400b      	ands	r3, r1
 800299c:	431a      	orrs	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	619a      	str	r2, [r3, #24]
}
 80029a2:	bf00      	nop
 80029a4:	3714      	adds	r7, #20
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
	...

080029b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e12b      	b.n	8002c1a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d106      	bne.n	80029dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7fe fcba 	bl	8001350 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2224      	movs	r2, #36	; 0x24
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 0201 	bic.w	r2, r2, #1
 80029f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a14:	f001 fd7c 	bl	8004510 <HAL_RCC_GetPCLK1Freq>
 8002a18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	4a81      	ldr	r2, [pc, #516]	; (8002c24 <HAL_I2C_Init+0x274>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d807      	bhi.n	8002a34 <HAL_I2C_Init+0x84>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4a80      	ldr	r2, [pc, #512]	; (8002c28 <HAL_I2C_Init+0x278>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	bf94      	ite	ls
 8002a2c:	2301      	movls	r3, #1
 8002a2e:	2300      	movhi	r3, #0
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	e006      	b.n	8002a42 <HAL_I2C_Init+0x92>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4a7d      	ldr	r2, [pc, #500]	; (8002c2c <HAL_I2C_Init+0x27c>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	bf94      	ite	ls
 8002a3c:	2301      	movls	r3, #1
 8002a3e:	2300      	movhi	r3, #0
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e0e7      	b.n	8002c1a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	4a78      	ldr	r2, [pc, #480]	; (8002c30 <HAL_I2C_Init+0x280>)
 8002a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a52:	0c9b      	lsrs	r3, r3, #18
 8002a54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68ba      	ldr	r2, [r7, #8]
 8002a66:	430a      	orrs	r2, r1
 8002a68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	4a6a      	ldr	r2, [pc, #424]	; (8002c24 <HAL_I2C_Init+0x274>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d802      	bhi.n	8002a84 <HAL_I2C_Init+0xd4>
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	3301      	adds	r3, #1
 8002a82:	e009      	b.n	8002a98 <HAL_I2C_Init+0xe8>
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a8a:	fb02 f303 	mul.w	r3, r2, r3
 8002a8e:	4a69      	ldr	r2, [pc, #420]	; (8002c34 <HAL_I2C_Init+0x284>)
 8002a90:	fba2 2303 	umull	r2, r3, r2, r3
 8002a94:	099b      	lsrs	r3, r3, #6
 8002a96:	3301      	adds	r3, #1
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	6812      	ldr	r2, [r2, #0]
 8002a9c:	430b      	orrs	r3, r1
 8002a9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	69db      	ldr	r3, [r3, #28]
 8002aa6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002aaa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	495c      	ldr	r1, [pc, #368]	; (8002c24 <HAL_I2C_Init+0x274>)
 8002ab4:	428b      	cmp	r3, r1
 8002ab6:	d819      	bhi.n	8002aec <HAL_I2C_Init+0x13c>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	1e59      	subs	r1, r3, #1
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ac6:	1c59      	adds	r1, r3, #1
 8002ac8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002acc:	400b      	ands	r3, r1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00a      	beq.n	8002ae8 <HAL_I2C_Init+0x138>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	1e59      	subs	r1, r3, #1
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae6:	e051      	b.n	8002b8c <HAL_I2C_Init+0x1dc>
 8002ae8:	2304      	movs	r3, #4
 8002aea:	e04f      	b.n	8002b8c <HAL_I2C_Init+0x1dc>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d111      	bne.n	8002b18 <HAL_I2C_Init+0x168>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	1e58      	subs	r0, r3, #1
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6859      	ldr	r1, [r3, #4]
 8002afc:	460b      	mov	r3, r1
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	440b      	add	r3, r1
 8002b02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b06:	3301      	adds	r3, #1
 8002b08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	bf0c      	ite	eq
 8002b10:	2301      	moveq	r3, #1
 8002b12:	2300      	movne	r3, #0
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	e012      	b.n	8002b3e <HAL_I2C_Init+0x18e>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	1e58      	subs	r0, r3, #1
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6859      	ldr	r1, [r3, #4]
 8002b20:	460b      	mov	r3, r1
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	0099      	lsls	r1, r3, #2
 8002b28:	440b      	add	r3, r1
 8002b2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b2e:	3301      	adds	r3, #1
 8002b30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	bf0c      	ite	eq
 8002b38:	2301      	moveq	r3, #1
 8002b3a:	2300      	movne	r3, #0
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <HAL_I2C_Init+0x196>
 8002b42:	2301      	movs	r3, #1
 8002b44:	e022      	b.n	8002b8c <HAL_I2C_Init+0x1dc>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10e      	bne.n	8002b6c <HAL_I2C_Init+0x1bc>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	1e58      	subs	r0, r3, #1
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6859      	ldr	r1, [r3, #4]
 8002b56:	460b      	mov	r3, r1
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	440b      	add	r3, r1
 8002b5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b60:	3301      	adds	r3, #1
 8002b62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b6a:	e00f      	b.n	8002b8c <HAL_I2C_Init+0x1dc>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	1e58      	subs	r0, r3, #1
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6859      	ldr	r1, [r3, #4]
 8002b74:	460b      	mov	r3, r1
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	0099      	lsls	r1, r3, #2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b82:	3301      	adds	r3, #1
 8002b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	6809      	ldr	r1, [r1, #0]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	69da      	ldr	r2, [r3, #28]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002bba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	6911      	ldr	r1, [r2, #16]
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	68d2      	ldr	r2, [r2, #12]
 8002bc6:	4311      	orrs	r1, r2
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6812      	ldr	r2, [r2, #0]
 8002bcc:	430b      	orrs	r3, r1
 8002bce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	695a      	ldr	r2, [r3, #20]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	431a      	orrs	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0201 	orr.w	r2, r2, #1
 8002bfa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2220      	movs	r2, #32
 8002c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	000186a0 	.word	0x000186a0
 8002c28:	001e847f 	.word	0x001e847f
 8002c2c:	003d08ff 	.word	0x003d08ff
 8002c30:	431bde83 	.word	0x431bde83
 8002c34:	10624dd3 	.word	0x10624dd3

08002c38 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b088      	sub	sp, #32
 8002c3c:	af02      	add	r7, sp, #8
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	607a      	str	r2, [r7, #4]
 8002c42:	461a      	mov	r2, r3
 8002c44:	460b      	mov	r3, r1
 8002c46:	817b      	strh	r3, [r7, #10]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c4c:	f7ff fb9e 	bl	800238c <HAL_GetTick>
 8002c50:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b20      	cmp	r3, #32
 8002c5c:	f040 80e0 	bne.w	8002e20 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	2319      	movs	r3, #25
 8002c66:	2201      	movs	r2, #1
 8002c68:	4970      	ldr	r1, [pc, #448]	; (8002e2c <HAL_I2C_Master_Transmit+0x1f4>)
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 fe02 	bl	8003874 <I2C_WaitOnFlagUntilTimeout>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c76:	2302      	movs	r3, #2
 8002c78:	e0d3      	b.n	8002e22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d101      	bne.n	8002c88 <HAL_I2C_Master_Transmit+0x50>
 8002c84:	2302      	movs	r3, #2
 8002c86:	e0cc      	b.n	8002e22 <HAL_I2C_Master_Transmit+0x1ea>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d007      	beq.n	8002cae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f042 0201 	orr.w	r2, r2, #1
 8002cac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cbc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2221      	movs	r2, #33	; 0x21
 8002cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2210      	movs	r2, #16
 8002cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	893a      	ldrh	r2, [r7, #8]
 8002cde:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	4a50      	ldr	r2, [pc, #320]	; (8002e30 <HAL_I2C_Master_Transmit+0x1f8>)
 8002cee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002cf0:	8979      	ldrh	r1, [r7, #10]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	6a3a      	ldr	r2, [r7, #32]
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f000 fbbc 	bl	8003474 <I2C_MasterRequestWrite>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e08d      	b.n	8002e22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d06:	2300      	movs	r3, #0
 8002d08:	613b      	str	r3, [r7, #16]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	613b      	str	r3, [r7, #16]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	613b      	str	r3, [r7, #16]
 8002d1a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d1c:	e066      	b.n	8002dec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	6a39      	ldr	r1, [r7, #32]
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 fe7c 	bl	8003a20 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00d      	beq.n	8002d4a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	2b04      	cmp	r3, #4
 8002d34:	d107      	bne.n	8002d46 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d44:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e06b      	b.n	8002e22 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4e:	781a      	ldrb	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5a:	1c5a      	adds	r2, r3, #1
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	3b01      	subs	r3, #1
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d72:	3b01      	subs	r3, #1
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	f003 0304 	and.w	r3, r3, #4
 8002d84:	2b04      	cmp	r3, #4
 8002d86:	d11b      	bne.n	8002dc0 <HAL_I2C_Master_Transmit+0x188>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d017      	beq.n	8002dc0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	781a      	ldrb	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	1c5a      	adds	r2, r3, #1
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	3b01      	subs	r3, #1
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db8:	3b01      	subs	r3, #1
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	6a39      	ldr	r1, [r7, #32]
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f000 fe6c 	bl	8003aa2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00d      	beq.n	8002dec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd4:	2b04      	cmp	r3, #4
 8002dd6:	d107      	bne.n	8002de8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002de6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e01a      	b.n	8002e22 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d194      	bne.n	8002d1e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2220      	movs	r2, #32
 8002e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	e000      	b.n	8002e22 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e20:	2302      	movs	r3, #2
  }
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3718      	adds	r7, #24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	00100002 	.word	0x00100002
 8002e30:	ffff0000 	.word	0xffff0000

08002e34 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b088      	sub	sp, #32
 8002e38:	af02      	add	r7, sp, #8
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	4608      	mov	r0, r1
 8002e3e:	4611      	mov	r1, r2
 8002e40:	461a      	mov	r2, r3
 8002e42:	4603      	mov	r3, r0
 8002e44:	817b      	strh	r3, [r7, #10]
 8002e46:	460b      	mov	r3, r1
 8002e48:	813b      	strh	r3, [r7, #8]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e4e:	f7ff fa9d 	bl	800238c <HAL_GetTick>
 8002e52:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b20      	cmp	r3, #32
 8002e5e:	f040 80d9 	bne.w	8003014 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	2319      	movs	r3, #25
 8002e68:	2201      	movs	r2, #1
 8002e6a:	496d      	ldr	r1, [pc, #436]	; (8003020 <HAL_I2C_Mem_Write+0x1ec>)
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f000 fd01 	bl	8003874 <I2C_WaitOnFlagUntilTimeout>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002e78:	2302      	movs	r3, #2
 8002e7a:	e0cc      	b.n	8003016 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d101      	bne.n	8002e8a <HAL_I2C_Mem_Write+0x56>
 8002e86:	2302      	movs	r3, #2
 8002e88:	e0c5      	b.n	8003016 <HAL_I2C_Mem_Write+0x1e2>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d007      	beq.n	8002eb0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f042 0201 	orr.w	r2, r2, #1
 8002eae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ebe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2221      	movs	r2, #33	; 0x21
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2240      	movs	r2, #64	; 0x40
 8002ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6a3a      	ldr	r2, [r7, #32]
 8002eda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ee0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	4a4d      	ldr	r2, [pc, #308]	; (8003024 <HAL_I2C_Mem_Write+0x1f0>)
 8002ef0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ef2:	88f8      	ldrh	r0, [r7, #6]
 8002ef4:	893a      	ldrh	r2, [r7, #8]
 8002ef6:	8979      	ldrh	r1, [r7, #10]
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	9301      	str	r3, [sp, #4]
 8002efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	4603      	mov	r3, r0
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f000 fb38 	bl	8003578 <I2C_RequestMemoryWrite>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d052      	beq.n	8002fb4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e081      	b.n	8003016 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 fd82 	bl	8003a20 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00d      	beq.n	8002f3e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	d107      	bne.n	8002f3a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e06b      	b.n	8003016 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	781a      	ldrb	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4e:	1c5a      	adds	r2, r3, #1
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	3b01      	subs	r3, #1
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b04      	cmp	r3, #4
 8002f7a:	d11b      	bne.n	8002fb4 <HAL_I2C_Mem_Write+0x180>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d017      	beq.n	8002fb4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f88:	781a      	ldrb	r2, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f94:	1c5a      	adds	r2, r3, #1
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	3b01      	subs	r3, #1
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1aa      	bne.n	8002f12 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f000 fd6e 	bl	8003aa2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00d      	beq.n	8002fe8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd0:	2b04      	cmp	r3, #4
 8002fd2:	d107      	bne.n	8002fe4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fe2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e016      	b.n	8003016 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ff6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003010:	2300      	movs	r3, #0
 8003012:	e000      	b.n	8003016 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003014:	2302      	movs	r3, #2
  }
}
 8003016:	4618      	mov	r0, r3
 8003018:	3718      	adds	r7, #24
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	00100002 	.word	0x00100002
 8003024:	ffff0000 	.word	0xffff0000

08003028 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b08c      	sub	sp, #48	; 0x30
 800302c:	af02      	add	r7, sp, #8
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	4608      	mov	r0, r1
 8003032:	4611      	mov	r1, r2
 8003034:	461a      	mov	r2, r3
 8003036:	4603      	mov	r3, r0
 8003038:	817b      	strh	r3, [r7, #10]
 800303a:	460b      	mov	r3, r1
 800303c:	813b      	strh	r3, [r7, #8]
 800303e:	4613      	mov	r3, r2
 8003040:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003042:	f7ff f9a3 	bl	800238c <HAL_GetTick>
 8003046:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b20      	cmp	r3, #32
 8003052:	f040 8208 	bne.w	8003466 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	2319      	movs	r3, #25
 800305c:	2201      	movs	r2, #1
 800305e:	497b      	ldr	r1, [pc, #492]	; (800324c <HAL_I2C_Mem_Read+0x224>)
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f000 fc07 	bl	8003874 <I2C_WaitOnFlagUntilTimeout>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d001      	beq.n	8003070 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800306c:	2302      	movs	r3, #2
 800306e:	e1fb      	b.n	8003468 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003076:	2b01      	cmp	r3, #1
 8003078:	d101      	bne.n	800307e <HAL_I2C_Mem_Read+0x56>
 800307a:	2302      	movs	r3, #2
 800307c:	e1f4      	b.n	8003468 <HAL_I2C_Mem_Read+0x440>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b01      	cmp	r3, #1
 8003092:	d007      	beq.n	80030a4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f042 0201 	orr.w	r2, r2, #1
 80030a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2222      	movs	r2, #34	; 0x22
 80030b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2240      	movs	r2, #64	; 0x40
 80030c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80030d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030da:	b29a      	uxth	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4a5b      	ldr	r2, [pc, #364]	; (8003250 <HAL_I2C_Mem_Read+0x228>)
 80030e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030e6:	88f8      	ldrh	r0, [r7, #6]
 80030e8:	893a      	ldrh	r2, [r7, #8]
 80030ea:	8979      	ldrh	r1, [r7, #10]
 80030ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ee:	9301      	str	r3, [sp, #4]
 80030f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	4603      	mov	r3, r0
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f000 fad4 	bl	80036a4 <I2C_RequestMemoryRead>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e1b0      	b.n	8003468 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800310a:	2b00      	cmp	r3, #0
 800310c:	d113      	bne.n	8003136 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800310e:	2300      	movs	r3, #0
 8003110:	623b      	str	r3, [r7, #32]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	623b      	str	r3, [r7, #32]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	623b      	str	r3, [r7, #32]
 8003122:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	e184      	b.n	8003440 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800313a:	2b01      	cmp	r3, #1
 800313c:	d11b      	bne.n	8003176 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800314c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800314e:	2300      	movs	r3, #0
 8003150:	61fb      	str	r3, [r7, #28]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	61fb      	str	r3, [r7, #28]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	61fb      	str	r3, [r7, #28]
 8003162:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	e164      	b.n	8003440 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800317a:	2b02      	cmp	r3, #2
 800317c:	d11b      	bne.n	80031b6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800318c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800319c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800319e:	2300      	movs	r3, #0
 80031a0:	61bb      	str	r3, [r7, #24]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	61bb      	str	r3, [r7, #24]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	61bb      	str	r3, [r7, #24]
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	e144      	b.n	8003440 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031b6:	2300      	movs	r3, #0
 80031b8:	617b      	str	r3, [r7, #20]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	617b      	str	r3, [r7, #20]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	617b      	str	r3, [r7, #20]
 80031ca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80031cc:	e138      	b.n	8003440 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d2:	2b03      	cmp	r3, #3
 80031d4:	f200 80f1 	bhi.w	80033ba <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d123      	bne.n	8003228 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f000 fc9d 	bl	8003b24 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d001      	beq.n	80031f4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e139      	b.n	8003468 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	691a      	ldr	r2, [r3, #16]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	b2d2      	uxtb	r2, r2
 8003200:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003206:	1c5a      	adds	r2, r3, #1
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003210:	3b01      	subs	r3, #1
 8003212:	b29a      	uxth	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800321c:	b29b      	uxth	r3, r3
 800321e:	3b01      	subs	r3, #1
 8003220:	b29a      	uxth	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003226:	e10b      	b.n	8003440 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800322c:	2b02      	cmp	r3, #2
 800322e:	d14e      	bne.n	80032ce <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003236:	2200      	movs	r2, #0
 8003238:	4906      	ldr	r1, [pc, #24]	; (8003254 <HAL_I2C_Mem_Read+0x22c>)
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 fb1a 	bl	8003874 <I2C_WaitOnFlagUntilTimeout>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d008      	beq.n	8003258 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e10e      	b.n	8003468 <HAL_I2C_Mem_Read+0x440>
 800324a:	bf00      	nop
 800324c:	00100002 	.word	0x00100002
 8003250:	ffff0000 	.word	0xffff0000
 8003254:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003266:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	691a      	ldr	r2, [r3, #16]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003272:	b2d2      	uxtb	r2, r2
 8003274:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	1c5a      	adds	r2, r3, #1
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003284:	3b01      	subs	r3, #1
 8003286:	b29a      	uxth	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003290:	b29b      	uxth	r3, r3
 8003292:	3b01      	subs	r3, #1
 8003294:	b29a      	uxth	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	691a      	ldr	r2, [r3, #16]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a4:	b2d2      	uxtb	r2, r2
 80032a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	1c5a      	adds	r2, r3, #1
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b6:	3b01      	subs	r3, #1
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032cc:	e0b8      	b.n	8003440 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d4:	2200      	movs	r2, #0
 80032d6:	4966      	ldr	r1, [pc, #408]	; (8003470 <HAL_I2C_Mem_Read+0x448>)
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f000 facb 	bl	8003874 <I2C_WaitOnFlagUntilTimeout>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e0bf      	b.n	8003468 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	691a      	ldr	r2, [r3, #16]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003302:	b2d2      	uxtb	r2, r2
 8003304:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330a:	1c5a      	adds	r2, r3, #1
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003314:	3b01      	subs	r3, #1
 8003316:	b29a      	uxth	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003320:	b29b      	uxth	r3, r3
 8003322:	3b01      	subs	r3, #1
 8003324:	b29a      	uxth	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003330:	2200      	movs	r2, #0
 8003332:	494f      	ldr	r1, [pc, #316]	; (8003470 <HAL_I2C_Mem_Read+0x448>)
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	f000 fa9d 	bl	8003874 <I2C_WaitOnFlagUntilTimeout>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e091      	b.n	8003468 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003352:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	691a      	ldr	r2, [r3, #16]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335e:	b2d2      	uxtb	r2, r2
 8003360:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003366:	1c5a      	adds	r2, r3, #1
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003370:	3b01      	subs	r3, #1
 8003372:	b29a      	uxth	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800337c:	b29b      	uxth	r3, r3
 800337e:	3b01      	subs	r3, #1
 8003380:	b29a      	uxth	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	691a      	ldr	r2, [r3, #16]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003390:	b2d2      	uxtb	r2, r2
 8003392:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	1c5a      	adds	r2, r3, #1
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a2:	3b01      	subs	r3, #1
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	3b01      	subs	r3, #1
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033b8:	e042      	b.n	8003440 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f000 fbb0 	bl	8003b24 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e04c      	b.n	8003468 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	691a      	ldr	r2, [r3, #16]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d8:	b2d2      	uxtb	r2, r2
 80033da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e0:	1c5a      	adds	r2, r3, #1
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ea:	3b01      	subs	r3, #1
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	3b01      	subs	r3, #1
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	f003 0304 	and.w	r3, r3, #4
 800340a:	2b04      	cmp	r3, #4
 800340c:	d118      	bne.n	8003440 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	691a      	ldr	r2, [r3, #16]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	b2d2      	uxtb	r2, r2
 800341a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003420:	1c5a      	adds	r2, r3, #1
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800342a:	3b01      	subs	r3, #1
 800342c:	b29a      	uxth	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003436:	b29b      	uxth	r3, r3
 8003438:	3b01      	subs	r3, #1
 800343a:	b29a      	uxth	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003444:	2b00      	cmp	r3, #0
 8003446:	f47f aec2 	bne.w	80031ce <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2220      	movs	r2, #32
 800344e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003462:	2300      	movs	r3, #0
 8003464:	e000      	b.n	8003468 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003466:	2302      	movs	r3, #2
  }
}
 8003468:	4618      	mov	r0, r3
 800346a:	3728      	adds	r7, #40	; 0x28
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	00010004 	.word	0x00010004

08003474 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b088      	sub	sp, #32
 8003478:	af02      	add	r7, sp, #8
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	607a      	str	r2, [r7, #4]
 800347e:	603b      	str	r3, [r7, #0]
 8003480:	460b      	mov	r3, r1
 8003482:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003488:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	2b08      	cmp	r3, #8
 800348e:	d006      	beq.n	800349e <I2C_MasterRequestWrite+0x2a>
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d003      	beq.n	800349e <I2C_MasterRequestWrite+0x2a>
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800349c:	d108      	bne.n	80034b0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	e00b      	b.n	80034c8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b4:	2b12      	cmp	r3, #18
 80034b6:	d107      	bne.n	80034c8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f000 f9cd 	bl	8003874 <I2C_WaitOnFlagUntilTimeout>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00d      	beq.n	80034fc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034ee:	d103      	bne.n	80034f8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e035      	b.n	8003568 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003504:	d108      	bne.n	8003518 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003506:	897b      	ldrh	r3, [r7, #10]
 8003508:	b2db      	uxtb	r3, r3
 800350a:	461a      	mov	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003514:	611a      	str	r2, [r3, #16]
 8003516:	e01b      	b.n	8003550 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003518:	897b      	ldrh	r3, [r7, #10]
 800351a:	11db      	asrs	r3, r3, #7
 800351c:	b2db      	uxtb	r3, r3
 800351e:	f003 0306 	and.w	r3, r3, #6
 8003522:	b2db      	uxtb	r3, r3
 8003524:	f063 030f 	orn	r3, r3, #15
 8003528:	b2da      	uxtb	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	490e      	ldr	r1, [pc, #56]	; (8003570 <I2C_MasterRequestWrite+0xfc>)
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f000 f9f3 	bl	8003922 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e010      	b.n	8003568 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003546:	897b      	ldrh	r3, [r7, #10]
 8003548:	b2da      	uxtb	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	4907      	ldr	r1, [pc, #28]	; (8003574 <I2C_MasterRequestWrite+0x100>)
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 f9e3 	bl	8003922 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e000      	b.n	8003568 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3718      	adds	r7, #24
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	00010008 	.word	0x00010008
 8003574:	00010002 	.word	0x00010002

08003578 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b088      	sub	sp, #32
 800357c:	af02      	add	r7, sp, #8
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	4608      	mov	r0, r1
 8003582:	4611      	mov	r1, r2
 8003584:	461a      	mov	r2, r3
 8003586:	4603      	mov	r3, r0
 8003588:	817b      	strh	r3, [r7, #10]
 800358a:	460b      	mov	r3, r1
 800358c:	813b      	strh	r3, [r7, #8]
 800358e:	4613      	mov	r3, r2
 8003590:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	6a3b      	ldr	r3, [r7, #32]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f000 f960 	bl	8003874 <I2C_WaitOnFlagUntilTimeout>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00d      	beq.n	80035d6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035c8:	d103      	bne.n	80035d2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e05f      	b.n	8003696 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035d6:	897b      	ldrh	r3, [r7, #10]
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	461a      	mov	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e8:	6a3a      	ldr	r2, [r7, #32]
 80035ea:	492d      	ldr	r1, [pc, #180]	; (80036a0 <I2C_RequestMemoryWrite+0x128>)
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f000 f998 	bl	8003922 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e04c      	b.n	8003696 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035fc:	2300      	movs	r3, #0
 80035fe:	617b      	str	r3, [r7, #20]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	617b      	str	r3, [r7, #20]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	617b      	str	r3, [r7, #20]
 8003610:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003614:	6a39      	ldr	r1, [r7, #32]
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f000 fa02 	bl	8003a20 <I2C_WaitOnTXEFlagUntilTimeout>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00d      	beq.n	800363e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	2b04      	cmp	r3, #4
 8003628:	d107      	bne.n	800363a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003638:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e02b      	b.n	8003696 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800363e:	88fb      	ldrh	r3, [r7, #6]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d105      	bne.n	8003650 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003644:	893b      	ldrh	r3, [r7, #8]
 8003646:	b2da      	uxtb	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	611a      	str	r2, [r3, #16]
 800364e:	e021      	b.n	8003694 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003650:	893b      	ldrh	r3, [r7, #8]
 8003652:	0a1b      	lsrs	r3, r3, #8
 8003654:	b29b      	uxth	r3, r3
 8003656:	b2da      	uxtb	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800365e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003660:	6a39      	ldr	r1, [r7, #32]
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 f9dc 	bl	8003a20 <I2C_WaitOnTXEFlagUntilTimeout>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00d      	beq.n	800368a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	2b04      	cmp	r3, #4
 8003674:	d107      	bne.n	8003686 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003684:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e005      	b.n	8003696 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800368a:	893b      	ldrh	r3, [r7, #8]
 800368c:	b2da      	uxtb	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3718      	adds	r7, #24
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	00010002 	.word	0x00010002

080036a4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b088      	sub	sp, #32
 80036a8:	af02      	add	r7, sp, #8
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	4608      	mov	r0, r1
 80036ae:	4611      	mov	r1, r2
 80036b0:	461a      	mov	r2, r3
 80036b2:	4603      	mov	r3, r0
 80036b4:	817b      	strh	r3, [r7, #10]
 80036b6:	460b      	mov	r3, r1
 80036b8:	813b      	strh	r3, [r7, #8]
 80036ba:	4613      	mov	r3, r2
 80036bc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036cc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e0:	9300      	str	r3, [sp, #0]
 80036e2:	6a3b      	ldr	r3, [r7, #32]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 f8c2 	bl	8003874 <I2C_WaitOnFlagUntilTimeout>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00d      	beq.n	8003712 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003700:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003704:	d103      	bne.n	800370e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f44f 7200 	mov.w	r2, #512	; 0x200
 800370c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e0aa      	b.n	8003868 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003712:	897b      	ldrh	r3, [r7, #10]
 8003714:	b2db      	uxtb	r3, r3
 8003716:	461a      	mov	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003720:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003724:	6a3a      	ldr	r2, [r7, #32]
 8003726:	4952      	ldr	r1, [pc, #328]	; (8003870 <I2C_RequestMemoryRead+0x1cc>)
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f000 f8fa 	bl	8003922 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e097      	b.n	8003868 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003738:	2300      	movs	r3, #0
 800373a:	617b      	str	r3, [r7, #20]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	617b      	str	r3, [r7, #20]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	617b      	str	r3, [r7, #20]
 800374c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800374e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003750:	6a39      	ldr	r1, [r7, #32]
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 f964 	bl	8003a20 <I2C_WaitOnTXEFlagUntilTimeout>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00d      	beq.n	800377a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	2b04      	cmp	r3, #4
 8003764:	d107      	bne.n	8003776 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003774:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e076      	b.n	8003868 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800377a:	88fb      	ldrh	r3, [r7, #6]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d105      	bne.n	800378c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003780:	893b      	ldrh	r3, [r7, #8]
 8003782:	b2da      	uxtb	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	611a      	str	r2, [r3, #16]
 800378a:	e021      	b.n	80037d0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800378c:	893b      	ldrh	r3, [r7, #8]
 800378e:	0a1b      	lsrs	r3, r3, #8
 8003790:	b29b      	uxth	r3, r3
 8003792:	b2da      	uxtb	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800379a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800379c:	6a39      	ldr	r1, [r7, #32]
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 f93e 	bl	8003a20 <I2C_WaitOnTXEFlagUntilTimeout>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00d      	beq.n	80037c6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	d107      	bne.n	80037c2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e050      	b.n	8003868 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037c6:	893b      	ldrh	r3, [r7, #8]
 80037c8:	b2da      	uxtb	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037d2:	6a39      	ldr	r1, [r7, #32]
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 f923 	bl	8003a20 <I2C_WaitOnTXEFlagUntilTimeout>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00d      	beq.n	80037fc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e4:	2b04      	cmp	r3, #4
 80037e6:	d107      	bne.n	80037f8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037f6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e035      	b.n	8003868 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800380a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	6a3b      	ldr	r3, [r7, #32]
 8003812:	2200      	movs	r2, #0
 8003814:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f000 f82b 	bl	8003874 <I2C_WaitOnFlagUntilTimeout>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00d      	beq.n	8003840 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003832:	d103      	bne.n	800383c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f44f 7200 	mov.w	r2, #512	; 0x200
 800383a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e013      	b.n	8003868 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003840:	897b      	ldrh	r3, [r7, #10]
 8003842:	b2db      	uxtb	r3, r3
 8003844:	f043 0301 	orr.w	r3, r3, #1
 8003848:	b2da      	uxtb	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003852:	6a3a      	ldr	r2, [r7, #32]
 8003854:	4906      	ldr	r1, [pc, #24]	; (8003870 <I2C_RequestMemoryRead+0x1cc>)
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f000 f863 	bl	8003922 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e000      	b.n	8003868 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3718      	adds	r7, #24
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	00010002 	.word	0x00010002

08003874 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	603b      	str	r3, [r7, #0]
 8003880:	4613      	mov	r3, r2
 8003882:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003884:	e025      	b.n	80038d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800388c:	d021      	beq.n	80038d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800388e:	f7fe fd7d 	bl	800238c <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	429a      	cmp	r2, r3
 800389c:	d302      	bcc.n	80038a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d116      	bne.n	80038d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2220      	movs	r2, #32
 80038ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	f043 0220 	orr.w	r2, r3, #32
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e023      	b.n	800391a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	0c1b      	lsrs	r3, r3, #16
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d10d      	bne.n	80038f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	43da      	mvns	r2, r3
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	4013      	ands	r3, r2
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	bf0c      	ite	eq
 80038ee:	2301      	moveq	r3, #1
 80038f0:	2300      	movne	r3, #0
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	461a      	mov	r2, r3
 80038f6:	e00c      	b.n	8003912 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	43da      	mvns	r2, r3
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	4013      	ands	r3, r2
 8003904:	b29b      	uxth	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	bf0c      	ite	eq
 800390a:	2301      	moveq	r3, #1
 800390c:	2300      	movne	r3, #0
 800390e:	b2db      	uxtb	r3, r3
 8003910:	461a      	mov	r2, r3
 8003912:	79fb      	ldrb	r3, [r7, #7]
 8003914:	429a      	cmp	r2, r3
 8003916:	d0b6      	beq.n	8003886 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b084      	sub	sp, #16
 8003926:	af00      	add	r7, sp, #0
 8003928:	60f8      	str	r0, [r7, #12]
 800392a:	60b9      	str	r1, [r7, #8]
 800392c:	607a      	str	r2, [r7, #4]
 800392e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003930:	e051      	b.n	80039d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800393c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003940:	d123      	bne.n	800398a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003950:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800395a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2220      	movs	r2, #32
 8003966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	f043 0204 	orr.w	r2, r3, #4
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e046      	b.n	8003a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003990:	d021      	beq.n	80039d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003992:	f7fe fcfb 	bl	800238c <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d302      	bcc.n	80039a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d116      	bne.n	80039d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2220      	movs	r2, #32
 80039b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	f043 0220 	orr.w	r2, r3, #32
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e020      	b.n	8003a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	0c1b      	lsrs	r3, r3, #16
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d10c      	bne.n	80039fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	43da      	mvns	r2, r3
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	4013      	ands	r3, r2
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	bf14      	ite	ne
 80039f2:	2301      	movne	r3, #1
 80039f4:	2300      	moveq	r3, #0
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	e00b      	b.n	8003a12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	43da      	mvns	r2, r3
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	4013      	ands	r3, r2
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	bf14      	ite	ne
 8003a0c:	2301      	movne	r3, #1
 8003a0e:	2300      	moveq	r3, #0
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d18d      	bne.n	8003932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a2c:	e02d      	b.n	8003a8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f000 f8ce 	bl	8003bd0 <I2C_IsAcknowledgeFailed>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e02d      	b.n	8003a9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a44:	d021      	beq.n	8003a8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a46:	f7fe fca1 	bl	800238c <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	68ba      	ldr	r2, [r7, #8]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d302      	bcc.n	8003a5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d116      	bne.n	8003a8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2220      	movs	r2, #32
 8003a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	f043 0220 	orr.w	r2, r3, #32
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e007      	b.n	8003a9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	695b      	ldr	r3, [r3, #20]
 8003a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a94:	2b80      	cmp	r3, #128	; 0x80
 8003a96:	d1ca      	bne.n	8003a2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b084      	sub	sp, #16
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	60f8      	str	r0, [r7, #12]
 8003aaa:	60b9      	str	r1, [r7, #8]
 8003aac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003aae:	e02d      	b.n	8003b0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f000 f88d 	bl	8003bd0 <I2C_IsAcknowledgeFailed>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e02d      	b.n	8003b1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ac6:	d021      	beq.n	8003b0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ac8:	f7fe fc60 	bl	800238c <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	68ba      	ldr	r2, [r7, #8]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d302      	bcc.n	8003ade <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d116      	bne.n	8003b0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af8:	f043 0220 	orr.w	r2, r3, #32
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e007      	b.n	8003b1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	f003 0304 	and.w	r3, r3, #4
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	d1ca      	bne.n	8003ab0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b30:	e042      	b.n	8003bb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	f003 0310 	and.w	r3, r3, #16
 8003b3c:	2b10      	cmp	r3, #16
 8003b3e:	d119      	bne.n	8003b74 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f06f 0210 	mvn.w	r2, #16
 8003b48:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2220      	movs	r2, #32
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e029      	b.n	8003bc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b74:	f7fe fc0a 	bl	800238c <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	68ba      	ldr	r2, [r7, #8]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d302      	bcc.n	8003b8a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d116      	bne.n	8003bb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2220      	movs	r2, #32
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba4:	f043 0220 	orr.w	r2, r3, #32
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e007      	b.n	8003bc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc2:	2b40      	cmp	r3, #64	; 0x40
 8003bc4:	d1b5      	bne.n	8003b32 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003be2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003be6:	d11b      	bne.n	8003c20 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bf0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0c:	f043 0204 	orr.w	r2, r3, #4
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e000      	b.n	8003c22 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
	...

08003c30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e267      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d075      	beq.n	8003d3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c4e:	4b88      	ldr	r3, [pc, #544]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f003 030c 	and.w	r3, r3, #12
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	d00c      	beq.n	8003c74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c5a:	4b85      	ldr	r3, [pc, #532]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c62:	2b08      	cmp	r3, #8
 8003c64:	d112      	bne.n	8003c8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c66:	4b82      	ldr	r3, [pc, #520]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c72:	d10b      	bne.n	8003c8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c74:	4b7e      	ldr	r3, [pc, #504]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d05b      	beq.n	8003d38 <HAL_RCC_OscConfig+0x108>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d157      	bne.n	8003d38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e242      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c94:	d106      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x74>
 8003c96:	4b76      	ldr	r3, [pc, #472]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a75      	ldr	r2, [pc, #468]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ca0:	6013      	str	r3, [r2, #0]
 8003ca2:	e01d      	b.n	8003ce0 <HAL_RCC_OscConfig+0xb0>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cac:	d10c      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x98>
 8003cae:	4b70      	ldr	r3, [pc, #448]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a6f      	ldr	r2, [pc, #444]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003cb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cb8:	6013      	str	r3, [r2, #0]
 8003cba:	4b6d      	ldr	r3, [pc, #436]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a6c      	ldr	r2, [pc, #432]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cc4:	6013      	str	r3, [r2, #0]
 8003cc6:	e00b      	b.n	8003ce0 <HAL_RCC_OscConfig+0xb0>
 8003cc8:	4b69      	ldr	r3, [pc, #420]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a68      	ldr	r2, [pc, #416]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003cce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cd2:	6013      	str	r3, [r2, #0]
 8003cd4:	4b66      	ldr	r3, [pc, #408]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a65      	ldr	r2, [pc, #404]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003cda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d013      	beq.n	8003d10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce8:	f7fe fb50 	bl	800238c <HAL_GetTick>
 8003cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cf0:	f7fe fb4c 	bl	800238c <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b64      	cmp	r3, #100	; 0x64
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e207      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d02:	4b5b      	ldr	r3, [pc, #364]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d0f0      	beq.n	8003cf0 <HAL_RCC_OscConfig+0xc0>
 8003d0e:	e014      	b.n	8003d3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d10:	f7fe fb3c 	bl	800238c <HAL_GetTick>
 8003d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d16:	e008      	b.n	8003d2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d18:	f7fe fb38 	bl	800238c <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b64      	cmp	r3, #100	; 0x64
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e1f3      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d2a:	4b51      	ldr	r3, [pc, #324]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1f0      	bne.n	8003d18 <HAL_RCC_OscConfig+0xe8>
 8003d36:	e000      	b.n	8003d3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d063      	beq.n	8003e0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d46:	4b4a      	ldr	r3, [pc, #296]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f003 030c 	and.w	r3, r3, #12
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00b      	beq.n	8003d6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d52:	4b47      	ldr	r3, [pc, #284]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d5a:	2b08      	cmp	r3, #8
 8003d5c:	d11c      	bne.n	8003d98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d5e:	4b44      	ldr	r3, [pc, #272]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d116      	bne.n	8003d98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d6a:	4b41      	ldr	r3, [pc, #260]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d005      	beq.n	8003d82 <HAL_RCC_OscConfig+0x152>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d001      	beq.n	8003d82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e1c7      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d82:	4b3b      	ldr	r3, [pc, #236]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	4937      	ldr	r1, [pc, #220]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d96:	e03a      	b.n	8003e0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d020      	beq.n	8003de2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003da0:	4b34      	ldr	r3, [pc, #208]	; (8003e74 <HAL_RCC_OscConfig+0x244>)
 8003da2:	2201      	movs	r2, #1
 8003da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da6:	f7fe faf1 	bl	800238c <HAL_GetTick>
 8003daa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dac:	e008      	b.n	8003dc0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dae:	f7fe faed 	bl	800238c <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e1a8      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dc0:	4b2b      	ldr	r3, [pc, #172]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d0f0      	beq.n	8003dae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dcc:	4b28      	ldr	r3, [pc, #160]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	00db      	lsls	r3, r3, #3
 8003dda:	4925      	ldr	r1, [pc, #148]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	600b      	str	r3, [r1, #0]
 8003de0:	e015      	b.n	8003e0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003de2:	4b24      	ldr	r3, [pc, #144]	; (8003e74 <HAL_RCC_OscConfig+0x244>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de8:	f7fe fad0 	bl	800238c <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dee:	e008      	b.n	8003e02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003df0:	f7fe facc 	bl	800238c <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e187      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e02:	4b1b      	ldr	r3, [pc, #108]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1f0      	bne.n	8003df0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0308 	and.w	r3, r3, #8
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d036      	beq.n	8003e88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d016      	beq.n	8003e50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e22:	4b15      	ldr	r3, [pc, #84]	; (8003e78 <HAL_RCC_OscConfig+0x248>)
 8003e24:	2201      	movs	r2, #1
 8003e26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e28:	f7fe fab0 	bl	800238c <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e30:	f7fe faac 	bl	800238c <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e167      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e42:	4b0b      	ldr	r3, [pc, #44]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d0f0      	beq.n	8003e30 <HAL_RCC_OscConfig+0x200>
 8003e4e:	e01b      	b.n	8003e88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e50:	4b09      	ldr	r3, [pc, #36]	; (8003e78 <HAL_RCC_OscConfig+0x248>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e56:	f7fe fa99 	bl	800238c <HAL_GetTick>
 8003e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e5c:	e00e      	b.n	8003e7c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e5e:	f7fe fa95 	bl	800238c <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d907      	bls.n	8003e7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e150      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
 8003e70:	40023800 	.word	0x40023800
 8003e74:	42470000 	.word	0x42470000
 8003e78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e7c:	4b88      	ldr	r3, [pc, #544]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1ea      	bne.n	8003e5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0304 	and.w	r3, r3, #4
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f000 8097 	beq.w	8003fc4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e96:	2300      	movs	r3, #0
 8003e98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e9a:	4b81      	ldr	r3, [pc, #516]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10f      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	60bb      	str	r3, [r7, #8]
 8003eaa:	4b7d      	ldr	r3, [pc, #500]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	4a7c      	ldr	r2, [pc, #496]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8003eb6:	4b7a      	ldr	r3, [pc, #488]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ebe:	60bb      	str	r3, [r7, #8]
 8003ec0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ec6:	4b77      	ldr	r3, [pc, #476]	; (80040a4 <HAL_RCC_OscConfig+0x474>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d118      	bne.n	8003f04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ed2:	4b74      	ldr	r3, [pc, #464]	; (80040a4 <HAL_RCC_OscConfig+0x474>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a73      	ldr	r2, [pc, #460]	; (80040a4 <HAL_RCC_OscConfig+0x474>)
 8003ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003edc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ede:	f7fe fa55 	bl	800238c <HAL_GetTick>
 8003ee2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee4:	e008      	b.n	8003ef8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ee6:	f7fe fa51 	bl	800238c <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e10c      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ef8:	4b6a      	ldr	r3, [pc, #424]	; (80040a4 <HAL_RCC_OscConfig+0x474>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0f0      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d106      	bne.n	8003f1a <HAL_RCC_OscConfig+0x2ea>
 8003f0c:	4b64      	ldr	r3, [pc, #400]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f10:	4a63      	ldr	r2, [pc, #396]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f12:	f043 0301 	orr.w	r3, r3, #1
 8003f16:	6713      	str	r3, [r2, #112]	; 0x70
 8003f18:	e01c      	b.n	8003f54 <HAL_RCC_OscConfig+0x324>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	2b05      	cmp	r3, #5
 8003f20:	d10c      	bne.n	8003f3c <HAL_RCC_OscConfig+0x30c>
 8003f22:	4b5f      	ldr	r3, [pc, #380]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f26:	4a5e      	ldr	r2, [pc, #376]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f28:	f043 0304 	orr.w	r3, r3, #4
 8003f2c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f2e:	4b5c      	ldr	r3, [pc, #368]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f32:	4a5b      	ldr	r2, [pc, #364]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f34:	f043 0301 	orr.w	r3, r3, #1
 8003f38:	6713      	str	r3, [r2, #112]	; 0x70
 8003f3a:	e00b      	b.n	8003f54 <HAL_RCC_OscConfig+0x324>
 8003f3c:	4b58      	ldr	r3, [pc, #352]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f40:	4a57      	ldr	r2, [pc, #348]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f42:	f023 0301 	bic.w	r3, r3, #1
 8003f46:	6713      	str	r3, [r2, #112]	; 0x70
 8003f48:	4b55      	ldr	r3, [pc, #340]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4c:	4a54      	ldr	r2, [pc, #336]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f4e:	f023 0304 	bic.w	r3, r3, #4
 8003f52:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d015      	beq.n	8003f88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f5c:	f7fe fa16 	bl	800238c <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f62:	e00a      	b.n	8003f7a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f64:	f7fe fa12 	bl	800238c <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e0cb      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f7a:	4b49      	ldr	r3, [pc, #292]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0ee      	beq.n	8003f64 <HAL_RCC_OscConfig+0x334>
 8003f86:	e014      	b.n	8003fb2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f88:	f7fe fa00 	bl	800238c <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f8e:	e00a      	b.n	8003fa6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f90:	f7fe f9fc 	bl	800238c <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e0b5      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fa6:	4b3e      	ldr	r3, [pc, #248]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1ee      	bne.n	8003f90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fb2:	7dfb      	ldrb	r3, [r7, #23]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d105      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fb8:	4b39      	ldr	r3, [pc, #228]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbc:	4a38      	ldr	r2, [pc, #224]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003fbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fc2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 80a1 	beq.w	8004110 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fce:	4b34      	ldr	r3, [pc, #208]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f003 030c 	and.w	r3, r3, #12
 8003fd6:	2b08      	cmp	r3, #8
 8003fd8:	d05c      	beq.n	8004094 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d141      	bne.n	8004066 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fe2:	4b31      	ldr	r3, [pc, #196]	; (80040a8 <HAL_RCC_OscConfig+0x478>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe8:	f7fe f9d0 	bl	800238c <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ff0:	f7fe f9cc 	bl	800238c <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e087      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004002:	4b27      	ldr	r3, [pc, #156]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1f0      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	69da      	ldr	r2, [r3, #28]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	431a      	orrs	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401c:	019b      	lsls	r3, r3, #6
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004024:	085b      	lsrs	r3, r3, #1
 8004026:	3b01      	subs	r3, #1
 8004028:	041b      	lsls	r3, r3, #16
 800402a:	431a      	orrs	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004030:	061b      	lsls	r3, r3, #24
 8004032:	491b      	ldr	r1, [pc, #108]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8004034:	4313      	orrs	r3, r2
 8004036:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004038:	4b1b      	ldr	r3, [pc, #108]	; (80040a8 <HAL_RCC_OscConfig+0x478>)
 800403a:	2201      	movs	r2, #1
 800403c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800403e:	f7fe f9a5 	bl	800238c <HAL_GetTick>
 8004042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004044:	e008      	b.n	8004058 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004046:	f7fe f9a1 	bl	800238c <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d901      	bls.n	8004058 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e05c      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004058:	4b11      	ldr	r3, [pc, #68]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d0f0      	beq.n	8004046 <HAL_RCC_OscConfig+0x416>
 8004064:	e054      	b.n	8004110 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004066:	4b10      	ldr	r3, [pc, #64]	; (80040a8 <HAL_RCC_OscConfig+0x478>)
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800406c:	f7fe f98e 	bl	800238c <HAL_GetTick>
 8004070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004074:	f7fe f98a 	bl	800238c <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e045      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004086:	4b06      	ldr	r3, [pc, #24]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1f0      	bne.n	8004074 <HAL_RCC_OscConfig+0x444>
 8004092:	e03d      	b.n	8004110 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d107      	bne.n	80040ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e038      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
 80040a0:	40023800 	.word	0x40023800
 80040a4:	40007000 	.word	0x40007000
 80040a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040ac:	4b1b      	ldr	r3, [pc, #108]	; (800411c <HAL_RCC_OscConfig+0x4ec>)
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d028      	beq.n	800410c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d121      	bne.n	800410c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d11a      	bne.n	800410c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040dc:	4013      	ands	r3, r2
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d111      	bne.n	800410c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f2:	085b      	lsrs	r3, r3, #1
 80040f4:	3b01      	subs	r3, #1
 80040f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d107      	bne.n	800410c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004106:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004108:	429a      	cmp	r2, r3
 800410a:	d001      	beq.n	8004110 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e000      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3718      	adds	r7, #24
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	40023800 	.word	0x40023800

08004120 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d101      	bne.n	8004134 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e0cc      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004134:	4b68      	ldr	r3, [pc, #416]	; (80042d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0307 	and.w	r3, r3, #7
 800413c:	683a      	ldr	r2, [r7, #0]
 800413e:	429a      	cmp	r2, r3
 8004140:	d90c      	bls.n	800415c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004142:	4b65      	ldr	r3, [pc, #404]	; (80042d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	b2d2      	uxtb	r2, r2
 8004148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800414a:	4b63      	ldr	r3, [pc, #396]	; (80042d8 <HAL_RCC_ClockConfig+0x1b8>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0307 	and.w	r3, r3, #7
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	429a      	cmp	r2, r3
 8004156:	d001      	beq.n	800415c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e0b8      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d020      	beq.n	80041aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	2b00      	cmp	r3, #0
 8004172:	d005      	beq.n	8004180 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004174:	4b59      	ldr	r3, [pc, #356]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	4a58      	ldr	r2, [pc, #352]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 800417a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800417e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0308 	and.w	r3, r3, #8
 8004188:	2b00      	cmp	r3, #0
 800418a:	d005      	beq.n	8004198 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800418c:	4b53      	ldr	r3, [pc, #332]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	4a52      	ldr	r2, [pc, #328]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 8004192:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004196:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004198:	4b50      	ldr	r3, [pc, #320]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	494d      	ldr	r1, [pc, #308]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d044      	beq.n	8004240 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d107      	bne.n	80041ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041be:	4b47      	ldr	r3, [pc, #284]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d119      	bne.n	80041fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e07f      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d003      	beq.n	80041de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041da:	2b03      	cmp	r3, #3
 80041dc:	d107      	bne.n	80041ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041de:	4b3f      	ldr	r3, [pc, #252]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d109      	bne.n	80041fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e06f      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ee:	4b3b      	ldr	r3, [pc, #236]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e067      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041fe:	4b37      	ldr	r3, [pc, #220]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f023 0203 	bic.w	r2, r3, #3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	4934      	ldr	r1, [pc, #208]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 800420c:	4313      	orrs	r3, r2
 800420e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004210:	f7fe f8bc 	bl	800238c <HAL_GetTick>
 8004214:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004216:	e00a      	b.n	800422e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004218:	f7fe f8b8 	bl	800238c <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	f241 3288 	movw	r2, #5000	; 0x1388
 8004226:	4293      	cmp	r3, r2
 8004228:	d901      	bls.n	800422e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e04f      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800422e:	4b2b      	ldr	r3, [pc, #172]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f003 020c 	and.w	r2, r3, #12
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	429a      	cmp	r2, r3
 800423e:	d1eb      	bne.n	8004218 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004240:	4b25      	ldr	r3, [pc, #148]	; (80042d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0307 	and.w	r3, r3, #7
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	429a      	cmp	r2, r3
 800424c:	d20c      	bcs.n	8004268 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800424e:	4b22      	ldr	r3, [pc, #136]	; (80042d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	b2d2      	uxtb	r2, r2
 8004254:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004256:	4b20      	ldr	r3, [pc, #128]	; (80042d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0307 	and.w	r3, r3, #7
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	429a      	cmp	r2, r3
 8004262:	d001      	beq.n	8004268 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e032      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0304 	and.w	r3, r3, #4
 8004270:	2b00      	cmp	r3, #0
 8004272:	d008      	beq.n	8004286 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004274:	4b19      	ldr	r3, [pc, #100]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	4916      	ldr	r1, [pc, #88]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 8004282:	4313      	orrs	r3, r2
 8004284:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0308 	and.w	r3, r3, #8
 800428e:	2b00      	cmp	r3, #0
 8004290:	d009      	beq.n	80042a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004292:	4b12      	ldr	r3, [pc, #72]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	490e      	ldr	r1, [pc, #56]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042a6:	f000 f821 	bl	80042ec <HAL_RCC_GetSysClockFreq>
 80042aa:	4602      	mov	r2, r0
 80042ac:	4b0b      	ldr	r3, [pc, #44]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	091b      	lsrs	r3, r3, #4
 80042b2:	f003 030f 	and.w	r3, r3, #15
 80042b6:	490a      	ldr	r1, [pc, #40]	; (80042e0 <HAL_RCC_ClockConfig+0x1c0>)
 80042b8:	5ccb      	ldrb	r3, [r1, r3]
 80042ba:	fa22 f303 	lsr.w	r3, r2, r3
 80042be:	4a09      	ldr	r2, [pc, #36]	; (80042e4 <HAL_RCC_ClockConfig+0x1c4>)
 80042c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042c2:	4b09      	ldr	r3, [pc, #36]	; (80042e8 <HAL_RCC_ClockConfig+0x1c8>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7fe f81c 	bl	8002304 <HAL_InitTick>

  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	40023c00 	.word	0x40023c00
 80042dc:	40023800 	.word	0x40023800
 80042e0:	08006948 	.word	0x08006948
 80042e4:	20000000 	.word	0x20000000
 80042e8:	20000004 	.word	0x20000004

080042ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042f0:	b094      	sub	sp, #80	; 0x50
 80042f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042f4:	2300      	movs	r3, #0
 80042f6:	647b      	str	r3, [r7, #68]	; 0x44
 80042f8:	2300      	movs	r3, #0
 80042fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042fc:	2300      	movs	r3, #0
 80042fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004300:	2300      	movs	r3, #0
 8004302:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004304:	4b79      	ldr	r3, [pc, #484]	; (80044ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f003 030c 	and.w	r3, r3, #12
 800430c:	2b08      	cmp	r3, #8
 800430e:	d00d      	beq.n	800432c <HAL_RCC_GetSysClockFreq+0x40>
 8004310:	2b08      	cmp	r3, #8
 8004312:	f200 80e1 	bhi.w	80044d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004316:	2b00      	cmp	r3, #0
 8004318:	d002      	beq.n	8004320 <HAL_RCC_GetSysClockFreq+0x34>
 800431a:	2b04      	cmp	r3, #4
 800431c:	d003      	beq.n	8004326 <HAL_RCC_GetSysClockFreq+0x3a>
 800431e:	e0db      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004320:	4b73      	ldr	r3, [pc, #460]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004322:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004324:	e0db      	b.n	80044de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004326:	4b73      	ldr	r3, [pc, #460]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004328:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800432a:	e0d8      	b.n	80044de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800432c:	4b6f      	ldr	r3, [pc, #444]	; (80044ec <HAL_RCC_GetSysClockFreq+0x200>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004334:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004336:	4b6d      	ldr	r3, [pc, #436]	; (80044ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d063      	beq.n	800440a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004342:	4b6a      	ldr	r3, [pc, #424]	; (80044ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	099b      	lsrs	r3, r3, #6
 8004348:	2200      	movs	r2, #0
 800434a:	63bb      	str	r3, [r7, #56]	; 0x38
 800434c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800434e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004350:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004354:	633b      	str	r3, [r7, #48]	; 0x30
 8004356:	2300      	movs	r3, #0
 8004358:	637b      	str	r3, [r7, #52]	; 0x34
 800435a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800435e:	4622      	mov	r2, r4
 8004360:	462b      	mov	r3, r5
 8004362:	f04f 0000 	mov.w	r0, #0
 8004366:	f04f 0100 	mov.w	r1, #0
 800436a:	0159      	lsls	r1, r3, #5
 800436c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004370:	0150      	lsls	r0, r2, #5
 8004372:	4602      	mov	r2, r0
 8004374:	460b      	mov	r3, r1
 8004376:	4621      	mov	r1, r4
 8004378:	1a51      	subs	r1, r2, r1
 800437a:	6139      	str	r1, [r7, #16]
 800437c:	4629      	mov	r1, r5
 800437e:	eb63 0301 	sbc.w	r3, r3, r1
 8004382:	617b      	str	r3, [r7, #20]
 8004384:	f04f 0200 	mov.w	r2, #0
 8004388:	f04f 0300 	mov.w	r3, #0
 800438c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004390:	4659      	mov	r1, fp
 8004392:	018b      	lsls	r3, r1, #6
 8004394:	4651      	mov	r1, sl
 8004396:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800439a:	4651      	mov	r1, sl
 800439c:	018a      	lsls	r2, r1, #6
 800439e:	4651      	mov	r1, sl
 80043a0:	ebb2 0801 	subs.w	r8, r2, r1
 80043a4:	4659      	mov	r1, fp
 80043a6:	eb63 0901 	sbc.w	r9, r3, r1
 80043aa:	f04f 0200 	mov.w	r2, #0
 80043ae:	f04f 0300 	mov.w	r3, #0
 80043b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043be:	4690      	mov	r8, r2
 80043c0:	4699      	mov	r9, r3
 80043c2:	4623      	mov	r3, r4
 80043c4:	eb18 0303 	adds.w	r3, r8, r3
 80043c8:	60bb      	str	r3, [r7, #8]
 80043ca:	462b      	mov	r3, r5
 80043cc:	eb49 0303 	adc.w	r3, r9, r3
 80043d0:	60fb      	str	r3, [r7, #12]
 80043d2:	f04f 0200 	mov.w	r2, #0
 80043d6:	f04f 0300 	mov.w	r3, #0
 80043da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80043de:	4629      	mov	r1, r5
 80043e0:	024b      	lsls	r3, r1, #9
 80043e2:	4621      	mov	r1, r4
 80043e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043e8:	4621      	mov	r1, r4
 80043ea:	024a      	lsls	r2, r1, #9
 80043ec:	4610      	mov	r0, r2
 80043ee:	4619      	mov	r1, r3
 80043f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043f2:	2200      	movs	r2, #0
 80043f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80043f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043fc:	f7fc fc4c 	bl	8000c98 <__aeabi_uldivmod>
 8004400:	4602      	mov	r2, r0
 8004402:	460b      	mov	r3, r1
 8004404:	4613      	mov	r3, r2
 8004406:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004408:	e058      	b.n	80044bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800440a:	4b38      	ldr	r3, [pc, #224]	; (80044ec <HAL_RCC_GetSysClockFreq+0x200>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	099b      	lsrs	r3, r3, #6
 8004410:	2200      	movs	r2, #0
 8004412:	4618      	mov	r0, r3
 8004414:	4611      	mov	r1, r2
 8004416:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800441a:	623b      	str	r3, [r7, #32]
 800441c:	2300      	movs	r3, #0
 800441e:	627b      	str	r3, [r7, #36]	; 0x24
 8004420:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004424:	4642      	mov	r2, r8
 8004426:	464b      	mov	r3, r9
 8004428:	f04f 0000 	mov.w	r0, #0
 800442c:	f04f 0100 	mov.w	r1, #0
 8004430:	0159      	lsls	r1, r3, #5
 8004432:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004436:	0150      	lsls	r0, r2, #5
 8004438:	4602      	mov	r2, r0
 800443a:	460b      	mov	r3, r1
 800443c:	4641      	mov	r1, r8
 800443e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004442:	4649      	mov	r1, r9
 8004444:	eb63 0b01 	sbc.w	fp, r3, r1
 8004448:	f04f 0200 	mov.w	r2, #0
 800444c:	f04f 0300 	mov.w	r3, #0
 8004450:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004454:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004458:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800445c:	ebb2 040a 	subs.w	r4, r2, sl
 8004460:	eb63 050b 	sbc.w	r5, r3, fp
 8004464:	f04f 0200 	mov.w	r2, #0
 8004468:	f04f 0300 	mov.w	r3, #0
 800446c:	00eb      	lsls	r3, r5, #3
 800446e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004472:	00e2      	lsls	r2, r4, #3
 8004474:	4614      	mov	r4, r2
 8004476:	461d      	mov	r5, r3
 8004478:	4643      	mov	r3, r8
 800447a:	18e3      	adds	r3, r4, r3
 800447c:	603b      	str	r3, [r7, #0]
 800447e:	464b      	mov	r3, r9
 8004480:	eb45 0303 	adc.w	r3, r5, r3
 8004484:	607b      	str	r3, [r7, #4]
 8004486:	f04f 0200 	mov.w	r2, #0
 800448a:	f04f 0300 	mov.w	r3, #0
 800448e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004492:	4629      	mov	r1, r5
 8004494:	028b      	lsls	r3, r1, #10
 8004496:	4621      	mov	r1, r4
 8004498:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800449c:	4621      	mov	r1, r4
 800449e:	028a      	lsls	r2, r1, #10
 80044a0:	4610      	mov	r0, r2
 80044a2:	4619      	mov	r1, r3
 80044a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044a6:	2200      	movs	r2, #0
 80044a8:	61bb      	str	r3, [r7, #24]
 80044aa:	61fa      	str	r2, [r7, #28]
 80044ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044b0:	f7fc fbf2 	bl	8000c98 <__aeabi_uldivmod>
 80044b4:	4602      	mov	r2, r0
 80044b6:	460b      	mov	r3, r1
 80044b8:	4613      	mov	r3, r2
 80044ba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044bc:	4b0b      	ldr	r3, [pc, #44]	; (80044ec <HAL_RCC_GetSysClockFreq+0x200>)
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	0c1b      	lsrs	r3, r3, #16
 80044c2:	f003 0303 	and.w	r3, r3, #3
 80044c6:	3301      	adds	r3, #1
 80044c8:	005b      	lsls	r3, r3, #1
 80044ca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80044cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044d6:	e002      	b.n	80044de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044d8:	4b05      	ldr	r3, [pc, #20]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80044da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3750      	adds	r7, #80	; 0x50
 80044e4:	46bd      	mov	sp, r7
 80044e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044ea:	bf00      	nop
 80044ec:	40023800 	.word	0x40023800
 80044f0:	00f42400 	.word	0x00f42400
 80044f4:	007a1200 	.word	0x007a1200

080044f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044f8:	b480      	push	{r7}
 80044fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044fc:	4b03      	ldr	r3, [pc, #12]	; (800450c <HAL_RCC_GetHCLKFreq+0x14>)
 80044fe:	681b      	ldr	r3, [r3, #0]
}
 8004500:	4618      	mov	r0, r3
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	20000000 	.word	0x20000000

08004510 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004514:	f7ff fff0 	bl	80044f8 <HAL_RCC_GetHCLKFreq>
 8004518:	4602      	mov	r2, r0
 800451a:	4b05      	ldr	r3, [pc, #20]	; (8004530 <HAL_RCC_GetPCLK1Freq+0x20>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	0a9b      	lsrs	r3, r3, #10
 8004520:	f003 0307 	and.w	r3, r3, #7
 8004524:	4903      	ldr	r1, [pc, #12]	; (8004534 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004526:	5ccb      	ldrb	r3, [r1, r3]
 8004528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800452c:	4618      	mov	r0, r3
 800452e:	bd80      	pop	{r7, pc}
 8004530:	40023800 	.word	0x40023800
 8004534:	08006958 	.word	0x08006958

08004538 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800453c:	f7ff ffdc 	bl	80044f8 <HAL_RCC_GetHCLKFreq>
 8004540:	4602      	mov	r2, r0
 8004542:	4b05      	ldr	r3, [pc, #20]	; (8004558 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	0b5b      	lsrs	r3, r3, #13
 8004548:	f003 0307 	and.w	r3, r3, #7
 800454c:	4903      	ldr	r1, [pc, #12]	; (800455c <HAL_RCC_GetPCLK2Freq+0x24>)
 800454e:	5ccb      	ldrb	r3, [r1, r3]
 8004550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004554:	4618      	mov	r0, r3
 8004556:	bd80      	pop	{r7, pc}
 8004558:	40023800 	.word	0x40023800
 800455c:	08006958 	.word	0x08006958

08004560 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e041      	b.n	80045f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d106      	bne.n	800458c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f7fc ff2a 	bl	80013e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2202      	movs	r2, #2
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	3304      	adds	r3, #4
 800459c:	4619      	mov	r1, r3
 800459e:	4610      	mov	r0, r2
 80045a0:	f000 f95e 	bl	8004860 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3708      	adds	r7, #8
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b082      	sub	sp, #8
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	2b02      	cmp	r3, #2
 8004612:	d122      	bne.n	800465a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b02      	cmp	r3, #2
 8004620:	d11b      	bne.n	800465a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f06f 0202 	mvn.w	r2, #2
 800462a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	f003 0303 	and.w	r3, r3, #3
 800463c:	2b00      	cmp	r3, #0
 800463e:	d003      	beq.n	8004648 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 f8ee 	bl	8004822 <HAL_TIM_IC_CaptureCallback>
 8004646:	e005      	b.n	8004654 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 f8e0 	bl	800480e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f8f1 	bl	8004836 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	f003 0304 	and.w	r3, r3, #4
 8004664:	2b04      	cmp	r3, #4
 8004666:	d122      	bne.n	80046ae <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	f003 0304 	and.w	r3, r3, #4
 8004672:	2b04      	cmp	r3, #4
 8004674:	d11b      	bne.n	80046ae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f06f 0204 	mvn.w	r2, #4
 800467e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2202      	movs	r2, #2
 8004684:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004690:	2b00      	cmp	r3, #0
 8004692:	d003      	beq.n	800469c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 f8c4 	bl	8004822 <HAL_TIM_IC_CaptureCallback>
 800469a:	e005      	b.n	80046a8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f000 f8b6 	bl	800480e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f8c7 	bl	8004836 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	f003 0308 	and.w	r3, r3, #8
 80046b8:	2b08      	cmp	r3, #8
 80046ba:	d122      	bne.n	8004702 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	f003 0308 	and.w	r3, r3, #8
 80046c6:	2b08      	cmp	r3, #8
 80046c8:	d11b      	bne.n	8004702 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f06f 0208 	mvn.w	r2, #8
 80046d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2204      	movs	r2, #4
 80046d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	f003 0303 	and.w	r3, r3, #3
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d003      	beq.n	80046f0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 f89a 	bl	8004822 <HAL_TIM_IC_CaptureCallback>
 80046ee:	e005      	b.n	80046fc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 f88c 	bl	800480e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f89d 	bl	8004836 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	f003 0310 	and.w	r3, r3, #16
 800470c:	2b10      	cmp	r3, #16
 800470e:	d122      	bne.n	8004756 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	f003 0310 	and.w	r3, r3, #16
 800471a:	2b10      	cmp	r3, #16
 800471c:	d11b      	bne.n	8004756 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f06f 0210 	mvn.w	r2, #16
 8004726:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2208      	movs	r2, #8
 800472c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	69db      	ldr	r3, [r3, #28]
 8004734:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004738:	2b00      	cmp	r3, #0
 800473a:	d003      	beq.n	8004744 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 f870 	bl	8004822 <HAL_TIM_IC_CaptureCallback>
 8004742:	e005      	b.n	8004750 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 f862 	bl	800480e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 f873 	bl	8004836 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	2b01      	cmp	r3, #1
 8004762:	d10e      	bne.n	8004782 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	f003 0301 	and.w	r3, r3, #1
 800476e:	2b01      	cmp	r3, #1
 8004770:	d107      	bne.n	8004782 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f06f 0201 	mvn.w	r2, #1
 800477a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f7fc fc09 	bl	8000f94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800478c:	2b80      	cmp	r3, #128	; 0x80
 800478e:	d10e      	bne.n	80047ae <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800479a:	2b80      	cmp	r3, #128	; 0x80
 800479c:	d107      	bne.n	80047ae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80047a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 f8e3 	bl	8004974 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b8:	2b40      	cmp	r3, #64	; 0x40
 80047ba:	d10e      	bne.n	80047da <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c6:	2b40      	cmp	r3, #64	; 0x40
 80047c8:	d107      	bne.n	80047da <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80047d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 f838 	bl	800484a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	f003 0320 	and.w	r3, r3, #32
 80047e4:	2b20      	cmp	r3, #32
 80047e6:	d10e      	bne.n	8004806 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	f003 0320 	and.w	r3, r3, #32
 80047f2:	2b20      	cmp	r3, #32
 80047f4:	d107      	bne.n	8004806 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f06f 0220 	mvn.w	r2, #32
 80047fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 f8ad 	bl	8004960 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004806:	bf00      	nop
 8004808:	3708      	adds	r7, #8
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800480e:	b480      	push	{r7}
 8004810:	b083      	sub	sp, #12
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004816:	bf00      	nop
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr

08004822 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004822:	b480      	push	{r7}
 8004824:	b083      	sub	sp, #12
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800482a:	bf00      	nop
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004836:	b480      	push	{r7}
 8004838:	b083      	sub	sp, #12
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800483e:	bf00      	nop
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800484a:	b480      	push	{r7}
 800484c:	b083      	sub	sp, #12
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004852:	bf00      	nop
 8004854:	370c      	adds	r7, #12
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
	...

08004860 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a34      	ldr	r2, [pc, #208]	; (8004944 <TIM_Base_SetConfig+0xe4>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d00f      	beq.n	8004898 <TIM_Base_SetConfig+0x38>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800487e:	d00b      	beq.n	8004898 <TIM_Base_SetConfig+0x38>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a31      	ldr	r2, [pc, #196]	; (8004948 <TIM_Base_SetConfig+0xe8>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d007      	beq.n	8004898 <TIM_Base_SetConfig+0x38>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a30      	ldr	r2, [pc, #192]	; (800494c <TIM_Base_SetConfig+0xec>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d003      	beq.n	8004898 <TIM_Base_SetConfig+0x38>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a2f      	ldr	r2, [pc, #188]	; (8004950 <TIM_Base_SetConfig+0xf0>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d108      	bne.n	80048aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800489e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a25      	ldr	r2, [pc, #148]	; (8004944 <TIM_Base_SetConfig+0xe4>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d01b      	beq.n	80048ea <TIM_Base_SetConfig+0x8a>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b8:	d017      	beq.n	80048ea <TIM_Base_SetConfig+0x8a>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a22      	ldr	r2, [pc, #136]	; (8004948 <TIM_Base_SetConfig+0xe8>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d013      	beq.n	80048ea <TIM_Base_SetConfig+0x8a>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a21      	ldr	r2, [pc, #132]	; (800494c <TIM_Base_SetConfig+0xec>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d00f      	beq.n	80048ea <TIM_Base_SetConfig+0x8a>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a20      	ldr	r2, [pc, #128]	; (8004950 <TIM_Base_SetConfig+0xf0>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d00b      	beq.n	80048ea <TIM_Base_SetConfig+0x8a>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a1f      	ldr	r2, [pc, #124]	; (8004954 <TIM_Base_SetConfig+0xf4>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d007      	beq.n	80048ea <TIM_Base_SetConfig+0x8a>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a1e      	ldr	r2, [pc, #120]	; (8004958 <TIM_Base_SetConfig+0xf8>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d003      	beq.n	80048ea <TIM_Base_SetConfig+0x8a>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a1d      	ldr	r2, [pc, #116]	; (800495c <TIM_Base_SetConfig+0xfc>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d108      	bne.n	80048fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	4313      	orrs	r3, r2
 8004908:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	689a      	ldr	r2, [r3, #8]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a08      	ldr	r2, [pc, #32]	; (8004944 <TIM_Base_SetConfig+0xe4>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d103      	bne.n	8004930 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	691a      	ldr	r2, [r3, #16]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	615a      	str	r2, [r3, #20]
}
 8004936:	bf00      	nop
 8004938:	3714      	adds	r7, #20
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	40010000 	.word	0x40010000
 8004948:	40000400 	.word	0x40000400
 800494c:	40000800 	.word	0x40000800
 8004950:	40000c00 	.word	0x40000c00
 8004954:	40014000 	.word	0x40014000
 8004958:	40014400 	.word	0x40014400
 800495c:	40014800 	.word	0x40014800

08004960 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004968:	bf00      	nop
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e03f      	b.n	8004a1a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d106      	bne.n	80049b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f7fc fd3e 	bl	8001430 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2224      	movs	r2, #36	; 0x24
 80049b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68da      	ldr	r2, [r3, #12]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 f929 	bl	8004c24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	691a      	ldr	r2, [r3, #16]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	695a      	ldr	r2, [r3, #20]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68da      	ldr	r2, [r3, #12]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2220      	movs	r2, #32
 8004a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3708      	adds	r7, #8
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b08a      	sub	sp, #40	; 0x28
 8004a26:	af02      	add	r7, sp, #8
 8004a28:	60f8      	str	r0, [r7, #12]
 8004a2a:	60b9      	str	r1, [r7, #8]
 8004a2c:	603b      	str	r3, [r7, #0]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a32:	2300      	movs	r3, #0
 8004a34:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b20      	cmp	r3, #32
 8004a40:	d17c      	bne.n	8004b3c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d002      	beq.n	8004a4e <HAL_UART_Transmit+0x2c>
 8004a48:	88fb      	ldrh	r3, [r7, #6]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e075      	b.n	8004b3e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d101      	bne.n	8004a60 <HAL_UART_Transmit+0x3e>
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	e06e      	b.n	8004b3e <HAL_UART_Transmit+0x11c>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2221      	movs	r2, #33	; 0x21
 8004a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a76:	f7fd fc89 	bl	800238c <HAL_GetTick>
 8004a7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	88fa      	ldrh	r2, [r7, #6]
 8004a80:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	88fa      	ldrh	r2, [r7, #6]
 8004a86:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a90:	d108      	bne.n	8004aa4 <HAL_UART_Transmit+0x82>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d104      	bne.n	8004aa4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	61bb      	str	r3, [r7, #24]
 8004aa2:	e003      	b.n	8004aac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004ab4:	e02a      	b.n	8004b0c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	2200      	movs	r2, #0
 8004abe:	2180      	movs	r1, #128	; 0x80
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f000 f840 	bl	8004b46 <UART_WaitOnFlagUntilTimeout>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d001      	beq.n	8004ad0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e036      	b.n	8004b3e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10b      	bne.n	8004aee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	881b      	ldrh	r3, [r3, #0]
 8004ada:	461a      	mov	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ae4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	3302      	adds	r3, #2
 8004aea:	61bb      	str	r3, [r7, #24]
 8004aec:	e007      	b.n	8004afe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	781a      	ldrb	r2, [r3, #0]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	3301      	adds	r3, #1
 8004afc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	3b01      	subs	r3, #1
 8004b06:	b29a      	uxth	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1cf      	bne.n	8004ab6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	9300      	str	r3, [sp, #0]
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	2140      	movs	r1, #64	; 0x40
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f000 f810 	bl	8004b46 <UART_WaitOnFlagUntilTimeout>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d001      	beq.n	8004b30 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e006      	b.n	8004b3e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2220      	movs	r2, #32
 8004b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	e000      	b.n	8004b3e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004b3c:	2302      	movs	r3, #2
  }
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3720      	adds	r7, #32
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b090      	sub	sp, #64	; 0x40
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	60f8      	str	r0, [r7, #12]
 8004b4e:	60b9      	str	r1, [r7, #8]
 8004b50:	603b      	str	r3, [r7, #0]
 8004b52:	4613      	mov	r3, r2
 8004b54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b56:	e050      	b.n	8004bfa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b5e:	d04c      	beq.n	8004bfa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004b60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d007      	beq.n	8004b76 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b66:	f7fd fc11 	bl	800238c <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d241      	bcs.n	8004bfa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	330c      	adds	r3, #12
 8004b7c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b80:	e853 3f00 	ldrex	r3, [r3]
 8004b84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	330c      	adds	r3, #12
 8004b94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b96:	637a      	str	r2, [r7, #52]	; 0x34
 8004b98:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b9e:	e841 2300 	strex	r3, r2, [r1]
 8004ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1e5      	bne.n	8004b76 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	3314      	adds	r3, #20
 8004bb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	e853 3f00 	ldrex	r3, [r3]
 8004bb8:	613b      	str	r3, [r7, #16]
   return(result);
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	f023 0301 	bic.w	r3, r3, #1
 8004bc0:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	3314      	adds	r3, #20
 8004bc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bca:	623a      	str	r2, [r7, #32]
 8004bcc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bce:	69f9      	ldr	r1, [r7, #28]
 8004bd0:	6a3a      	ldr	r2, [r7, #32]
 8004bd2:	e841 2300 	strex	r3, r2, [r1]
 8004bd6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1e5      	bne.n	8004baa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2220      	movs	r2, #32
 8004be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2220      	movs	r2, #32
 8004bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e00f      	b.n	8004c1a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	4013      	ands	r3, r2
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	bf0c      	ite	eq
 8004c0a:	2301      	moveq	r3, #1
 8004c0c:	2300      	movne	r3, #0
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	461a      	mov	r2, r3
 8004c12:	79fb      	ldrb	r3, [r7, #7]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d09f      	beq.n	8004b58 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3740      	adds	r7, #64	; 0x40
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
	...

08004c24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c28:	b0c0      	sub	sp, #256	; 0x100
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c40:	68d9      	ldr	r1, [r3, #12]
 8004c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	ea40 0301 	orr.w	r3, r0, r1
 8004c4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c52:	689a      	ldr	r2, [r3, #8]
 8004c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	431a      	orrs	r2, r3
 8004c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	431a      	orrs	r2, r3
 8004c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004c7c:	f021 010c 	bic.w	r1, r1, #12
 8004c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004c8a:	430b      	orrs	r3, r1
 8004c8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c9e:	6999      	ldr	r1, [r3, #24]
 8004ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	ea40 0301 	orr.w	r3, r0, r1
 8004caa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	4b8f      	ldr	r3, [pc, #572]	; (8004ef0 <UART_SetConfig+0x2cc>)
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d005      	beq.n	8004cc4 <UART_SetConfig+0xa0>
 8004cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	4b8d      	ldr	r3, [pc, #564]	; (8004ef4 <UART_SetConfig+0x2d0>)
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d104      	bne.n	8004cce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004cc4:	f7ff fc38 	bl	8004538 <HAL_RCC_GetPCLK2Freq>
 8004cc8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004ccc:	e003      	b.n	8004cd6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004cce:	f7ff fc1f 	bl	8004510 <HAL_RCC_GetPCLK1Freq>
 8004cd2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cda:	69db      	ldr	r3, [r3, #28]
 8004cdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ce0:	f040 810c 	bne.w	8004efc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ce4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004cee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004cf2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004cf6:	4622      	mov	r2, r4
 8004cf8:	462b      	mov	r3, r5
 8004cfa:	1891      	adds	r1, r2, r2
 8004cfc:	65b9      	str	r1, [r7, #88]	; 0x58
 8004cfe:	415b      	adcs	r3, r3
 8004d00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004d06:	4621      	mov	r1, r4
 8004d08:	eb12 0801 	adds.w	r8, r2, r1
 8004d0c:	4629      	mov	r1, r5
 8004d0e:	eb43 0901 	adc.w	r9, r3, r1
 8004d12:	f04f 0200 	mov.w	r2, #0
 8004d16:	f04f 0300 	mov.w	r3, #0
 8004d1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d26:	4690      	mov	r8, r2
 8004d28:	4699      	mov	r9, r3
 8004d2a:	4623      	mov	r3, r4
 8004d2c:	eb18 0303 	adds.w	r3, r8, r3
 8004d30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004d34:	462b      	mov	r3, r5
 8004d36:	eb49 0303 	adc.w	r3, r9, r3
 8004d3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004d4a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004d4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004d52:	460b      	mov	r3, r1
 8004d54:	18db      	adds	r3, r3, r3
 8004d56:	653b      	str	r3, [r7, #80]	; 0x50
 8004d58:	4613      	mov	r3, r2
 8004d5a:	eb42 0303 	adc.w	r3, r2, r3
 8004d5e:	657b      	str	r3, [r7, #84]	; 0x54
 8004d60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004d64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004d68:	f7fb ff96 	bl	8000c98 <__aeabi_uldivmod>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	460b      	mov	r3, r1
 8004d70:	4b61      	ldr	r3, [pc, #388]	; (8004ef8 <UART_SetConfig+0x2d4>)
 8004d72:	fba3 2302 	umull	r2, r3, r3, r2
 8004d76:	095b      	lsrs	r3, r3, #5
 8004d78:	011c      	lsls	r4, r3, #4
 8004d7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d84:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004d88:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004d8c:	4642      	mov	r2, r8
 8004d8e:	464b      	mov	r3, r9
 8004d90:	1891      	adds	r1, r2, r2
 8004d92:	64b9      	str	r1, [r7, #72]	; 0x48
 8004d94:	415b      	adcs	r3, r3
 8004d96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004d9c:	4641      	mov	r1, r8
 8004d9e:	eb12 0a01 	adds.w	sl, r2, r1
 8004da2:	4649      	mov	r1, r9
 8004da4:	eb43 0b01 	adc.w	fp, r3, r1
 8004da8:	f04f 0200 	mov.w	r2, #0
 8004dac:	f04f 0300 	mov.w	r3, #0
 8004db0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004db4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004db8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004dbc:	4692      	mov	sl, r2
 8004dbe:	469b      	mov	fp, r3
 8004dc0:	4643      	mov	r3, r8
 8004dc2:	eb1a 0303 	adds.w	r3, sl, r3
 8004dc6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004dca:	464b      	mov	r3, r9
 8004dcc:	eb4b 0303 	adc.w	r3, fp, r3
 8004dd0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004de0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004de4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004de8:	460b      	mov	r3, r1
 8004dea:	18db      	adds	r3, r3, r3
 8004dec:	643b      	str	r3, [r7, #64]	; 0x40
 8004dee:	4613      	mov	r3, r2
 8004df0:	eb42 0303 	adc.w	r3, r2, r3
 8004df4:	647b      	str	r3, [r7, #68]	; 0x44
 8004df6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004dfa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004dfe:	f7fb ff4b 	bl	8000c98 <__aeabi_uldivmod>
 8004e02:	4602      	mov	r2, r0
 8004e04:	460b      	mov	r3, r1
 8004e06:	4611      	mov	r1, r2
 8004e08:	4b3b      	ldr	r3, [pc, #236]	; (8004ef8 <UART_SetConfig+0x2d4>)
 8004e0a:	fba3 2301 	umull	r2, r3, r3, r1
 8004e0e:	095b      	lsrs	r3, r3, #5
 8004e10:	2264      	movs	r2, #100	; 0x64
 8004e12:	fb02 f303 	mul.w	r3, r2, r3
 8004e16:	1acb      	subs	r3, r1, r3
 8004e18:	00db      	lsls	r3, r3, #3
 8004e1a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004e1e:	4b36      	ldr	r3, [pc, #216]	; (8004ef8 <UART_SetConfig+0x2d4>)
 8004e20:	fba3 2302 	umull	r2, r3, r3, r2
 8004e24:	095b      	lsrs	r3, r3, #5
 8004e26:	005b      	lsls	r3, r3, #1
 8004e28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e2c:	441c      	add	r4, r3
 8004e2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e32:	2200      	movs	r2, #0
 8004e34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e38:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004e3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004e40:	4642      	mov	r2, r8
 8004e42:	464b      	mov	r3, r9
 8004e44:	1891      	adds	r1, r2, r2
 8004e46:	63b9      	str	r1, [r7, #56]	; 0x38
 8004e48:	415b      	adcs	r3, r3
 8004e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004e50:	4641      	mov	r1, r8
 8004e52:	1851      	adds	r1, r2, r1
 8004e54:	6339      	str	r1, [r7, #48]	; 0x30
 8004e56:	4649      	mov	r1, r9
 8004e58:	414b      	adcs	r3, r1
 8004e5a:	637b      	str	r3, [r7, #52]	; 0x34
 8004e5c:	f04f 0200 	mov.w	r2, #0
 8004e60:	f04f 0300 	mov.w	r3, #0
 8004e64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004e68:	4659      	mov	r1, fp
 8004e6a:	00cb      	lsls	r3, r1, #3
 8004e6c:	4651      	mov	r1, sl
 8004e6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e72:	4651      	mov	r1, sl
 8004e74:	00ca      	lsls	r2, r1, #3
 8004e76:	4610      	mov	r0, r2
 8004e78:	4619      	mov	r1, r3
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	4642      	mov	r2, r8
 8004e7e:	189b      	adds	r3, r3, r2
 8004e80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e84:	464b      	mov	r3, r9
 8004e86:	460a      	mov	r2, r1
 8004e88:	eb42 0303 	adc.w	r3, r2, r3
 8004e8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004e9c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004ea0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	18db      	adds	r3, r3, r3
 8004ea8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004eaa:	4613      	mov	r3, r2
 8004eac:	eb42 0303 	adc.w	r3, r2, r3
 8004eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004eb6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004eba:	f7fb feed 	bl	8000c98 <__aeabi_uldivmod>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	4b0d      	ldr	r3, [pc, #52]	; (8004ef8 <UART_SetConfig+0x2d4>)
 8004ec4:	fba3 1302 	umull	r1, r3, r3, r2
 8004ec8:	095b      	lsrs	r3, r3, #5
 8004eca:	2164      	movs	r1, #100	; 0x64
 8004ecc:	fb01 f303 	mul.w	r3, r1, r3
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	00db      	lsls	r3, r3, #3
 8004ed4:	3332      	adds	r3, #50	; 0x32
 8004ed6:	4a08      	ldr	r2, [pc, #32]	; (8004ef8 <UART_SetConfig+0x2d4>)
 8004ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8004edc:	095b      	lsrs	r3, r3, #5
 8004ede:	f003 0207 	and.w	r2, r3, #7
 8004ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4422      	add	r2, r4
 8004eea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004eec:	e106      	b.n	80050fc <UART_SetConfig+0x4d8>
 8004eee:	bf00      	nop
 8004ef0:	40011000 	.word	0x40011000
 8004ef4:	40011400 	.word	0x40011400
 8004ef8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004efc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f00:	2200      	movs	r2, #0
 8004f02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f06:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004f0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004f0e:	4642      	mov	r2, r8
 8004f10:	464b      	mov	r3, r9
 8004f12:	1891      	adds	r1, r2, r2
 8004f14:	6239      	str	r1, [r7, #32]
 8004f16:	415b      	adcs	r3, r3
 8004f18:	627b      	str	r3, [r7, #36]	; 0x24
 8004f1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f1e:	4641      	mov	r1, r8
 8004f20:	1854      	adds	r4, r2, r1
 8004f22:	4649      	mov	r1, r9
 8004f24:	eb43 0501 	adc.w	r5, r3, r1
 8004f28:	f04f 0200 	mov.w	r2, #0
 8004f2c:	f04f 0300 	mov.w	r3, #0
 8004f30:	00eb      	lsls	r3, r5, #3
 8004f32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f36:	00e2      	lsls	r2, r4, #3
 8004f38:	4614      	mov	r4, r2
 8004f3a:	461d      	mov	r5, r3
 8004f3c:	4643      	mov	r3, r8
 8004f3e:	18e3      	adds	r3, r4, r3
 8004f40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f44:	464b      	mov	r3, r9
 8004f46:	eb45 0303 	adc.w	r3, r5, r3
 8004f4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004f5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f5e:	f04f 0200 	mov.w	r2, #0
 8004f62:	f04f 0300 	mov.w	r3, #0
 8004f66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004f6a:	4629      	mov	r1, r5
 8004f6c:	008b      	lsls	r3, r1, #2
 8004f6e:	4621      	mov	r1, r4
 8004f70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f74:	4621      	mov	r1, r4
 8004f76:	008a      	lsls	r2, r1, #2
 8004f78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004f7c:	f7fb fe8c 	bl	8000c98 <__aeabi_uldivmod>
 8004f80:	4602      	mov	r2, r0
 8004f82:	460b      	mov	r3, r1
 8004f84:	4b60      	ldr	r3, [pc, #384]	; (8005108 <UART_SetConfig+0x4e4>)
 8004f86:	fba3 2302 	umull	r2, r3, r3, r2
 8004f8a:	095b      	lsrs	r3, r3, #5
 8004f8c:	011c      	lsls	r4, r3, #4
 8004f8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f92:	2200      	movs	r2, #0
 8004f94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f98:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004f9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004fa0:	4642      	mov	r2, r8
 8004fa2:	464b      	mov	r3, r9
 8004fa4:	1891      	adds	r1, r2, r2
 8004fa6:	61b9      	str	r1, [r7, #24]
 8004fa8:	415b      	adcs	r3, r3
 8004faa:	61fb      	str	r3, [r7, #28]
 8004fac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fb0:	4641      	mov	r1, r8
 8004fb2:	1851      	adds	r1, r2, r1
 8004fb4:	6139      	str	r1, [r7, #16]
 8004fb6:	4649      	mov	r1, r9
 8004fb8:	414b      	adcs	r3, r1
 8004fba:	617b      	str	r3, [r7, #20]
 8004fbc:	f04f 0200 	mov.w	r2, #0
 8004fc0:	f04f 0300 	mov.w	r3, #0
 8004fc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004fc8:	4659      	mov	r1, fp
 8004fca:	00cb      	lsls	r3, r1, #3
 8004fcc:	4651      	mov	r1, sl
 8004fce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fd2:	4651      	mov	r1, sl
 8004fd4:	00ca      	lsls	r2, r1, #3
 8004fd6:	4610      	mov	r0, r2
 8004fd8:	4619      	mov	r1, r3
 8004fda:	4603      	mov	r3, r0
 8004fdc:	4642      	mov	r2, r8
 8004fde:	189b      	adds	r3, r3, r2
 8004fe0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004fe4:	464b      	mov	r3, r9
 8004fe6:	460a      	mov	r2, r1
 8004fe8:	eb42 0303 	adc.w	r3, r2, r3
 8004fec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ffa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004ffc:	f04f 0200 	mov.w	r2, #0
 8005000:	f04f 0300 	mov.w	r3, #0
 8005004:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005008:	4649      	mov	r1, r9
 800500a:	008b      	lsls	r3, r1, #2
 800500c:	4641      	mov	r1, r8
 800500e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005012:	4641      	mov	r1, r8
 8005014:	008a      	lsls	r2, r1, #2
 8005016:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800501a:	f7fb fe3d 	bl	8000c98 <__aeabi_uldivmod>
 800501e:	4602      	mov	r2, r0
 8005020:	460b      	mov	r3, r1
 8005022:	4611      	mov	r1, r2
 8005024:	4b38      	ldr	r3, [pc, #224]	; (8005108 <UART_SetConfig+0x4e4>)
 8005026:	fba3 2301 	umull	r2, r3, r3, r1
 800502a:	095b      	lsrs	r3, r3, #5
 800502c:	2264      	movs	r2, #100	; 0x64
 800502e:	fb02 f303 	mul.w	r3, r2, r3
 8005032:	1acb      	subs	r3, r1, r3
 8005034:	011b      	lsls	r3, r3, #4
 8005036:	3332      	adds	r3, #50	; 0x32
 8005038:	4a33      	ldr	r2, [pc, #204]	; (8005108 <UART_SetConfig+0x4e4>)
 800503a:	fba2 2303 	umull	r2, r3, r2, r3
 800503e:	095b      	lsrs	r3, r3, #5
 8005040:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005044:	441c      	add	r4, r3
 8005046:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800504a:	2200      	movs	r2, #0
 800504c:	673b      	str	r3, [r7, #112]	; 0x70
 800504e:	677a      	str	r2, [r7, #116]	; 0x74
 8005050:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005054:	4642      	mov	r2, r8
 8005056:	464b      	mov	r3, r9
 8005058:	1891      	adds	r1, r2, r2
 800505a:	60b9      	str	r1, [r7, #8]
 800505c:	415b      	adcs	r3, r3
 800505e:	60fb      	str	r3, [r7, #12]
 8005060:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005064:	4641      	mov	r1, r8
 8005066:	1851      	adds	r1, r2, r1
 8005068:	6039      	str	r1, [r7, #0]
 800506a:	4649      	mov	r1, r9
 800506c:	414b      	adcs	r3, r1
 800506e:	607b      	str	r3, [r7, #4]
 8005070:	f04f 0200 	mov.w	r2, #0
 8005074:	f04f 0300 	mov.w	r3, #0
 8005078:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800507c:	4659      	mov	r1, fp
 800507e:	00cb      	lsls	r3, r1, #3
 8005080:	4651      	mov	r1, sl
 8005082:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005086:	4651      	mov	r1, sl
 8005088:	00ca      	lsls	r2, r1, #3
 800508a:	4610      	mov	r0, r2
 800508c:	4619      	mov	r1, r3
 800508e:	4603      	mov	r3, r0
 8005090:	4642      	mov	r2, r8
 8005092:	189b      	adds	r3, r3, r2
 8005094:	66bb      	str	r3, [r7, #104]	; 0x68
 8005096:	464b      	mov	r3, r9
 8005098:	460a      	mov	r2, r1
 800509a:	eb42 0303 	adc.w	r3, r2, r3
 800509e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80050a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	663b      	str	r3, [r7, #96]	; 0x60
 80050aa:	667a      	str	r2, [r7, #100]	; 0x64
 80050ac:	f04f 0200 	mov.w	r2, #0
 80050b0:	f04f 0300 	mov.w	r3, #0
 80050b4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80050b8:	4649      	mov	r1, r9
 80050ba:	008b      	lsls	r3, r1, #2
 80050bc:	4641      	mov	r1, r8
 80050be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050c2:	4641      	mov	r1, r8
 80050c4:	008a      	lsls	r2, r1, #2
 80050c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80050ca:	f7fb fde5 	bl	8000c98 <__aeabi_uldivmod>
 80050ce:	4602      	mov	r2, r0
 80050d0:	460b      	mov	r3, r1
 80050d2:	4b0d      	ldr	r3, [pc, #52]	; (8005108 <UART_SetConfig+0x4e4>)
 80050d4:	fba3 1302 	umull	r1, r3, r3, r2
 80050d8:	095b      	lsrs	r3, r3, #5
 80050da:	2164      	movs	r1, #100	; 0x64
 80050dc:	fb01 f303 	mul.w	r3, r1, r3
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	011b      	lsls	r3, r3, #4
 80050e4:	3332      	adds	r3, #50	; 0x32
 80050e6:	4a08      	ldr	r2, [pc, #32]	; (8005108 <UART_SetConfig+0x4e4>)
 80050e8:	fba2 2303 	umull	r2, r3, r2, r3
 80050ec:	095b      	lsrs	r3, r3, #5
 80050ee:	f003 020f 	and.w	r2, r3, #15
 80050f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4422      	add	r2, r4
 80050fa:	609a      	str	r2, [r3, #8]
}
 80050fc:	bf00      	nop
 80050fe:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005102:	46bd      	mov	sp, r7
 8005104:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005108:	51eb851f 	.word	0x51eb851f

0800510c <siprintf>:
 800510c:	b40e      	push	{r1, r2, r3}
 800510e:	b500      	push	{lr}
 8005110:	b09c      	sub	sp, #112	; 0x70
 8005112:	ab1d      	add	r3, sp, #116	; 0x74
 8005114:	9002      	str	r0, [sp, #8]
 8005116:	9006      	str	r0, [sp, #24]
 8005118:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800511c:	4809      	ldr	r0, [pc, #36]	; (8005144 <siprintf+0x38>)
 800511e:	9107      	str	r1, [sp, #28]
 8005120:	9104      	str	r1, [sp, #16]
 8005122:	4909      	ldr	r1, [pc, #36]	; (8005148 <siprintf+0x3c>)
 8005124:	f853 2b04 	ldr.w	r2, [r3], #4
 8005128:	9105      	str	r1, [sp, #20]
 800512a:	6800      	ldr	r0, [r0, #0]
 800512c:	9301      	str	r3, [sp, #4]
 800512e:	a902      	add	r1, sp, #8
 8005130:	f000 f992 	bl	8005458 <_svfiprintf_r>
 8005134:	9b02      	ldr	r3, [sp, #8]
 8005136:	2200      	movs	r2, #0
 8005138:	701a      	strb	r2, [r3, #0]
 800513a:	b01c      	add	sp, #112	; 0x70
 800513c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005140:	b003      	add	sp, #12
 8005142:	4770      	bx	lr
 8005144:	20000058 	.word	0x20000058
 8005148:	ffff0208 	.word	0xffff0208

0800514c <memset>:
 800514c:	4402      	add	r2, r0
 800514e:	4603      	mov	r3, r0
 8005150:	4293      	cmp	r3, r2
 8005152:	d100      	bne.n	8005156 <memset+0xa>
 8005154:	4770      	bx	lr
 8005156:	f803 1b01 	strb.w	r1, [r3], #1
 800515a:	e7f9      	b.n	8005150 <memset+0x4>

0800515c <__errno>:
 800515c:	4b01      	ldr	r3, [pc, #4]	; (8005164 <__errno+0x8>)
 800515e:	6818      	ldr	r0, [r3, #0]
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	20000058 	.word	0x20000058

08005168 <__libc_init_array>:
 8005168:	b570      	push	{r4, r5, r6, lr}
 800516a:	4d0d      	ldr	r5, [pc, #52]	; (80051a0 <__libc_init_array+0x38>)
 800516c:	4c0d      	ldr	r4, [pc, #52]	; (80051a4 <__libc_init_array+0x3c>)
 800516e:	1b64      	subs	r4, r4, r5
 8005170:	10a4      	asrs	r4, r4, #2
 8005172:	2600      	movs	r6, #0
 8005174:	42a6      	cmp	r6, r4
 8005176:	d109      	bne.n	800518c <__libc_init_array+0x24>
 8005178:	4d0b      	ldr	r5, [pc, #44]	; (80051a8 <__libc_init_array+0x40>)
 800517a:	4c0c      	ldr	r4, [pc, #48]	; (80051ac <__libc_init_array+0x44>)
 800517c:	f001 fba4 	bl	80068c8 <_init>
 8005180:	1b64      	subs	r4, r4, r5
 8005182:	10a4      	asrs	r4, r4, #2
 8005184:	2600      	movs	r6, #0
 8005186:	42a6      	cmp	r6, r4
 8005188:	d105      	bne.n	8005196 <__libc_init_array+0x2e>
 800518a:	bd70      	pop	{r4, r5, r6, pc}
 800518c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005190:	4798      	blx	r3
 8005192:	3601      	adds	r6, #1
 8005194:	e7ee      	b.n	8005174 <__libc_init_array+0xc>
 8005196:	f855 3b04 	ldr.w	r3, [r5], #4
 800519a:	4798      	blx	r3
 800519c:	3601      	adds	r6, #1
 800519e:	e7f2      	b.n	8005186 <__libc_init_array+0x1e>
 80051a0:	080069d0 	.word	0x080069d0
 80051a4:	080069d0 	.word	0x080069d0
 80051a8:	080069d0 	.word	0x080069d0
 80051ac:	080069d4 	.word	0x080069d4

080051b0 <__retarget_lock_acquire_recursive>:
 80051b0:	4770      	bx	lr

080051b2 <__retarget_lock_release_recursive>:
 80051b2:	4770      	bx	lr

080051b4 <_free_r>:
 80051b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80051b6:	2900      	cmp	r1, #0
 80051b8:	d044      	beq.n	8005244 <_free_r+0x90>
 80051ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051be:	9001      	str	r0, [sp, #4]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f1a1 0404 	sub.w	r4, r1, #4
 80051c6:	bfb8      	it	lt
 80051c8:	18e4      	addlt	r4, r4, r3
 80051ca:	f000 f8df 	bl	800538c <__malloc_lock>
 80051ce:	4a1e      	ldr	r2, [pc, #120]	; (8005248 <_free_r+0x94>)
 80051d0:	9801      	ldr	r0, [sp, #4]
 80051d2:	6813      	ldr	r3, [r2, #0]
 80051d4:	b933      	cbnz	r3, 80051e4 <_free_r+0x30>
 80051d6:	6063      	str	r3, [r4, #4]
 80051d8:	6014      	str	r4, [r2, #0]
 80051da:	b003      	add	sp, #12
 80051dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80051e0:	f000 b8da 	b.w	8005398 <__malloc_unlock>
 80051e4:	42a3      	cmp	r3, r4
 80051e6:	d908      	bls.n	80051fa <_free_r+0x46>
 80051e8:	6825      	ldr	r5, [r4, #0]
 80051ea:	1961      	adds	r1, r4, r5
 80051ec:	428b      	cmp	r3, r1
 80051ee:	bf01      	itttt	eq
 80051f0:	6819      	ldreq	r1, [r3, #0]
 80051f2:	685b      	ldreq	r3, [r3, #4]
 80051f4:	1949      	addeq	r1, r1, r5
 80051f6:	6021      	streq	r1, [r4, #0]
 80051f8:	e7ed      	b.n	80051d6 <_free_r+0x22>
 80051fa:	461a      	mov	r2, r3
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	b10b      	cbz	r3, 8005204 <_free_r+0x50>
 8005200:	42a3      	cmp	r3, r4
 8005202:	d9fa      	bls.n	80051fa <_free_r+0x46>
 8005204:	6811      	ldr	r1, [r2, #0]
 8005206:	1855      	adds	r5, r2, r1
 8005208:	42a5      	cmp	r5, r4
 800520a:	d10b      	bne.n	8005224 <_free_r+0x70>
 800520c:	6824      	ldr	r4, [r4, #0]
 800520e:	4421      	add	r1, r4
 8005210:	1854      	adds	r4, r2, r1
 8005212:	42a3      	cmp	r3, r4
 8005214:	6011      	str	r1, [r2, #0]
 8005216:	d1e0      	bne.n	80051da <_free_r+0x26>
 8005218:	681c      	ldr	r4, [r3, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	6053      	str	r3, [r2, #4]
 800521e:	440c      	add	r4, r1
 8005220:	6014      	str	r4, [r2, #0]
 8005222:	e7da      	b.n	80051da <_free_r+0x26>
 8005224:	d902      	bls.n	800522c <_free_r+0x78>
 8005226:	230c      	movs	r3, #12
 8005228:	6003      	str	r3, [r0, #0]
 800522a:	e7d6      	b.n	80051da <_free_r+0x26>
 800522c:	6825      	ldr	r5, [r4, #0]
 800522e:	1961      	adds	r1, r4, r5
 8005230:	428b      	cmp	r3, r1
 8005232:	bf04      	itt	eq
 8005234:	6819      	ldreq	r1, [r3, #0]
 8005236:	685b      	ldreq	r3, [r3, #4]
 8005238:	6063      	str	r3, [r4, #4]
 800523a:	bf04      	itt	eq
 800523c:	1949      	addeq	r1, r1, r5
 800523e:	6021      	streq	r1, [r4, #0]
 8005240:	6054      	str	r4, [r2, #4]
 8005242:	e7ca      	b.n	80051da <_free_r+0x26>
 8005244:	b003      	add	sp, #12
 8005246:	bd30      	pop	{r4, r5, pc}
 8005248:	20000320 	.word	0x20000320

0800524c <sbrk_aligned>:
 800524c:	b570      	push	{r4, r5, r6, lr}
 800524e:	4e0e      	ldr	r6, [pc, #56]	; (8005288 <sbrk_aligned+0x3c>)
 8005250:	460c      	mov	r4, r1
 8005252:	6831      	ldr	r1, [r6, #0]
 8005254:	4605      	mov	r5, r0
 8005256:	b911      	cbnz	r1, 800525e <sbrk_aligned+0x12>
 8005258:	f000 fba6 	bl	80059a8 <_sbrk_r>
 800525c:	6030      	str	r0, [r6, #0]
 800525e:	4621      	mov	r1, r4
 8005260:	4628      	mov	r0, r5
 8005262:	f000 fba1 	bl	80059a8 <_sbrk_r>
 8005266:	1c43      	adds	r3, r0, #1
 8005268:	d00a      	beq.n	8005280 <sbrk_aligned+0x34>
 800526a:	1cc4      	adds	r4, r0, #3
 800526c:	f024 0403 	bic.w	r4, r4, #3
 8005270:	42a0      	cmp	r0, r4
 8005272:	d007      	beq.n	8005284 <sbrk_aligned+0x38>
 8005274:	1a21      	subs	r1, r4, r0
 8005276:	4628      	mov	r0, r5
 8005278:	f000 fb96 	bl	80059a8 <_sbrk_r>
 800527c:	3001      	adds	r0, #1
 800527e:	d101      	bne.n	8005284 <sbrk_aligned+0x38>
 8005280:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005284:	4620      	mov	r0, r4
 8005286:	bd70      	pop	{r4, r5, r6, pc}
 8005288:	20000324 	.word	0x20000324

0800528c <_malloc_r>:
 800528c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005290:	1ccd      	adds	r5, r1, #3
 8005292:	f025 0503 	bic.w	r5, r5, #3
 8005296:	3508      	adds	r5, #8
 8005298:	2d0c      	cmp	r5, #12
 800529a:	bf38      	it	cc
 800529c:	250c      	movcc	r5, #12
 800529e:	2d00      	cmp	r5, #0
 80052a0:	4607      	mov	r7, r0
 80052a2:	db01      	blt.n	80052a8 <_malloc_r+0x1c>
 80052a4:	42a9      	cmp	r1, r5
 80052a6:	d905      	bls.n	80052b4 <_malloc_r+0x28>
 80052a8:	230c      	movs	r3, #12
 80052aa:	603b      	str	r3, [r7, #0]
 80052ac:	2600      	movs	r6, #0
 80052ae:	4630      	mov	r0, r6
 80052b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005388 <_malloc_r+0xfc>
 80052b8:	f000 f868 	bl	800538c <__malloc_lock>
 80052bc:	f8d8 3000 	ldr.w	r3, [r8]
 80052c0:	461c      	mov	r4, r3
 80052c2:	bb5c      	cbnz	r4, 800531c <_malloc_r+0x90>
 80052c4:	4629      	mov	r1, r5
 80052c6:	4638      	mov	r0, r7
 80052c8:	f7ff ffc0 	bl	800524c <sbrk_aligned>
 80052cc:	1c43      	adds	r3, r0, #1
 80052ce:	4604      	mov	r4, r0
 80052d0:	d155      	bne.n	800537e <_malloc_r+0xf2>
 80052d2:	f8d8 4000 	ldr.w	r4, [r8]
 80052d6:	4626      	mov	r6, r4
 80052d8:	2e00      	cmp	r6, #0
 80052da:	d145      	bne.n	8005368 <_malloc_r+0xdc>
 80052dc:	2c00      	cmp	r4, #0
 80052de:	d048      	beq.n	8005372 <_malloc_r+0xe6>
 80052e0:	6823      	ldr	r3, [r4, #0]
 80052e2:	4631      	mov	r1, r6
 80052e4:	4638      	mov	r0, r7
 80052e6:	eb04 0903 	add.w	r9, r4, r3
 80052ea:	f000 fb5d 	bl	80059a8 <_sbrk_r>
 80052ee:	4581      	cmp	r9, r0
 80052f0:	d13f      	bne.n	8005372 <_malloc_r+0xe6>
 80052f2:	6821      	ldr	r1, [r4, #0]
 80052f4:	1a6d      	subs	r5, r5, r1
 80052f6:	4629      	mov	r1, r5
 80052f8:	4638      	mov	r0, r7
 80052fa:	f7ff ffa7 	bl	800524c <sbrk_aligned>
 80052fe:	3001      	adds	r0, #1
 8005300:	d037      	beq.n	8005372 <_malloc_r+0xe6>
 8005302:	6823      	ldr	r3, [r4, #0]
 8005304:	442b      	add	r3, r5
 8005306:	6023      	str	r3, [r4, #0]
 8005308:	f8d8 3000 	ldr.w	r3, [r8]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d038      	beq.n	8005382 <_malloc_r+0xf6>
 8005310:	685a      	ldr	r2, [r3, #4]
 8005312:	42a2      	cmp	r2, r4
 8005314:	d12b      	bne.n	800536e <_malloc_r+0xe2>
 8005316:	2200      	movs	r2, #0
 8005318:	605a      	str	r2, [r3, #4]
 800531a:	e00f      	b.n	800533c <_malloc_r+0xb0>
 800531c:	6822      	ldr	r2, [r4, #0]
 800531e:	1b52      	subs	r2, r2, r5
 8005320:	d41f      	bmi.n	8005362 <_malloc_r+0xd6>
 8005322:	2a0b      	cmp	r2, #11
 8005324:	d917      	bls.n	8005356 <_malloc_r+0xca>
 8005326:	1961      	adds	r1, r4, r5
 8005328:	42a3      	cmp	r3, r4
 800532a:	6025      	str	r5, [r4, #0]
 800532c:	bf18      	it	ne
 800532e:	6059      	strne	r1, [r3, #4]
 8005330:	6863      	ldr	r3, [r4, #4]
 8005332:	bf08      	it	eq
 8005334:	f8c8 1000 	streq.w	r1, [r8]
 8005338:	5162      	str	r2, [r4, r5]
 800533a:	604b      	str	r3, [r1, #4]
 800533c:	4638      	mov	r0, r7
 800533e:	f104 060b 	add.w	r6, r4, #11
 8005342:	f000 f829 	bl	8005398 <__malloc_unlock>
 8005346:	f026 0607 	bic.w	r6, r6, #7
 800534a:	1d23      	adds	r3, r4, #4
 800534c:	1af2      	subs	r2, r6, r3
 800534e:	d0ae      	beq.n	80052ae <_malloc_r+0x22>
 8005350:	1b9b      	subs	r3, r3, r6
 8005352:	50a3      	str	r3, [r4, r2]
 8005354:	e7ab      	b.n	80052ae <_malloc_r+0x22>
 8005356:	42a3      	cmp	r3, r4
 8005358:	6862      	ldr	r2, [r4, #4]
 800535a:	d1dd      	bne.n	8005318 <_malloc_r+0x8c>
 800535c:	f8c8 2000 	str.w	r2, [r8]
 8005360:	e7ec      	b.n	800533c <_malloc_r+0xb0>
 8005362:	4623      	mov	r3, r4
 8005364:	6864      	ldr	r4, [r4, #4]
 8005366:	e7ac      	b.n	80052c2 <_malloc_r+0x36>
 8005368:	4634      	mov	r4, r6
 800536a:	6876      	ldr	r6, [r6, #4]
 800536c:	e7b4      	b.n	80052d8 <_malloc_r+0x4c>
 800536e:	4613      	mov	r3, r2
 8005370:	e7cc      	b.n	800530c <_malloc_r+0x80>
 8005372:	230c      	movs	r3, #12
 8005374:	603b      	str	r3, [r7, #0]
 8005376:	4638      	mov	r0, r7
 8005378:	f000 f80e 	bl	8005398 <__malloc_unlock>
 800537c:	e797      	b.n	80052ae <_malloc_r+0x22>
 800537e:	6025      	str	r5, [r4, #0]
 8005380:	e7dc      	b.n	800533c <_malloc_r+0xb0>
 8005382:	605b      	str	r3, [r3, #4]
 8005384:	deff      	udf	#255	; 0xff
 8005386:	bf00      	nop
 8005388:	20000320 	.word	0x20000320

0800538c <__malloc_lock>:
 800538c:	4801      	ldr	r0, [pc, #4]	; (8005394 <__malloc_lock+0x8>)
 800538e:	f7ff bf0f 	b.w	80051b0 <__retarget_lock_acquire_recursive>
 8005392:	bf00      	nop
 8005394:	2000031c 	.word	0x2000031c

08005398 <__malloc_unlock>:
 8005398:	4801      	ldr	r0, [pc, #4]	; (80053a0 <__malloc_unlock+0x8>)
 800539a:	f7ff bf0a 	b.w	80051b2 <__retarget_lock_release_recursive>
 800539e:	bf00      	nop
 80053a0:	2000031c 	.word	0x2000031c

080053a4 <__ssputs_r>:
 80053a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053a8:	688e      	ldr	r6, [r1, #8]
 80053aa:	461f      	mov	r7, r3
 80053ac:	42be      	cmp	r6, r7
 80053ae:	680b      	ldr	r3, [r1, #0]
 80053b0:	4682      	mov	sl, r0
 80053b2:	460c      	mov	r4, r1
 80053b4:	4690      	mov	r8, r2
 80053b6:	d82c      	bhi.n	8005412 <__ssputs_r+0x6e>
 80053b8:	898a      	ldrh	r2, [r1, #12]
 80053ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80053be:	d026      	beq.n	800540e <__ssputs_r+0x6a>
 80053c0:	6965      	ldr	r5, [r4, #20]
 80053c2:	6909      	ldr	r1, [r1, #16]
 80053c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80053c8:	eba3 0901 	sub.w	r9, r3, r1
 80053cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80053d0:	1c7b      	adds	r3, r7, #1
 80053d2:	444b      	add	r3, r9
 80053d4:	106d      	asrs	r5, r5, #1
 80053d6:	429d      	cmp	r5, r3
 80053d8:	bf38      	it	cc
 80053da:	461d      	movcc	r5, r3
 80053dc:	0553      	lsls	r3, r2, #21
 80053de:	d527      	bpl.n	8005430 <__ssputs_r+0x8c>
 80053e0:	4629      	mov	r1, r5
 80053e2:	f7ff ff53 	bl	800528c <_malloc_r>
 80053e6:	4606      	mov	r6, r0
 80053e8:	b360      	cbz	r0, 8005444 <__ssputs_r+0xa0>
 80053ea:	6921      	ldr	r1, [r4, #16]
 80053ec:	464a      	mov	r2, r9
 80053ee:	f000 faeb 	bl	80059c8 <memcpy>
 80053f2:	89a3      	ldrh	r3, [r4, #12]
 80053f4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80053f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053fc:	81a3      	strh	r3, [r4, #12]
 80053fe:	6126      	str	r6, [r4, #16]
 8005400:	6165      	str	r5, [r4, #20]
 8005402:	444e      	add	r6, r9
 8005404:	eba5 0509 	sub.w	r5, r5, r9
 8005408:	6026      	str	r6, [r4, #0]
 800540a:	60a5      	str	r5, [r4, #8]
 800540c:	463e      	mov	r6, r7
 800540e:	42be      	cmp	r6, r7
 8005410:	d900      	bls.n	8005414 <__ssputs_r+0x70>
 8005412:	463e      	mov	r6, r7
 8005414:	6820      	ldr	r0, [r4, #0]
 8005416:	4632      	mov	r2, r6
 8005418:	4641      	mov	r1, r8
 800541a:	f000 faab 	bl	8005974 <memmove>
 800541e:	68a3      	ldr	r3, [r4, #8]
 8005420:	1b9b      	subs	r3, r3, r6
 8005422:	60a3      	str	r3, [r4, #8]
 8005424:	6823      	ldr	r3, [r4, #0]
 8005426:	4433      	add	r3, r6
 8005428:	6023      	str	r3, [r4, #0]
 800542a:	2000      	movs	r0, #0
 800542c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005430:	462a      	mov	r2, r5
 8005432:	f000 fad7 	bl	80059e4 <_realloc_r>
 8005436:	4606      	mov	r6, r0
 8005438:	2800      	cmp	r0, #0
 800543a:	d1e0      	bne.n	80053fe <__ssputs_r+0x5a>
 800543c:	6921      	ldr	r1, [r4, #16]
 800543e:	4650      	mov	r0, sl
 8005440:	f7ff feb8 	bl	80051b4 <_free_r>
 8005444:	230c      	movs	r3, #12
 8005446:	f8ca 3000 	str.w	r3, [sl]
 800544a:	89a3      	ldrh	r3, [r4, #12]
 800544c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005450:	81a3      	strh	r3, [r4, #12]
 8005452:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005456:	e7e9      	b.n	800542c <__ssputs_r+0x88>

08005458 <_svfiprintf_r>:
 8005458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800545c:	4698      	mov	r8, r3
 800545e:	898b      	ldrh	r3, [r1, #12]
 8005460:	061b      	lsls	r3, r3, #24
 8005462:	b09d      	sub	sp, #116	; 0x74
 8005464:	4607      	mov	r7, r0
 8005466:	460d      	mov	r5, r1
 8005468:	4614      	mov	r4, r2
 800546a:	d50e      	bpl.n	800548a <_svfiprintf_r+0x32>
 800546c:	690b      	ldr	r3, [r1, #16]
 800546e:	b963      	cbnz	r3, 800548a <_svfiprintf_r+0x32>
 8005470:	2140      	movs	r1, #64	; 0x40
 8005472:	f7ff ff0b 	bl	800528c <_malloc_r>
 8005476:	6028      	str	r0, [r5, #0]
 8005478:	6128      	str	r0, [r5, #16]
 800547a:	b920      	cbnz	r0, 8005486 <_svfiprintf_r+0x2e>
 800547c:	230c      	movs	r3, #12
 800547e:	603b      	str	r3, [r7, #0]
 8005480:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005484:	e0d0      	b.n	8005628 <_svfiprintf_r+0x1d0>
 8005486:	2340      	movs	r3, #64	; 0x40
 8005488:	616b      	str	r3, [r5, #20]
 800548a:	2300      	movs	r3, #0
 800548c:	9309      	str	r3, [sp, #36]	; 0x24
 800548e:	2320      	movs	r3, #32
 8005490:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005494:	f8cd 800c 	str.w	r8, [sp, #12]
 8005498:	2330      	movs	r3, #48	; 0x30
 800549a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005640 <_svfiprintf_r+0x1e8>
 800549e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80054a2:	f04f 0901 	mov.w	r9, #1
 80054a6:	4623      	mov	r3, r4
 80054a8:	469a      	mov	sl, r3
 80054aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054ae:	b10a      	cbz	r2, 80054b4 <_svfiprintf_r+0x5c>
 80054b0:	2a25      	cmp	r2, #37	; 0x25
 80054b2:	d1f9      	bne.n	80054a8 <_svfiprintf_r+0x50>
 80054b4:	ebba 0b04 	subs.w	fp, sl, r4
 80054b8:	d00b      	beq.n	80054d2 <_svfiprintf_r+0x7a>
 80054ba:	465b      	mov	r3, fp
 80054bc:	4622      	mov	r2, r4
 80054be:	4629      	mov	r1, r5
 80054c0:	4638      	mov	r0, r7
 80054c2:	f7ff ff6f 	bl	80053a4 <__ssputs_r>
 80054c6:	3001      	adds	r0, #1
 80054c8:	f000 80a9 	beq.w	800561e <_svfiprintf_r+0x1c6>
 80054cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054ce:	445a      	add	r2, fp
 80054d0:	9209      	str	r2, [sp, #36]	; 0x24
 80054d2:	f89a 3000 	ldrb.w	r3, [sl]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f000 80a1 	beq.w	800561e <_svfiprintf_r+0x1c6>
 80054dc:	2300      	movs	r3, #0
 80054de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054e6:	f10a 0a01 	add.w	sl, sl, #1
 80054ea:	9304      	str	r3, [sp, #16]
 80054ec:	9307      	str	r3, [sp, #28]
 80054ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80054f2:	931a      	str	r3, [sp, #104]	; 0x68
 80054f4:	4654      	mov	r4, sl
 80054f6:	2205      	movs	r2, #5
 80054f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054fc:	4850      	ldr	r0, [pc, #320]	; (8005640 <_svfiprintf_r+0x1e8>)
 80054fe:	f7fa fe77 	bl	80001f0 <memchr>
 8005502:	9a04      	ldr	r2, [sp, #16]
 8005504:	b9d8      	cbnz	r0, 800553e <_svfiprintf_r+0xe6>
 8005506:	06d0      	lsls	r0, r2, #27
 8005508:	bf44      	itt	mi
 800550a:	2320      	movmi	r3, #32
 800550c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005510:	0711      	lsls	r1, r2, #28
 8005512:	bf44      	itt	mi
 8005514:	232b      	movmi	r3, #43	; 0x2b
 8005516:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800551a:	f89a 3000 	ldrb.w	r3, [sl]
 800551e:	2b2a      	cmp	r3, #42	; 0x2a
 8005520:	d015      	beq.n	800554e <_svfiprintf_r+0xf6>
 8005522:	9a07      	ldr	r2, [sp, #28]
 8005524:	4654      	mov	r4, sl
 8005526:	2000      	movs	r0, #0
 8005528:	f04f 0c0a 	mov.w	ip, #10
 800552c:	4621      	mov	r1, r4
 800552e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005532:	3b30      	subs	r3, #48	; 0x30
 8005534:	2b09      	cmp	r3, #9
 8005536:	d94d      	bls.n	80055d4 <_svfiprintf_r+0x17c>
 8005538:	b1b0      	cbz	r0, 8005568 <_svfiprintf_r+0x110>
 800553a:	9207      	str	r2, [sp, #28]
 800553c:	e014      	b.n	8005568 <_svfiprintf_r+0x110>
 800553e:	eba0 0308 	sub.w	r3, r0, r8
 8005542:	fa09 f303 	lsl.w	r3, r9, r3
 8005546:	4313      	orrs	r3, r2
 8005548:	9304      	str	r3, [sp, #16]
 800554a:	46a2      	mov	sl, r4
 800554c:	e7d2      	b.n	80054f4 <_svfiprintf_r+0x9c>
 800554e:	9b03      	ldr	r3, [sp, #12]
 8005550:	1d19      	adds	r1, r3, #4
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	9103      	str	r1, [sp, #12]
 8005556:	2b00      	cmp	r3, #0
 8005558:	bfbb      	ittet	lt
 800555a:	425b      	neglt	r3, r3
 800555c:	f042 0202 	orrlt.w	r2, r2, #2
 8005560:	9307      	strge	r3, [sp, #28]
 8005562:	9307      	strlt	r3, [sp, #28]
 8005564:	bfb8      	it	lt
 8005566:	9204      	strlt	r2, [sp, #16]
 8005568:	7823      	ldrb	r3, [r4, #0]
 800556a:	2b2e      	cmp	r3, #46	; 0x2e
 800556c:	d10c      	bne.n	8005588 <_svfiprintf_r+0x130>
 800556e:	7863      	ldrb	r3, [r4, #1]
 8005570:	2b2a      	cmp	r3, #42	; 0x2a
 8005572:	d134      	bne.n	80055de <_svfiprintf_r+0x186>
 8005574:	9b03      	ldr	r3, [sp, #12]
 8005576:	1d1a      	adds	r2, r3, #4
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	9203      	str	r2, [sp, #12]
 800557c:	2b00      	cmp	r3, #0
 800557e:	bfb8      	it	lt
 8005580:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005584:	3402      	adds	r4, #2
 8005586:	9305      	str	r3, [sp, #20]
 8005588:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005650 <_svfiprintf_r+0x1f8>
 800558c:	7821      	ldrb	r1, [r4, #0]
 800558e:	2203      	movs	r2, #3
 8005590:	4650      	mov	r0, sl
 8005592:	f7fa fe2d 	bl	80001f0 <memchr>
 8005596:	b138      	cbz	r0, 80055a8 <_svfiprintf_r+0x150>
 8005598:	9b04      	ldr	r3, [sp, #16]
 800559a:	eba0 000a 	sub.w	r0, r0, sl
 800559e:	2240      	movs	r2, #64	; 0x40
 80055a0:	4082      	lsls	r2, r0
 80055a2:	4313      	orrs	r3, r2
 80055a4:	3401      	adds	r4, #1
 80055a6:	9304      	str	r3, [sp, #16]
 80055a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055ac:	4825      	ldr	r0, [pc, #148]	; (8005644 <_svfiprintf_r+0x1ec>)
 80055ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80055b2:	2206      	movs	r2, #6
 80055b4:	f7fa fe1c 	bl	80001f0 <memchr>
 80055b8:	2800      	cmp	r0, #0
 80055ba:	d038      	beq.n	800562e <_svfiprintf_r+0x1d6>
 80055bc:	4b22      	ldr	r3, [pc, #136]	; (8005648 <_svfiprintf_r+0x1f0>)
 80055be:	bb1b      	cbnz	r3, 8005608 <_svfiprintf_r+0x1b0>
 80055c0:	9b03      	ldr	r3, [sp, #12]
 80055c2:	3307      	adds	r3, #7
 80055c4:	f023 0307 	bic.w	r3, r3, #7
 80055c8:	3308      	adds	r3, #8
 80055ca:	9303      	str	r3, [sp, #12]
 80055cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055ce:	4433      	add	r3, r6
 80055d0:	9309      	str	r3, [sp, #36]	; 0x24
 80055d2:	e768      	b.n	80054a6 <_svfiprintf_r+0x4e>
 80055d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80055d8:	460c      	mov	r4, r1
 80055da:	2001      	movs	r0, #1
 80055dc:	e7a6      	b.n	800552c <_svfiprintf_r+0xd4>
 80055de:	2300      	movs	r3, #0
 80055e0:	3401      	adds	r4, #1
 80055e2:	9305      	str	r3, [sp, #20]
 80055e4:	4619      	mov	r1, r3
 80055e6:	f04f 0c0a 	mov.w	ip, #10
 80055ea:	4620      	mov	r0, r4
 80055ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055f0:	3a30      	subs	r2, #48	; 0x30
 80055f2:	2a09      	cmp	r2, #9
 80055f4:	d903      	bls.n	80055fe <_svfiprintf_r+0x1a6>
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d0c6      	beq.n	8005588 <_svfiprintf_r+0x130>
 80055fa:	9105      	str	r1, [sp, #20]
 80055fc:	e7c4      	b.n	8005588 <_svfiprintf_r+0x130>
 80055fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8005602:	4604      	mov	r4, r0
 8005604:	2301      	movs	r3, #1
 8005606:	e7f0      	b.n	80055ea <_svfiprintf_r+0x192>
 8005608:	ab03      	add	r3, sp, #12
 800560a:	9300      	str	r3, [sp, #0]
 800560c:	462a      	mov	r2, r5
 800560e:	4b0f      	ldr	r3, [pc, #60]	; (800564c <_svfiprintf_r+0x1f4>)
 8005610:	a904      	add	r1, sp, #16
 8005612:	4638      	mov	r0, r7
 8005614:	f3af 8000 	nop.w
 8005618:	1c42      	adds	r2, r0, #1
 800561a:	4606      	mov	r6, r0
 800561c:	d1d6      	bne.n	80055cc <_svfiprintf_r+0x174>
 800561e:	89ab      	ldrh	r3, [r5, #12]
 8005620:	065b      	lsls	r3, r3, #25
 8005622:	f53f af2d 	bmi.w	8005480 <_svfiprintf_r+0x28>
 8005626:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005628:	b01d      	add	sp, #116	; 0x74
 800562a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800562e:	ab03      	add	r3, sp, #12
 8005630:	9300      	str	r3, [sp, #0]
 8005632:	462a      	mov	r2, r5
 8005634:	4b05      	ldr	r3, [pc, #20]	; (800564c <_svfiprintf_r+0x1f4>)
 8005636:	a904      	add	r1, sp, #16
 8005638:	4638      	mov	r0, r7
 800563a:	f000 f879 	bl	8005730 <_printf_i>
 800563e:	e7eb      	b.n	8005618 <_svfiprintf_r+0x1c0>
 8005640:	08006960 	.word	0x08006960
 8005644:	0800696a 	.word	0x0800696a
 8005648:	00000000 	.word	0x00000000
 800564c:	080053a5 	.word	0x080053a5
 8005650:	08006966 	.word	0x08006966

08005654 <_printf_common>:
 8005654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005658:	4616      	mov	r6, r2
 800565a:	4699      	mov	r9, r3
 800565c:	688a      	ldr	r2, [r1, #8]
 800565e:	690b      	ldr	r3, [r1, #16]
 8005660:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005664:	4293      	cmp	r3, r2
 8005666:	bfb8      	it	lt
 8005668:	4613      	movlt	r3, r2
 800566a:	6033      	str	r3, [r6, #0]
 800566c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005670:	4607      	mov	r7, r0
 8005672:	460c      	mov	r4, r1
 8005674:	b10a      	cbz	r2, 800567a <_printf_common+0x26>
 8005676:	3301      	adds	r3, #1
 8005678:	6033      	str	r3, [r6, #0]
 800567a:	6823      	ldr	r3, [r4, #0]
 800567c:	0699      	lsls	r1, r3, #26
 800567e:	bf42      	ittt	mi
 8005680:	6833      	ldrmi	r3, [r6, #0]
 8005682:	3302      	addmi	r3, #2
 8005684:	6033      	strmi	r3, [r6, #0]
 8005686:	6825      	ldr	r5, [r4, #0]
 8005688:	f015 0506 	ands.w	r5, r5, #6
 800568c:	d106      	bne.n	800569c <_printf_common+0x48>
 800568e:	f104 0a19 	add.w	sl, r4, #25
 8005692:	68e3      	ldr	r3, [r4, #12]
 8005694:	6832      	ldr	r2, [r6, #0]
 8005696:	1a9b      	subs	r3, r3, r2
 8005698:	42ab      	cmp	r3, r5
 800569a:	dc26      	bgt.n	80056ea <_printf_common+0x96>
 800569c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056a0:	1e13      	subs	r3, r2, #0
 80056a2:	6822      	ldr	r2, [r4, #0]
 80056a4:	bf18      	it	ne
 80056a6:	2301      	movne	r3, #1
 80056a8:	0692      	lsls	r2, r2, #26
 80056aa:	d42b      	bmi.n	8005704 <_printf_common+0xb0>
 80056ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056b0:	4649      	mov	r1, r9
 80056b2:	4638      	mov	r0, r7
 80056b4:	47c0      	blx	r8
 80056b6:	3001      	adds	r0, #1
 80056b8:	d01e      	beq.n	80056f8 <_printf_common+0xa4>
 80056ba:	6823      	ldr	r3, [r4, #0]
 80056bc:	6922      	ldr	r2, [r4, #16]
 80056be:	f003 0306 	and.w	r3, r3, #6
 80056c2:	2b04      	cmp	r3, #4
 80056c4:	bf02      	ittt	eq
 80056c6:	68e5      	ldreq	r5, [r4, #12]
 80056c8:	6833      	ldreq	r3, [r6, #0]
 80056ca:	1aed      	subeq	r5, r5, r3
 80056cc:	68a3      	ldr	r3, [r4, #8]
 80056ce:	bf0c      	ite	eq
 80056d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056d4:	2500      	movne	r5, #0
 80056d6:	4293      	cmp	r3, r2
 80056d8:	bfc4      	itt	gt
 80056da:	1a9b      	subgt	r3, r3, r2
 80056dc:	18ed      	addgt	r5, r5, r3
 80056de:	2600      	movs	r6, #0
 80056e0:	341a      	adds	r4, #26
 80056e2:	42b5      	cmp	r5, r6
 80056e4:	d11a      	bne.n	800571c <_printf_common+0xc8>
 80056e6:	2000      	movs	r0, #0
 80056e8:	e008      	b.n	80056fc <_printf_common+0xa8>
 80056ea:	2301      	movs	r3, #1
 80056ec:	4652      	mov	r2, sl
 80056ee:	4649      	mov	r1, r9
 80056f0:	4638      	mov	r0, r7
 80056f2:	47c0      	blx	r8
 80056f4:	3001      	adds	r0, #1
 80056f6:	d103      	bne.n	8005700 <_printf_common+0xac>
 80056f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005700:	3501      	adds	r5, #1
 8005702:	e7c6      	b.n	8005692 <_printf_common+0x3e>
 8005704:	18e1      	adds	r1, r4, r3
 8005706:	1c5a      	adds	r2, r3, #1
 8005708:	2030      	movs	r0, #48	; 0x30
 800570a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800570e:	4422      	add	r2, r4
 8005710:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005714:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005718:	3302      	adds	r3, #2
 800571a:	e7c7      	b.n	80056ac <_printf_common+0x58>
 800571c:	2301      	movs	r3, #1
 800571e:	4622      	mov	r2, r4
 8005720:	4649      	mov	r1, r9
 8005722:	4638      	mov	r0, r7
 8005724:	47c0      	blx	r8
 8005726:	3001      	adds	r0, #1
 8005728:	d0e6      	beq.n	80056f8 <_printf_common+0xa4>
 800572a:	3601      	adds	r6, #1
 800572c:	e7d9      	b.n	80056e2 <_printf_common+0x8e>
	...

08005730 <_printf_i>:
 8005730:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005734:	7e0f      	ldrb	r7, [r1, #24]
 8005736:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005738:	2f78      	cmp	r7, #120	; 0x78
 800573a:	4691      	mov	r9, r2
 800573c:	4680      	mov	r8, r0
 800573e:	460c      	mov	r4, r1
 8005740:	469a      	mov	sl, r3
 8005742:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005746:	d807      	bhi.n	8005758 <_printf_i+0x28>
 8005748:	2f62      	cmp	r7, #98	; 0x62
 800574a:	d80a      	bhi.n	8005762 <_printf_i+0x32>
 800574c:	2f00      	cmp	r7, #0
 800574e:	f000 80d4 	beq.w	80058fa <_printf_i+0x1ca>
 8005752:	2f58      	cmp	r7, #88	; 0x58
 8005754:	f000 80c0 	beq.w	80058d8 <_printf_i+0x1a8>
 8005758:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800575c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005760:	e03a      	b.n	80057d8 <_printf_i+0xa8>
 8005762:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005766:	2b15      	cmp	r3, #21
 8005768:	d8f6      	bhi.n	8005758 <_printf_i+0x28>
 800576a:	a101      	add	r1, pc, #4	; (adr r1, 8005770 <_printf_i+0x40>)
 800576c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005770:	080057c9 	.word	0x080057c9
 8005774:	080057dd 	.word	0x080057dd
 8005778:	08005759 	.word	0x08005759
 800577c:	08005759 	.word	0x08005759
 8005780:	08005759 	.word	0x08005759
 8005784:	08005759 	.word	0x08005759
 8005788:	080057dd 	.word	0x080057dd
 800578c:	08005759 	.word	0x08005759
 8005790:	08005759 	.word	0x08005759
 8005794:	08005759 	.word	0x08005759
 8005798:	08005759 	.word	0x08005759
 800579c:	080058e1 	.word	0x080058e1
 80057a0:	08005809 	.word	0x08005809
 80057a4:	0800589b 	.word	0x0800589b
 80057a8:	08005759 	.word	0x08005759
 80057ac:	08005759 	.word	0x08005759
 80057b0:	08005903 	.word	0x08005903
 80057b4:	08005759 	.word	0x08005759
 80057b8:	08005809 	.word	0x08005809
 80057bc:	08005759 	.word	0x08005759
 80057c0:	08005759 	.word	0x08005759
 80057c4:	080058a3 	.word	0x080058a3
 80057c8:	682b      	ldr	r3, [r5, #0]
 80057ca:	1d1a      	adds	r2, r3, #4
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	602a      	str	r2, [r5, #0]
 80057d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057d8:	2301      	movs	r3, #1
 80057da:	e09f      	b.n	800591c <_printf_i+0x1ec>
 80057dc:	6820      	ldr	r0, [r4, #0]
 80057de:	682b      	ldr	r3, [r5, #0]
 80057e0:	0607      	lsls	r7, r0, #24
 80057e2:	f103 0104 	add.w	r1, r3, #4
 80057e6:	6029      	str	r1, [r5, #0]
 80057e8:	d501      	bpl.n	80057ee <_printf_i+0xbe>
 80057ea:	681e      	ldr	r6, [r3, #0]
 80057ec:	e003      	b.n	80057f6 <_printf_i+0xc6>
 80057ee:	0646      	lsls	r6, r0, #25
 80057f0:	d5fb      	bpl.n	80057ea <_printf_i+0xba>
 80057f2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80057f6:	2e00      	cmp	r6, #0
 80057f8:	da03      	bge.n	8005802 <_printf_i+0xd2>
 80057fa:	232d      	movs	r3, #45	; 0x2d
 80057fc:	4276      	negs	r6, r6
 80057fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005802:	485a      	ldr	r0, [pc, #360]	; (800596c <_printf_i+0x23c>)
 8005804:	230a      	movs	r3, #10
 8005806:	e012      	b.n	800582e <_printf_i+0xfe>
 8005808:	682b      	ldr	r3, [r5, #0]
 800580a:	6820      	ldr	r0, [r4, #0]
 800580c:	1d19      	adds	r1, r3, #4
 800580e:	6029      	str	r1, [r5, #0]
 8005810:	0605      	lsls	r5, r0, #24
 8005812:	d501      	bpl.n	8005818 <_printf_i+0xe8>
 8005814:	681e      	ldr	r6, [r3, #0]
 8005816:	e002      	b.n	800581e <_printf_i+0xee>
 8005818:	0641      	lsls	r1, r0, #25
 800581a:	d5fb      	bpl.n	8005814 <_printf_i+0xe4>
 800581c:	881e      	ldrh	r6, [r3, #0]
 800581e:	4853      	ldr	r0, [pc, #332]	; (800596c <_printf_i+0x23c>)
 8005820:	2f6f      	cmp	r7, #111	; 0x6f
 8005822:	bf0c      	ite	eq
 8005824:	2308      	moveq	r3, #8
 8005826:	230a      	movne	r3, #10
 8005828:	2100      	movs	r1, #0
 800582a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800582e:	6865      	ldr	r5, [r4, #4]
 8005830:	60a5      	str	r5, [r4, #8]
 8005832:	2d00      	cmp	r5, #0
 8005834:	bfa2      	ittt	ge
 8005836:	6821      	ldrge	r1, [r4, #0]
 8005838:	f021 0104 	bicge.w	r1, r1, #4
 800583c:	6021      	strge	r1, [r4, #0]
 800583e:	b90e      	cbnz	r6, 8005844 <_printf_i+0x114>
 8005840:	2d00      	cmp	r5, #0
 8005842:	d04b      	beq.n	80058dc <_printf_i+0x1ac>
 8005844:	4615      	mov	r5, r2
 8005846:	fbb6 f1f3 	udiv	r1, r6, r3
 800584a:	fb03 6711 	mls	r7, r3, r1, r6
 800584e:	5dc7      	ldrb	r7, [r0, r7]
 8005850:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005854:	4637      	mov	r7, r6
 8005856:	42bb      	cmp	r3, r7
 8005858:	460e      	mov	r6, r1
 800585a:	d9f4      	bls.n	8005846 <_printf_i+0x116>
 800585c:	2b08      	cmp	r3, #8
 800585e:	d10b      	bne.n	8005878 <_printf_i+0x148>
 8005860:	6823      	ldr	r3, [r4, #0]
 8005862:	07de      	lsls	r6, r3, #31
 8005864:	d508      	bpl.n	8005878 <_printf_i+0x148>
 8005866:	6923      	ldr	r3, [r4, #16]
 8005868:	6861      	ldr	r1, [r4, #4]
 800586a:	4299      	cmp	r1, r3
 800586c:	bfde      	ittt	le
 800586e:	2330      	movle	r3, #48	; 0x30
 8005870:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005874:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005878:	1b52      	subs	r2, r2, r5
 800587a:	6122      	str	r2, [r4, #16]
 800587c:	f8cd a000 	str.w	sl, [sp]
 8005880:	464b      	mov	r3, r9
 8005882:	aa03      	add	r2, sp, #12
 8005884:	4621      	mov	r1, r4
 8005886:	4640      	mov	r0, r8
 8005888:	f7ff fee4 	bl	8005654 <_printf_common>
 800588c:	3001      	adds	r0, #1
 800588e:	d14a      	bne.n	8005926 <_printf_i+0x1f6>
 8005890:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005894:	b004      	add	sp, #16
 8005896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800589a:	6823      	ldr	r3, [r4, #0]
 800589c:	f043 0320 	orr.w	r3, r3, #32
 80058a0:	6023      	str	r3, [r4, #0]
 80058a2:	4833      	ldr	r0, [pc, #204]	; (8005970 <_printf_i+0x240>)
 80058a4:	2778      	movs	r7, #120	; 0x78
 80058a6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80058aa:	6823      	ldr	r3, [r4, #0]
 80058ac:	6829      	ldr	r1, [r5, #0]
 80058ae:	061f      	lsls	r7, r3, #24
 80058b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80058b4:	d402      	bmi.n	80058bc <_printf_i+0x18c>
 80058b6:	065f      	lsls	r7, r3, #25
 80058b8:	bf48      	it	mi
 80058ba:	b2b6      	uxthmi	r6, r6
 80058bc:	07df      	lsls	r7, r3, #31
 80058be:	bf48      	it	mi
 80058c0:	f043 0320 	orrmi.w	r3, r3, #32
 80058c4:	6029      	str	r1, [r5, #0]
 80058c6:	bf48      	it	mi
 80058c8:	6023      	strmi	r3, [r4, #0]
 80058ca:	b91e      	cbnz	r6, 80058d4 <_printf_i+0x1a4>
 80058cc:	6823      	ldr	r3, [r4, #0]
 80058ce:	f023 0320 	bic.w	r3, r3, #32
 80058d2:	6023      	str	r3, [r4, #0]
 80058d4:	2310      	movs	r3, #16
 80058d6:	e7a7      	b.n	8005828 <_printf_i+0xf8>
 80058d8:	4824      	ldr	r0, [pc, #144]	; (800596c <_printf_i+0x23c>)
 80058da:	e7e4      	b.n	80058a6 <_printf_i+0x176>
 80058dc:	4615      	mov	r5, r2
 80058de:	e7bd      	b.n	800585c <_printf_i+0x12c>
 80058e0:	682b      	ldr	r3, [r5, #0]
 80058e2:	6826      	ldr	r6, [r4, #0]
 80058e4:	6961      	ldr	r1, [r4, #20]
 80058e6:	1d18      	adds	r0, r3, #4
 80058e8:	6028      	str	r0, [r5, #0]
 80058ea:	0635      	lsls	r5, r6, #24
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	d501      	bpl.n	80058f4 <_printf_i+0x1c4>
 80058f0:	6019      	str	r1, [r3, #0]
 80058f2:	e002      	b.n	80058fa <_printf_i+0x1ca>
 80058f4:	0670      	lsls	r0, r6, #25
 80058f6:	d5fb      	bpl.n	80058f0 <_printf_i+0x1c0>
 80058f8:	8019      	strh	r1, [r3, #0]
 80058fa:	2300      	movs	r3, #0
 80058fc:	6123      	str	r3, [r4, #16]
 80058fe:	4615      	mov	r5, r2
 8005900:	e7bc      	b.n	800587c <_printf_i+0x14c>
 8005902:	682b      	ldr	r3, [r5, #0]
 8005904:	1d1a      	adds	r2, r3, #4
 8005906:	602a      	str	r2, [r5, #0]
 8005908:	681d      	ldr	r5, [r3, #0]
 800590a:	6862      	ldr	r2, [r4, #4]
 800590c:	2100      	movs	r1, #0
 800590e:	4628      	mov	r0, r5
 8005910:	f7fa fc6e 	bl	80001f0 <memchr>
 8005914:	b108      	cbz	r0, 800591a <_printf_i+0x1ea>
 8005916:	1b40      	subs	r0, r0, r5
 8005918:	6060      	str	r0, [r4, #4]
 800591a:	6863      	ldr	r3, [r4, #4]
 800591c:	6123      	str	r3, [r4, #16]
 800591e:	2300      	movs	r3, #0
 8005920:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005924:	e7aa      	b.n	800587c <_printf_i+0x14c>
 8005926:	6923      	ldr	r3, [r4, #16]
 8005928:	462a      	mov	r2, r5
 800592a:	4649      	mov	r1, r9
 800592c:	4640      	mov	r0, r8
 800592e:	47d0      	blx	sl
 8005930:	3001      	adds	r0, #1
 8005932:	d0ad      	beq.n	8005890 <_printf_i+0x160>
 8005934:	6823      	ldr	r3, [r4, #0]
 8005936:	079b      	lsls	r3, r3, #30
 8005938:	d413      	bmi.n	8005962 <_printf_i+0x232>
 800593a:	68e0      	ldr	r0, [r4, #12]
 800593c:	9b03      	ldr	r3, [sp, #12]
 800593e:	4298      	cmp	r0, r3
 8005940:	bfb8      	it	lt
 8005942:	4618      	movlt	r0, r3
 8005944:	e7a6      	b.n	8005894 <_printf_i+0x164>
 8005946:	2301      	movs	r3, #1
 8005948:	4632      	mov	r2, r6
 800594a:	4649      	mov	r1, r9
 800594c:	4640      	mov	r0, r8
 800594e:	47d0      	blx	sl
 8005950:	3001      	adds	r0, #1
 8005952:	d09d      	beq.n	8005890 <_printf_i+0x160>
 8005954:	3501      	adds	r5, #1
 8005956:	68e3      	ldr	r3, [r4, #12]
 8005958:	9903      	ldr	r1, [sp, #12]
 800595a:	1a5b      	subs	r3, r3, r1
 800595c:	42ab      	cmp	r3, r5
 800595e:	dcf2      	bgt.n	8005946 <_printf_i+0x216>
 8005960:	e7eb      	b.n	800593a <_printf_i+0x20a>
 8005962:	2500      	movs	r5, #0
 8005964:	f104 0619 	add.w	r6, r4, #25
 8005968:	e7f5      	b.n	8005956 <_printf_i+0x226>
 800596a:	bf00      	nop
 800596c:	08006971 	.word	0x08006971
 8005970:	08006982 	.word	0x08006982

08005974 <memmove>:
 8005974:	4288      	cmp	r0, r1
 8005976:	b510      	push	{r4, lr}
 8005978:	eb01 0402 	add.w	r4, r1, r2
 800597c:	d902      	bls.n	8005984 <memmove+0x10>
 800597e:	4284      	cmp	r4, r0
 8005980:	4623      	mov	r3, r4
 8005982:	d807      	bhi.n	8005994 <memmove+0x20>
 8005984:	1e43      	subs	r3, r0, #1
 8005986:	42a1      	cmp	r1, r4
 8005988:	d008      	beq.n	800599c <memmove+0x28>
 800598a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800598e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005992:	e7f8      	b.n	8005986 <memmove+0x12>
 8005994:	4402      	add	r2, r0
 8005996:	4601      	mov	r1, r0
 8005998:	428a      	cmp	r2, r1
 800599a:	d100      	bne.n	800599e <memmove+0x2a>
 800599c:	bd10      	pop	{r4, pc}
 800599e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80059a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80059a6:	e7f7      	b.n	8005998 <memmove+0x24>

080059a8 <_sbrk_r>:
 80059a8:	b538      	push	{r3, r4, r5, lr}
 80059aa:	4d06      	ldr	r5, [pc, #24]	; (80059c4 <_sbrk_r+0x1c>)
 80059ac:	2300      	movs	r3, #0
 80059ae:	4604      	mov	r4, r0
 80059b0:	4608      	mov	r0, r1
 80059b2:	602b      	str	r3, [r5, #0]
 80059b4:	f7fb fdb8 	bl	8001528 <_sbrk>
 80059b8:	1c43      	adds	r3, r0, #1
 80059ba:	d102      	bne.n	80059c2 <_sbrk_r+0x1a>
 80059bc:	682b      	ldr	r3, [r5, #0]
 80059be:	b103      	cbz	r3, 80059c2 <_sbrk_r+0x1a>
 80059c0:	6023      	str	r3, [r4, #0]
 80059c2:	bd38      	pop	{r3, r4, r5, pc}
 80059c4:	20000318 	.word	0x20000318

080059c8 <memcpy>:
 80059c8:	440a      	add	r2, r1
 80059ca:	4291      	cmp	r1, r2
 80059cc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80059d0:	d100      	bne.n	80059d4 <memcpy+0xc>
 80059d2:	4770      	bx	lr
 80059d4:	b510      	push	{r4, lr}
 80059d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059de:	4291      	cmp	r1, r2
 80059e0:	d1f9      	bne.n	80059d6 <memcpy+0xe>
 80059e2:	bd10      	pop	{r4, pc}

080059e4 <_realloc_r>:
 80059e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059e8:	4680      	mov	r8, r0
 80059ea:	4614      	mov	r4, r2
 80059ec:	460e      	mov	r6, r1
 80059ee:	b921      	cbnz	r1, 80059fa <_realloc_r+0x16>
 80059f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059f4:	4611      	mov	r1, r2
 80059f6:	f7ff bc49 	b.w	800528c <_malloc_r>
 80059fa:	b92a      	cbnz	r2, 8005a08 <_realloc_r+0x24>
 80059fc:	f7ff fbda 	bl	80051b4 <_free_r>
 8005a00:	4625      	mov	r5, r4
 8005a02:	4628      	mov	r0, r5
 8005a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a08:	f000 f81b 	bl	8005a42 <_malloc_usable_size_r>
 8005a0c:	4284      	cmp	r4, r0
 8005a0e:	4607      	mov	r7, r0
 8005a10:	d802      	bhi.n	8005a18 <_realloc_r+0x34>
 8005a12:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005a16:	d812      	bhi.n	8005a3e <_realloc_r+0x5a>
 8005a18:	4621      	mov	r1, r4
 8005a1a:	4640      	mov	r0, r8
 8005a1c:	f7ff fc36 	bl	800528c <_malloc_r>
 8005a20:	4605      	mov	r5, r0
 8005a22:	2800      	cmp	r0, #0
 8005a24:	d0ed      	beq.n	8005a02 <_realloc_r+0x1e>
 8005a26:	42bc      	cmp	r4, r7
 8005a28:	4622      	mov	r2, r4
 8005a2a:	4631      	mov	r1, r6
 8005a2c:	bf28      	it	cs
 8005a2e:	463a      	movcs	r2, r7
 8005a30:	f7ff ffca 	bl	80059c8 <memcpy>
 8005a34:	4631      	mov	r1, r6
 8005a36:	4640      	mov	r0, r8
 8005a38:	f7ff fbbc 	bl	80051b4 <_free_r>
 8005a3c:	e7e1      	b.n	8005a02 <_realloc_r+0x1e>
 8005a3e:	4635      	mov	r5, r6
 8005a40:	e7df      	b.n	8005a02 <_realloc_r+0x1e>

08005a42 <_malloc_usable_size_r>:
 8005a42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a46:	1f18      	subs	r0, r3, #4
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	bfbc      	itt	lt
 8005a4c:	580b      	ldrlt	r3, [r1, r0]
 8005a4e:	18c0      	addlt	r0, r0, r3
 8005a50:	4770      	bx	lr
	...

08005a54 <pow>:
 8005a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a56:	ed2d 8b02 	vpush	{d8}
 8005a5a:	eeb0 8a40 	vmov.f32	s16, s0
 8005a5e:	eef0 8a60 	vmov.f32	s17, s1
 8005a62:	ec55 4b11 	vmov	r4, r5, d1
 8005a66:	f000 f873 	bl	8005b50 <__ieee754_pow>
 8005a6a:	4622      	mov	r2, r4
 8005a6c:	462b      	mov	r3, r5
 8005a6e:	4620      	mov	r0, r4
 8005a70:	4629      	mov	r1, r5
 8005a72:	ec57 6b10 	vmov	r6, r7, d0
 8005a76:	f7fb f861 	bl	8000b3c <__aeabi_dcmpun>
 8005a7a:	2800      	cmp	r0, #0
 8005a7c:	d13b      	bne.n	8005af6 <pow+0xa2>
 8005a7e:	ec51 0b18 	vmov	r0, r1, d8
 8005a82:	2200      	movs	r2, #0
 8005a84:	2300      	movs	r3, #0
 8005a86:	f7fb f827 	bl	8000ad8 <__aeabi_dcmpeq>
 8005a8a:	b1b8      	cbz	r0, 8005abc <pow+0x68>
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	2300      	movs	r3, #0
 8005a90:	4620      	mov	r0, r4
 8005a92:	4629      	mov	r1, r5
 8005a94:	f7fb f820 	bl	8000ad8 <__aeabi_dcmpeq>
 8005a98:	2800      	cmp	r0, #0
 8005a9a:	d146      	bne.n	8005b2a <pow+0xd6>
 8005a9c:	ec45 4b10 	vmov	d0, r4, r5
 8005aa0:	f000 f848 	bl	8005b34 <finite>
 8005aa4:	b338      	cbz	r0, 8005af6 <pow+0xa2>
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	4620      	mov	r0, r4
 8005aac:	4629      	mov	r1, r5
 8005aae:	f7fb f81d 	bl	8000aec <__aeabi_dcmplt>
 8005ab2:	b300      	cbz	r0, 8005af6 <pow+0xa2>
 8005ab4:	f7ff fb52 	bl	800515c <__errno>
 8005ab8:	2322      	movs	r3, #34	; 0x22
 8005aba:	e01b      	b.n	8005af4 <pow+0xa0>
 8005abc:	ec47 6b10 	vmov	d0, r6, r7
 8005ac0:	f000 f838 	bl	8005b34 <finite>
 8005ac4:	b9e0      	cbnz	r0, 8005b00 <pow+0xac>
 8005ac6:	eeb0 0a48 	vmov.f32	s0, s16
 8005aca:	eef0 0a68 	vmov.f32	s1, s17
 8005ace:	f000 f831 	bl	8005b34 <finite>
 8005ad2:	b1a8      	cbz	r0, 8005b00 <pow+0xac>
 8005ad4:	ec45 4b10 	vmov	d0, r4, r5
 8005ad8:	f000 f82c 	bl	8005b34 <finite>
 8005adc:	b180      	cbz	r0, 8005b00 <pow+0xac>
 8005ade:	4632      	mov	r2, r6
 8005ae0:	463b      	mov	r3, r7
 8005ae2:	4630      	mov	r0, r6
 8005ae4:	4639      	mov	r1, r7
 8005ae6:	f7fb f829 	bl	8000b3c <__aeabi_dcmpun>
 8005aea:	2800      	cmp	r0, #0
 8005aec:	d0e2      	beq.n	8005ab4 <pow+0x60>
 8005aee:	f7ff fb35 	bl	800515c <__errno>
 8005af2:	2321      	movs	r3, #33	; 0x21
 8005af4:	6003      	str	r3, [r0, #0]
 8005af6:	ecbd 8b02 	vpop	{d8}
 8005afa:	ec47 6b10 	vmov	d0, r6, r7
 8005afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b00:	2200      	movs	r2, #0
 8005b02:	2300      	movs	r3, #0
 8005b04:	4630      	mov	r0, r6
 8005b06:	4639      	mov	r1, r7
 8005b08:	f7fa ffe6 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b0c:	2800      	cmp	r0, #0
 8005b0e:	d0f2      	beq.n	8005af6 <pow+0xa2>
 8005b10:	eeb0 0a48 	vmov.f32	s0, s16
 8005b14:	eef0 0a68 	vmov.f32	s1, s17
 8005b18:	f000 f80c 	bl	8005b34 <finite>
 8005b1c:	2800      	cmp	r0, #0
 8005b1e:	d0ea      	beq.n	8005af6 <pow+0xa2>
 8005b20:	ec45 4b10 	vmov	d0, r4, r5
 8005b24:	f000 f806 	bl	8005b34 <finite>
 8005b28:	e7c3      	b.n	8005ab2 <pow+0x5e>
 8005b2a:	4f01      	ldr	r7, [pc, #4]	; (8005b30 <pow+0xdc>)
 8005b2c:	2600      	movs	r6, #0
 8005b2e:	e7e2      	b.n	8005af6 <pow+0xa2>
 8005b30:	3ff00000 	.word	0x3ff00000

08005b34 <finite>:
 8005b34:	b082      	sub	sp, #8
 8005b36:	ed8d 0b00 	vstr	d0, [sp]
 8005b3a:	9801      	ldr	r0, [sp, #4]
 8005b3c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005b40:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005b44:	0fc0      	lsrs	r0, r0, #31
 8005b46:	b002      	add	sp, #8
 8005b48:	4770      	bx	lr
 8005b4a:	0000      	movs	r0, r0
 8005b4c:	0000      	movs	r0, r0
	...

08005b50 <__ieee754_pow>:
 8005b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b54:	ed2d 8b06 	vpush	{d8-d10}
 8005b58:	b089      	sub	sp, #36	; 0x24
 8005b5a:	ed8d 1b00 	vstr	d1, [sp]
 8005b5e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8005b62:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8005b66:	ea58 0102 	orrs.w	r1, r8, r2
 8005b6a:	ec57 6b10 	vmov	r6, r7, d0
 8005b6e:	d115      	bne.n	8005b9c <__ieee754_pow+0x4c>
 8005b70:	19b3      	adds	r3, r6, r6
 8005b72:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8005b76:	4152      	adcs	r2, r2
 8005b78:	4299      	cmp	r1, r3
 8005b7a:	4b89      	ldr	r3, [pc, #548]	; (8005da0 <__ieee754_pow+0x250>)
 8005b7c:	4193      	sbcs	r3, r2
 8005b7e:	f080 84d1 	bcs.w	8006524 <__ieee754_pow+0x9d4>
 8005b82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b86:	4630      	mov	r0, r6
 8005b88:	4639      	mov	r1, r7
 8005b8a:	f7fa fb87 	bl	800029c <__adddf3>
 8005b8e:	ec41 0b10 	vmov	d0, r0, r1
 8005b92:	b009      	add	sp, #36	; 0x24
 8005b94:	ecbd 8b06 	vpop	{d8-d10}
 8005b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b9c:	4b81      	ldr	r3, [pc, #516]	; (8005da4 <__ieee754_pow+0x254>)
 8005b9e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8005ba2:	429c      	cmp	r4, r3
 8005ba4:	ee10 aa10 	vmov	sl, s0
 8005ba8:	463d      	mov	r5, r7
 8005baa:	dc06      	bgt.n	8005bba <__ieee754_pow+0x6a>
 8005bac:	d101      	bne.n	8005bb2 <__ieee754_pow+0x62>
 8005bae:	2e00      	cmp	r6, #0
 8005bb0:	d1e7      	bne.n	8005b82 <__ieee754_pow+0x32>
 8005bb2:	4598      	cmp	r8, r3
 8005bb4:	dc01      	bgt.n	8005bba <__ieee754_pow+0x6a>
 8005bb6:	d10f      	bne.n	8005bd8 <__ieee754_pow+0x88>
 8005bb8:	b172      	cbz	r2, 8005bd8 <__ieee754_pow+0x88>
 8005bba:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8005bbe:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8005bc2:	ea55 050a 	orrs.w	r5, r5, sl
 8005bc6:	d1dc      	bne.n	8005b82 <__ieee754_pow+0x32>
 8005bc8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005bcc:	18db      	adds	r3, r3, r3
 8005bce:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8005bd2:	4152      	adcs	r2, r2
 8005bd4:	429d      	cmp	r5, r3
 8005bd6:	e7d0      	b.n	8005b7a <__ieee754_pow+0x2a>
 8005bd8:	2d00      	cmp	r5, #0
 8005bda:	da3b      	bge.n	8005c54 <__ieee754_pow+0x104>
 8005bdc:	4b72      	ldr	r3, [pc, #456]	; (8005da8 <__ieee754_pow+0x258>)
 8005bde:	4598      	cmp	r8, r3
 8005be0:	dc51      	bgt.n	8005c86 <__ieee754_pow+0x136>
 8005be2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005be6:	4598      	cmp	r8, r3
 8005be8:	f340 84ab 	ble.w	8006542 <__ieee754_pow+0x9f2>
 8005bec:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005bf0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005bf4:	2b14      	cmp	r3, #20
 8005bf6:	dd0f      	ble.n	8005c18 <__ieee754_pow+0xc8>
 8005bf8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005bfc:	fa22 f103 	lsr.w	r1, r2, r3
 8005c00:	fa01 f303 	lsl.w	r3, r1, r3
 8005c04:	4293      	cmp	r3, r2
 8005c06:	f040 849c 	bne.w	8006542 <__ieee754_pow+0x9f2>
 8005c0a:	f001 0101 	and.w	r1, r1, #1
 8005c0e:	f1c1 0302 	rsb	r3, r1, #2
 8005c12:	9304      	str	r3, [sp, #16]
 8005c14:	b182      	cbz	r2, 8005c38 <__ieee754_pow+0xe8>
 8005c16:	e05f      	b.n	8005cd8 <__ieee754_pow+0x188>
 8005c18:	2a00      	cmp	r2, #0
 8005c1a:	d15b      	bne.n	8005cd4 <__ieee754_pow+0x184>
 8005c1c:	f1c3 0314 	rsb	r3, r3, #20
 8005c20:	fa48 f103 	asr.w	r1, r8, r3
 8005c24:	fa01 f303 	lsl.w	r3, r1, r3
 8005c28:	4543      	cmp	r3, r8
 8005c2a:	f040 8487 	bne.w	800653c <__ieee754_pow+0x9ec>
 8005c2e:	f001 0101 	and.w	r1, r1, #1
 8005c32:	f1c1 0302 	rsb	r3, r1, #2
 8005c36:	9304      	str	r3, [sp, #16]
 8005c38:	4b5c      	ldr	r3, [pc, #368]	; (8005dac <__ieee754_pow+0x25c>)
 8005c3a:	4598      	cmp	r8, r3
 8005c3c:	d132      	bne.n	8005ca4 <__ieee754_pow+0x154>
 8005c3e:	f1b9 0f00 	cmp.w	r9, #0
 8005c42:	f280 8477 	bge.w	8006534 <__ieee754_pow+0x9e4>
 8005c46:	4959      	ldr	r1, [pc, #356]	; (8005dac <__ieee754_pow+0x25c>)
 8005c48:	4632      	mov	r2, r6
 8005c4a:	463b      	mov	r3, r7
 8005c4c:	2000      	movs	r0, #0
 8005c4e:	f7fa fe05 	bl	800085c <__aeabi_ddiv>
 8005c52:	e79c      	b.n	8005b8e <__ieee754_pow+0x3e>
 8005c54:	2300      	movs	r3, #0
 8005c56:	9304      	str	r3, [sp, #16]
 8005c58:	2a00      	cmp	r2, #0
 8005c5a:	d13d      	bne.n	8005cd8 <__ieee754_pow+0x188>
 8005c5c:	4b51      	ldr	r3, [pc, #324]	; (8005da4 <__ieee754_pow+0x254>)
 8005c5e:	4598      	cmp	r8, r3
 8005c60:	d1ea      	bne.n	8005c38 <__ieee754_pow+0xe8>
 8005c62:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005c66:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005c6a:	ea53 030a 	orrs.w	r3, r3, sl
 8005c6e:	f000 8459 	beq.w	8006524 <__ieee754_pow+0x9d4>
 8005c72:	4b4f      	ldr	r3, [pc, #316]	; (8005db0 <__ieee754_pow+0x260>)
 8005c74:	429c      	cmp	r4, r3
 8005c76:	dd08      	ble.n	8005c8a <__ieee754_pow+0x13a>
 8005c78:	f1b9 0f00 	cmp.w	r9, #0
 8005c7c:	f2c0 8456 	blt.w	800652c <__ieee754_pow+0x9dc>
 8005c80:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c84:	e783      	b.n	8005b8e <__ieee754_pow+0x3e>
 8005c86:	2302      	movs	r3, #2
 8005c88:	e7e5      	b.n	8005c56 <__ieee754_pow+0x106>
 8005c8a:	f1b9 0f00 	cmp.w	r9, #0
 8005c8e:	f04f 0000 	mov.w	r0, #0
 8005c92:	f04f 0100 	mov.w	r1, #0
 8005c96:	f6bf af7a 	bge.w	8005b8e <__ieee754_pow+0x3e>
 8005c9a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8005c9e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005ca2:	e774      	b.n	8005b8e <__ieee754_pow+0x3e>
 8005ca4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8005ca8:	d106      	bne.n	8005cb8 <__ieee754_pow+0x168>
 8005caa:	4632      	mov	r2, r6
 8005cac:	463b      	mov	r3, r7
 8005cae:	4630      	mov	r0, r6
 8005cb0:	4639      	mov	r1, r7
 8005cb2:	f7fa fca9 	bl	8000608 <__aeabi_dmul>
 8005cb6:	e76a      	b.n	8005b8e <__ieee754_pow+0x3e>
 8005cb8:	4b3e      	ldr	r3, [pc, #248]	; (8005db4 <__ieee754_pow+0x264>)
 8005cba:	4599      	cmp	r9, r3
 8005cbc:	d10c      	bne.n	8005cd8 <__ieee754_pow+0x188>
 8005cbe:	2d00      	cmp	r5, #0
 8005cc0:	db0a      	blt.n	8005cd8 <__ieee754_pow+0x188>
 8005cc2:	ec47 6b10 	vmov	d0, r6, r7
 8005cc6:	b009      	add	sp, #36	; 0x24
 8005cc8:	ecbd 8b06 	vpop	{d8-d10}
 8005ccc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cd0:	f000 bd20 	b.w	8006714 <__ieee754_sqrt>
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	9304      	str	r3, [sp, #16]
 8005cd8:	ec47 6b10 	vmov	d0, r6, r7
 8005cdc:	f000 fc62 	bl	80065a4 <fabs>
 8005ce0:	ec51 0b10 	vmov	r0, r1, d0
 8005ce4:	f1ba 0f00 	cmp.w	sl, #0
 8005ce8:	d129      	bne.n	8005d3e <__ieee754_pow+0x1ee>
 8005cea:	b124      	cbz	r4, 8005cf6 <__ieee754_pow+0x1a6>
 8005cec:	4b2f      	ldr	r3, [pc, #188]	; (8005dac <__ieee754_pow+0x25c>)
 8005cee:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d123      	bne.n	8005d3e <__ieee754_pow+0x1ee>
 8005cf6:	f1b9 0f00 	cmp.w	r9, #0
 8005cfa:	da05      	bge.n	8005d08 <__ieee754_pow+0x1b8>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	460b      	mov	r3, r1
 8005d00:	2000      	movs	r0, #0
 8005d02:	492a      	ldr	r1, [pc, #168]	; (8005dac <__ieee754_pow+0x25c>)
 8005d04:	f7fa fdaa 	bl	800085c <__aeabi_ddiv>
 8005d08:	2d00      	cmp	r5, #0
 8005d0a:	f6bf af40 	bge.w	8005b8e <__ieee754_pow+0x3e>
 8005d0e:	9b04      	ldr	r3, [sp, #16]
 8005d10:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005d14:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005d18:	431c      	orrs	r4, r3
 8005d1a:	d108      	bne.n	8005d2e <__ieee754_pow+0x1de>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	460b      	mov	r3, r1
 8005d20:	4610      	mov	r0, r2
 8005d22:	4619      	mov	r1, r3
 8005d24:	f7fa fab8 	bl	8000298 <__aeabi_dsub>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	e78f      	b.n	8005c4e <__ieee754_pow+0xfe>
 8005d2e:	9b04      	ldr	r3, [sp, #16]
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	f47f af2c 	bne.w	8005b8e <__ieee754_pow+0x3e>
 8005d36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	e727      	b.n	8005b8e <__ieee754_pow+0x3e>
 8005d3e:	0feb      	lsrs	r3, r5, #31
 8005d40:	3b01      	subs	r3, #1
 8005d42:	9306      	str	r3, [sp, #24]
 8005d44:	9a06      	ldr	r2, [sp, #24]
 8005d46:	9b04      	ldr	r3, [sp, #16]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	d102      	bne.n	8005d52 <__ieee754_pow+0x202>
 8005d4c:	4632      	mov	r2, r6
 8005d4e:	463b      	mov	r3, r7
 8005d50:	e7e6      	b.n	8005d20 <__ieee754_pow+0x1d0>
 8005d52:	4b19      	ldr	r3, [pc, #100]	; (8005db8 <__ieee754_pow+0x268>)
 8005d54:	4598      	cmp	r8, r3
 8005d56:	f340 80fb 	ble.w	8005f50 <__ieee754_pow+0x400>
 8005d5a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005d5e:	4598      	cmp	r8, r3
 8005d60:	4b13      	ldr	r3, [pc, #76]	; (8005db0 <__ieee754_pow+0x260>)
 8005d62:	dd0c      	ble.n	8005d7e <__ieee754_pow+0x22e>
 8005d64:	429c      	cmp	r4, r3
 8005d66:	dc0f      	bgt.n	8005d88 <__ieee754_pow+0x238>
 8005d68:	f1b9 0f00 	cmp.w	r9, #0
 8005d6c:	da0f      	bge.n	8005d8e <__ieee754_pow+0x23e>
 8005d6e:	2000      	movs	r0, #0
 8005d70:	b009      	add	sp, #36	; 0x24
 8005d72:	ecbd 8b06 	vpop	{d8-d10}
 8005d76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d7a:	f000 bcc2 	b.w	8006702 <__math_oflow>
 8005d7e:	429c      	cmp	r4, r3
 8005d80:	dbf2      	blt.n	8005d68 <__ieee754_pow+0x218>
 8005d82:	4b0a      	ldr	r3, [pc, #40]	; (8005dac <__ieee754_pow+0x25c>)
 8005d84:	429c      	cmp	r4, r3
 8005d86:	dd19      	ble.n	8005dbc <__ieee754_pow+0x26c>
 8005d88:	f1b9 0f00 	cmp.w	r9, #0
 8005d8c:	dcef      	bgt.n	8005d6e <__ieee754_pow+0x21e>
 8005d8e:	2000      	movs	r0, #0
 8005d90:	b009      	add	sp, #36	; 0x24
 8005d92:	ecbd 8b06 	vpop	{d8-d10}
 8005d96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d9a:	f000 bca9 	b.w	80066f0 <__math_uflow>
 8005d9e:	bf00      	nop
 8005da0:	fff00000 	.word	0xfff00000
 8005da4:	7ff00000 	.word	0x7ff00000
 8005da8:	433fffff 	.word	0x433fffff
 8005dac:	3ff00000 	.word	0x3ff00000
 8005db0:	3fefffff 	.word	0x3fefffff
 8005db4:	3fe00000 	.word	0x3fe00000
 8005db8:	41e00000 	.word	0x41e00000
 8005dbc:	4b60      	ldr	r3, [pc, #384]	; (8005f40 <__ieee754_pow+0x3f0>)
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f7fa fa6a 	bl	8000298 <__aeabi_dsub>
 8005dc4:	a354      	add	r3, pc, #336	; (adr r3, 8005f18 <__ieee754_pow+0x3c8>)
 8005dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dca:	4604      	mov	r4, r0
 8005dcc:	460d      	mov	r5, r1
 8005dce:	f7fa fc1b 	bl	8000608 <__aeabi_dmul>
 8005dd2:	a353      	add	r3, pc, #332	; (adr r3, 8005f20 <__ieee754_pow+0x3d0>)
 8005dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd8:	4606      	mov	r6, r0
 8005dda:	460f      	mov	r7, r1
 8005ddc:	4620      	mov	r0, r4
 8005dde:	4629      	mov	r1, r5
 8005de0:	f7fa fc12 	bl	8000608 <__aeabi_dmul>
 8005de4:	4b57      	ldr	r3, [pc, #348]	; (8005f44 <__ieee754_pow+0x3f4>)
 8005de6:	4682      	mov	sl, r0
 8005de8:	468b      	mov	fp, r1
 8005dea:	2200      	movs	r2, #0
 8005dec:	4620      	mov	r0, r4
 8005dee:	4629      	mov	r1, r5
 8005df0:	f7fa fc0a 	bl	8000608 <__aeabi_dmul>
 8005df4:	4602      	mov	r2, r0
 8005df6:	460b      	mov	r3, r1
 8005df8:	a14b      	add	r1, pc, #300	; (adr r1, 8005f28 <__ieee754_pow+0x3d8>)
 8005dfa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005dfe:	f7fa fa4b 	bl	8000298 <__aeabi_dsub>
 8005e02:	4622      	mov	r2, r4
 8005e04:	462b      	mov	r3, r5
 8005e06:	f7fa fbff 	bl	8000608 <__aeabi_dmul>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	2000      	movs	r0, #0
 8005e10:	494d      	ldr	r1, [pc, #308]	; (8005f48 <__ieee754_pow+0x3f8>)
 8005e12:	f7fa fa41 	bl	8000298 <__aeabi_dsub>
 8005e16:	4622      	mov	r2, r4
 8005e18:	4680      	mov	r8, r0
 8005e1a:	4689      	mov	r9, r1
 8005e1c:	462b      	mov	r3, r5
 8005e1e:	4620      	mov	r0, r4
 8005e20:	4629      	mov	r1, r5
 8005e22:	f7fa fbf1 	bl	8000608 <__aeabi_dmul>
 8005e26:	4602      	mov	r2, r0
 8005e28:	460b      	mov	r3, r1
 8005e2a:	4640      	mov	r0, r8
 8005e2c:	4649      	mov	r1, r9
 8005e2e:	f7fa fbeb 	bl	8000608 <__aeabi_dmul>
 8005e32:	a33f      	add	r3, pc, #252	; (adr r3, 8005f30 <__ieee754_pow+0x3e0>)
 8005e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e38:	f7fa fbe6 	bl	8000608 <__aeabi_dmul>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	460b      	mov	r3, r1
 8005e40:	4650      	mov	r0, sl
 8005e42:	4659      	mov	r1, fp
 8005e44:	f7fa fa28 	bl	8000298 <__aeabi_dsub>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	4680      	mov	r8, r0
 8005e4e:	4689      	mov	r9, r1
 8005e50:	4630      	mov	r0, r6
 8005e52:	4639      	mov	r1, r7
 8005e54:	f7fa fa22 	bl	800029c <__adddf3>
 8005e58:	2000      	movs	r0, #0
 8005e5a:	4632      	mov	r2, r6
 8005e5c:	463b      	mov	r3, r7
 8005e5e:	4604      	mov	r4, r0
 8005e60:	460d      	mov	r5, r1
 8005e62:	f7fa fa19 	bl	8000298 <__aeabi_dsub>
 8005e66:	4602      	mov	r2, r0
 8005e68:	460b      	mov	r3, r1
 8005e6a:	4640      	mov	r0, r8
 8005e6c:	4649      	mov	r1, r9
 8005e6e:	f7fa fa13 	bl	8000298 <__aeabi_dsub>
 8005e72:	9b04      	ldr	r3, [sp, #16]
 8005e74:	9a06      	ldr	r2, [sp, #24]
 8005e76:	3b01      	subs	r3, #1
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	4682      	mov	sl, r0
 8005e7c:	468b      	mov	fp, r1
 8005e7e:	f040 81e7 	bne.w	8006250 <__ieee754_pow+0x700>
 8005e82:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8005f38 <__ieee754_pow+0x3e8>
 8005e86:	eeb0 8a47 	vmov.f32	s16, s14
 8005e8a:	eef0 8a67 	vmov.f32	s17, s15
 8005e8e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005e92:	2600      	movs	r6, #0
 8005e94:	4632      	mov	r2, r6
 8005e96:	463b      	mov	r3, r7
 8005e98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e9c:	f7fa f9fc 	bl	8000298 <__aeabi_dsub>
 8005ea0:	4622      	mov	r2, r4
 8005ea2:	462b      	mov	r3, r5
 8005ea4:	f7fa fbb0 	bl	8000608 <__aeabi_dmul>
 8005ea8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005eac:	4680      	mov	r8, r0
 8005eae:	4689      	mov	r9, r1
 8005eb0:	4650      	mov	r0, sl
 8005eb2:	4659      	mov	r1, fp
 8005eb4:	f7fa fba8 	bl	8000608 <__aeabi_dmul>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	460b      	mov	r3, r1
 8005ebc:	4640      	mov	r0, r8
 8005ebe:	4649      	mov	r1, r9
 8005ec0:	f7fa f9ec 	bl	800029c <__adddf3>
 8005ec4:	4632      	mov	r2, r6
 8005ec6:	463b      	mov	r3, r7
 8005ec8:	4680      	mov	r8, r0
 8005eca:	4689      	mov	r9, r1
 8005ecc:	4620      	mov	r0, r4
 8005ece:	4629      	mov	r1, r5
 8005ed0:	f7fa fb9a 	bl	8000608 <__aeabi_dmul>
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	4604      	mov	r4, r0
 8005ed8:	460d      	mov	r5, r1
 8005eda:	4602      	mov	r2, r0
 8005edc:	4649      	mov	r1, r9
 8005ede:	4640      	mov	r0, r8
 8005ee0:	f7fa f9dc 	bl	800029c <__adddf3>
 8005ee4:	4b19      	ldr	r3, [pc, #100]	; (8005f4c <__ieee754_pow+0x3fc>)
 8005ee6:	4299      	cmp	r1, r3
 8005ee8:	ec45 4b19 	vmov	d9, r4, r5
 8005eec:	4606      	mov	r6, r0
 8005eee:	460f      	mov	r7, r1
 8005ef0:	468b      	mov	fp, r1
 8005ef2:	f340 82f0 	ble.w	80064d6 <__ieee754_pow+0x986>
 8005ef6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005efa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005efe:	4303      	orrs	r3, r0
 8005f00:	f000 81e4 	beq.w	80062cc <__ieee754_pow+0x77c>
 8005f04:	ec51 0b18 	vmov	r0, r1, d8
 8005f08:	2200      	movs	r2, #0
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	f7fa fdee 	bl	8000aec <__aeabi_dcmplt>
 8005f10:	3800      	subs	r0, #0
 8005f12:	bf18      	it	ne
 8005f14:	2001      	movne	r0, #1
 8005f16:	e72b      	b.n	8005d70 <__ieee754_pow+0x220>
 8005f18:	60000000 	.word	0x60000000
 8005f1c:	3ff71547 	.word	0x3ff71547
 8005f20:	f85ddf44 	.word	0xf85ddf44
 8005f24:	3e54ae0b 	.word	0x3e54ae0b
 8005f28:	55555555 	.word	0x55555555
 8005f2c:	3fd55555 	.word	0x3fd55555
 8005f30:	652b82fe 	.word	0x652b82fe
 8005f34:	3ff71547 	.word	0x3ff71547
 8005f38:	00000000 	.word	0x00000000
 8005f3c:	bff00000 	.word	0xbff00000
 8005f40:	3ff00000 	.word	0x3ff00000
 8005f44:	3fd00000 	.word	0x3fd00000
 8005f48:	3fe00000 	.word	0x3fe00000
 8005f4c:	408fffff 	.word	0x408fffff
 8005f50:	4bd5      	ldr	r3, [pc, #852]	; (80062a8 <__ieee754_pow+0x758>)
 8005f52:	402b      	ands	r3, r5
 8005f54:	2200      	movs	r2, #0
 8005f56:	b92b      	cbnz	r3, 8005f64 <__ieee754_pow+0x414>
 8005f58:	4bd4      	ldr	r3, [pc, #848]	; (80062ac <__ieee754_pow+0x75c>)
 8005f5a:	f7fa fb55 	bl	8000608 <__aeabi_dmul>
 8005f5e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005f62:	460c      	mov	r4, r1
 8005f64:	1523      	asrs	r3, r4, #20
 8005f66:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005f6a:	4413      	add	r3, r2
 8005f6c:	9305      	str	r3, [sp, #20]
 8005f6e:	4bd0      	ldr	r3, [pc, #832]	; (80062b0 <__ieee754_pow+0x760>)
 8005f70:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005f74:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005f78:	429c      	cmp	r4, r3
 8005f7a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005f7e:	dd08      	ble.n	8005f92 <__ieee754_pow+0x442>
 8005f80:	4bcc      	ldr	r3, [pc, #816]	; (80062b4 <__ieee754_pow+0x764>)
 8005f82:	429c      	cmp	r4, r3
 8005f84:	f340 8162 	ble.w	800624c <__ieee754_pow+0x6fc>
 8005f88:	9b05      	ldr	r3, [sp, #20]
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	9305      	str	r3, [sp, #20]
 8005f8e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005f92:	2400      	movs	r4, #0
 8005f94:	00e3      	lsls	r3, r4, #3
 8005f96:	9307      	str	r3, [sp, #28]
 8005f98:	4bc7      	ldr	r3, [pc, #796]	; (80062b8 <__ieee754_pow+0x768>)
 8005f9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005f9e:	ed93 7b00 	vldr	d7, [r3]
 8005fa2:	4629      	mov	r1, r5
 8005fa4:	ec53 2b17 	vmov	r2, r3, d7
 8005fa8:	eeb0 9a47 	vmov.f32	s18, s14
 8005fac:	eef0 9a67 	vmov.f32	s19, s15
 8005fb0:	4682      	mov	sl, r0
 8005fb2:	f7fa f971 	bl	8000298 <__aeabi_dsub>
 8005fb6:	4652      	mov	r2, sl
 8005fb8:	4606      	mov	r6, r0
 8005fba:	460f      	mov	r7, r1
 8005fbc:	462b      	mov	r3, r5
 8005fbe:	ec51 0b19 	vmov	r0, r1, d9
 8005fc2:	f7fa f96b 	bl	800029c <__adddf3>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	460b      	mov	r3, r1
 8005fca:	2000      	movs	r0, #0
 8005fcc:	49bb      	ldr	r1, [pc, #748]	; (80062bc <__ieee754_pow+0x76c>)
 8005fce:	f7fa fc45 	bl	800085c <__aeabi_ddiv>
 8005fd2:	ec41 0b1a 	vmov	d10, r0, r1
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	460b      	mov	r3, r1
 8005fda:	4630      	mov	r0, r6
 8005fdc:	4639      	mov	r1, r7
 8005fde:	f7fa fb13 	bl	8000608 <__aeabi_dmul>
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fe8:	9302      	str	r3, [sp, #8]
 8005fea:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005fee:	46ab      	mov	fp, r5
 8005ff0:	106d      	asrs	r5, r5, #1
 8005ff2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005ff6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005ffa:	ec41 0b18 	vmov	d8, r0, r1
 8005ffe:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8006002:	2200      	movs	r2, #0
 8006004:	4640      	mov	r0, r8
 8006006:	4649      	mov	r1, r9
 8006008:	4614      	mov	r4, r2
 800600a:	461d      	mov	r5, r3
 800600c:	f7fa fafc 	bl	8000608 <__aeabi_dmul>
 8006010:	4602      	mov	r2, r0
 8006012:	460b      	mov	r3, r1
 8006014:	4630      	mov	r0, r6
 8006016:	4639      	mov	r1, r7
 8006018:	f7fa f93e 	bl	8000298 <__aeabi_dsub>
 800601c:	ec53 2b19 	vmov	r2, r3, d9
 8006020:	4606      	mov	r6, r0
 8006022:	460f      	mov	r7, r1
 8006024:	4620      	mov	r0, r4
 8006026:	4629      	mov	r1, r5
 8006028:	f7fa f936 	bl	8000298 <__aeabi_dsub>
 800602c:	4602      	mov	r2, r0
 800602e:	460b      	mov	r3, r1
 8006030:	4650      	mov	r0, sl
 8006032:	4659      	mov	r1, fp
 8006034:	f7fa f930 	bl	8000298 <__aeabi_dsub>
 8006038:	4642      	mov	r2, r8
 800603a:	464b      	mov	r3, r9
 800603c:	f7fa fae4 	bl	8000608 <__aeabi_dmul>
 8006040:	4602      	mov	r2, r0
 8006042:	460b      	mov	r3, r1
 8006044:	4630      	mov	r0, r6
 8006046:	4639      	mov	r1, r7
 8006048:	f7fa f926 	bl	8000298 <__aeabi_dsub>
 800604c:	ec53 2b1a 	vmov	r2, r3, d10
 8006050:	f7fa fada 	bl	8000608 <__aeabi_dmul>
 8006054:	ec53 2b18 	vmov	r2, r3, d8
 8006058:	ec41 0b19 	vmov	d9, r0, r1
 800605c:	ec51 0b18 	vmov	r0, r1, d8
 8006060:	f7fa fad2 	bl	8000608 <__aeabi_dmul>
 8006064:	a37c      	add	r3, pc, #496	; (adr r3, 8006258 <__ieee754_pow+0x708>)
 8006066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606a:	4604      	mov	r4, r0
 800606c:	460d      	mov	r5, r1
 800606e:	f7fa facb 	bl	8000608 <__aeabi_dmul>
 8006072:	a37b      	add	r3, pc, #492	; (adr r3, 8006260 <__ieee754_pow+0x710>)
 8006074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006078:	f7fa f910 	bl	800029c <__adddf3>
 800607c:	4622      	mov	r2, r4
 800607e:	462b      	mov	r3, r5
 8006080:	f7fa fac2 	bl	8000608 <__aeabi_dmul>
 8006084:	a378      	add	r3, pc, #480	; (adr r3, 8006268 <__ieee754_pow+0x718>)
 8006086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608a:	f7fa f907 	bl	800029c <__adddf3>
 800608e:	4622      	mov	r2, r4
 8006090:	462b      	mov	r3, r5
 8006092:	f7fa fab9 	bl	8000608 <__aeabi_dmul>
 8006096:	a376      	add	r3, pc, #472	; (adr r3, 8006270 <__ieee754_pow+0x720>)
 8006098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609c:	f7fa f8fe 	bl	800029c <__adddf3>
 80060a0:	4622      	mov	r2, r4
 80060a2:	462b      	mov	r3, r5
 80060a4:	f7fa fab0 	bl	8000608 <__aeabi_dmul>
 80060a8:	a373      	add	r3, pc, #460	; (adr r3, 8006278 <__ieee754_pow+0x728>)
 80060aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ae:	f7fa f8f5 	bl	800029c <__adddf3>
 80060b2:	4622      	mov	r2, r4
 80060b4:	462b      	mov	r3, r5
 80060b6:	f7fa faa7 	bl	8000608 <__aeabi_dmul>
 80060ba:	a371      	add	r3, pc, #452	; (adr r3, 8006280 <__ieee754_pow+0x730>)
 80060bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c0:	f7fa f8ec 	bl	800029c <__adddf3>
 80060c4:	4622      	mov	r2, r4
 80060c6:	4606      	mov	r6, r0
 80060c8:	460f      	mov	r7, r1
 80060ca:	462b      	mov	r3, r5
 80060cc:	4620      	mov	r0, r4
 80060ce:	4629      	mov	r1, r5
 80060d0:	f7fa fa9a 	bl	8000608 <__aeabi_dmul>
 80060d4:	4602      	mov	r2, r0
 80060d6:	460b      	mov	r3, r1
 80060d8:	4630      	mov	r0, r6
 80060da:	4639      	mov	r1, r7
 80060dc:	f7fa fa94 	bl	8000608 <__aeabi_dmul>
 80060e0:	4642      	mov	r2, r8
 80060e2:	4604      	mov	r4, r0
 80060e4:	460d      	mov	r5, r1
 80060e6:	464b      	mov	r3, r9
 80060e8:	ec51 0b18 	vmov	r0, r1, d8
 80060ec:	f7fa f8d6 	bl	800029c <__adddf3>
 80060f0:	ec53 2b19 	vmov	r2, r3, d9
 80060f4:	f7fa fa88 	bl	8000608 <__aeabi_dmul>
 80060f8:	4622      	mov	r2, r4
 80060fa:	462b      	mov	r3, r5
 80060fc:	f7fa f8ce 	bl	800029c <__adddf3>
 8006100:	4642      	mov	r2, r8
 8006102:	4682      	mov	sl, r0
 8006104:	468b      	mov	fp, r1
 8006106:	464b      	mov	r3, r9
 8006108:	4640      	mov	r0, r8
 800610a:	4649      	mov	r1, r9
 800610c:	f7fa fa7c 	bl	8000608 <__aeabi_dmul>
 8006110:	4b6b      	ldr	r3, [pc, #428]	; (80062c0 <__ieee754_pow+0x770>)
 8006112:	2200      	movs	r2, #0
 8006114:	4606      	mov	r6, r0
 8006116:	460f      	mov	r7, r1
 8006118:	f7fa f8c0 	bl	800029c <__adddf3>
 800611c:	4652      	mov	r2, sl
 800611e:	465b      	mov	r3, fp
 8006120:	f7fa f8bc 	bl	800029c <__adddf3>
 8006124:	2000      	movs	r0, #0
 8006126:	4604      	mov	r4, r0
 8006128:	460d      	mov	r5, r1
 800612a:	4602      	mov	r2, r0
 800612c:	460b      	mov	r3, r1
 800612e:	4640      	mov	r0, r8
 8006130:	4649      	mov	r1, r9
 8006132:	f7fa fa69 	bl	8000608 <__aeabi_dmul>
 8006136:	4b62      	ldr	r3, [pc, #392]	; (80062c0 <__ieee754_pow+0x770>)
 8006138:	4680      	mov	r8, r0
 800613a:	4689      	mov	r9, r1
 800613c:	2200      	movs	r2, #0
 800613e:	4620      	mov	r0, r4
 8006140:	4629      	mov	r1, r5
 8006142:	f7fa f8a9 	bl	8000298 <__aeabi_dsub>
 8006146:	4632      	mov	r2, r6
 8006148:	463b      	mov	r3, r7
 800614a:	f7fa f8a5 	bl	8000298 <__aeabi_dsub>
 800614e:	4602      	mov	r2, r0
 8006150:	460b      	mov	r3, r1
 8006152:	4650      	mov	r0, sl
 8006154:	4659      	mov	r1, fp
 8006156:	f7fa f89f 	bl	8000298 <__aeabi_dsub>
 800615a:	ec53 2b18 	vmov	r2, r3, d8
 800615e:	f7fa fa53 	bl	8000608 <__aeabi_dmul>
 8006162:	4622      	mov	r2, r4
 8006164:	4606      	mov	r6, r0
 8006166:	460f      	mov	r7, r1
 8006168:	462b      	mov	r3, r5
 800616a:	ec51 0b19 	vmov	r0, r1, d9
 800616e:	f7fa fa4b 	bl	8000608 <__aeabi_dmul>
 8006172:	4602      	mov	r2, r0
 8006174:	460b      	mov	r3, r1
 8006176:	4630      	mov	r0, r6
 8006178:	4639      	mov	r1, r7
 800617a:	f7fa f88f 	bl	800029c <__adddf3>
 800617e:	4606      	mov	r6, r0
 8006180:	460f      	mov	r7, r1
 8006182:	4602      	mov	r2, r0
 8006184:	460b      	mov	r3, r1
 8006186:	4640      	mov	r0, r8
 8006188:	4649      	mov	r1, r9
 800618a:	f7fa f887 	bl	800029c <__adddf3>
 800618e:	a33e      	add	r3, pc, #248	; (adr r3, 8006288 <__ieee754_pow+0x738>)
 8006190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006194:	2000      	movs	r0, #0
 8006196:	4604      	mov	r4, r0
 8006198:	460d      	mov	r5, r1
 800619a:	f7fa fa35 	bl	8000608 <__aeabi_dmul>
 800619e:	4642      	mov	r2, r8
 80061a0:	ec41 0b18 	vmov	d8, r0, r1
 80061a4:	464b      	mov	r3, r9
 80061a6:	4620      	mov	r0, r4
 80061a8:	4629      	mov	r1, r5
 80061aa:	f7fa f875 	bl	8000298 <__aeabi_dsub>
 80061ae:	4602      	mov	r2, r0
 80061b0:	460b      	mov	r3, r1
 80061b2:	4630      	mov	r0, r6
 80061b4:	4639      	mov	r1, r7
 80061b6:	f7fa f86f 	bl	8000298 <__aeabi_dsub>
 80061ba:	a335      	add	r3, pc, #212	; (adr r3, 8006290 <__ieee754_pow+0x740>)
 80061bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c0:	f7fa fa22 	bl	8000608 <__aeabi_dmul>
 80061c4:	a334      	add	r3, pc, #208	; (adr r3, 8006298 <__ieee754_pow+0x748>)
 80061c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ca:	4606      	mov	r6, r0
 80061cc:	460f      	mov	r7, r1
 80061ce:	4620      	mov	r0, r4
 80061d0:	4629      	mov	r1, r5
 80061d2:	f7fa fa19 	bl	8000608 <__aeabi_dmul>
 80061d6:	4602      	mov	r2, r0
 80061d8:	460b      	mov	r3, r1
 80061da:	4630      	mov	r0, r6
 80061dc:	4639      	mov	r1, r7
 80061de:	f7fa f85d 	bl	800029c <__adddf3>
 80061e2:	9a07      	ldr	r2, [sp, #28]
 80061e4:	4b37      	ldr	r3, [pc, #220]	; (80062c4 <__ieee754_pow+0x774>)
 80061e6:	4413      	add	r3, r2
 80061e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ec:	f7fa f856 	bl	800029c <__adddf3>
 80061f0:	4682      	mov	sl, r0
 80061f2:	9805      	ldr	r0, [sp, #20]
 80061f4:	468b      	mov	fp, r1
 80061f6:	f7fa f99d 	bl	8000534 <__aeabi_i2d>
 80061fa:	9a07      	ldr	r2, [sp, #28]
 80061fc:	4b32      	ldr	r3, [pc, #200]	; (80062c8 <__ieee754_pow+0x778>)
 80061fe:	4413      	add	r3, r2
 8006200:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006204:	4606      	mov	r6, r0
 8006206:	460f      	mov	r7, r1
 8006208:	4652      	mov	r2, sl
 800620a:	465b      	mov	r3, fp
 800620c:	ec51 0b18 	vmov	r0, r1, d8
 8006210:	f7fa f844 	bl	800029c <__adddf3>
 8006214:	4642      	mov	r2, r8
 8006216:	464b      	mov	r3, r9
 8006218:	f7fa f840 	bl	800029c <__adddf3>
 800621c:	4632      	mov	r2, r6
 800621e:	463b      	mov	r3, r7
 8006220:	f7fa f83c 	bl	800029c <__adddf3>
 8006224:	2000      	movs	r0, #0
 8006226:	4632      	mov	r2, r6
 8006228:	463b      	mov	r3, r7
 800622a:	4604      	mov	r4, r0
 800622c:	460d      	mov	r5, r1
 800622e:	f7fa f833 	bl	8000298 <__aeabi_dsub>
 8006232:	4642      	mov	r2, r8
 8006234:	464b      	mov	r3, r9
 8006236:	f7fa f82f 	bl	8000298 <__aeabi_dsub>
 800623a:	ec53 2b18 	vmov	r2, r3, d8
 800623e:	f7fa f82b 	bl	8000298 <__aeabi_dsub>
 8006242:	4602      	mov	r2, r0
 8006244:	460b      	mov	r3, r1
 8006246:	4650      	mov	r0, sl
 8006248:	4659      	mov	r1, fp
 800624a:	e610      	b.n	8005e6e <__ieee754_pow+0x31e>
 800624c:	2401      	movs	r4, #1
 800624e:	e6a1      	b.n	8005f94 <__ieee754_pow+0x444>
 8006250:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80062a0 <__ieee754_pow+0x750>
 8006254:	e617      	b.n	8005e86 <__ieee754_pow+0x336>
 8006256:	bf00      	nop
 8006258:	4a454eef 	.word	0x4a454eef
 800625c:	3fca7e28 	.word	0x3fca7e28
 8006260:	93c9db65 	.word	0x93c9db65
 8006264:	3fcd864a 	.word	0x3fcd864a
 8006268:	a91d4101 	.word	0xa91d4101
 800626c:	3fd17460 	.word	0x3fd17460
 8006270:	518f264d 	.word	0x518f264d
 8006274:	3fd55555 	.word	0x3fd55555
 8006278:	db6fabff 	.word	0xdb6fabff
 800627c:	3fdb6db6 	.word	0x3fdb6db6
 8006280:	33333303 	.word	0x33333303
 8006284:	3fe33333 	.word	0x3fe33333
 8006288:	e0000000 	.word	0xe0000000
 800628c:	3feec709 	.word	0x3feec709
 8006290:	dc3a03fd 	.word	0xdc3a03fd
 8006294:	3feec709 	.word	0x3feec709
 8006298:	145b01f5 	.word	0x145b01f5
 800629c:	be3e2fe0 	.word	0xbe3e2fe0
 80062a0:	00000000 	.word	0x00000000
 80062a4:	3ff00000 	.word	0x3ff00000
 80062a8:	7ff00000 	.word	0x7ff00000
 80062ac:	43400000 	.word	0x43400000
 80062b0:	0003988e 	.word	0x0003988e
 80062b4:	000bb679 	.word	0x000bb679
 80062b8:	08006998 	.word	0x08006998
 80062bc:	3ff00000 	.word	0x3ff00000
 80062c0:	40080000 	.word	0x40080000
 80062c4:	080069b8 	.word	0x080069b8
 80062c8:	080069a8 	.word	0x080069a8
 80062cc:	a3b3      	add	r3, pc, #716	; (adr r3, 800659c <__ieee754_pow+0xa4c>)
 80062ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d2:	4640      	mov	r0, r8
 80062d4:	4649      	mov	r1, r9
 80062d6:	f7f9 ffe1 	bl	800029c <__adddf3>
 80062da:	4622      	mov	r2, r4
 80062dc:	ec41 0b1a 	vmov	d10, r0, r1
 80062e0:	462b      	mov	r3, r5
 80062e2:	4630      	mov	r0, r6
 80062e4:	4639      	mov	r1, r7
 80062e6:	f7f9 ffd7 	bl	8000298 <__aeabi_dsub>
 80062ea:	4602      	mov	r2, r0
 80062ec:	460b      	mov	r3, r1
 80062ee:	ec51 0b1a 	vmov	r0, r1, d10
 80062f2:	f7fa fc19 	bl	8000b28 <__aeabi_dcmpgt>
 80062f6:	2800      	cmp	r0, #0
 80062f8:	f47f ae04 	bne.w	8005f04 <__ieee754_pow+0x3b4>
 80062fc:	4aa2      	ldr	r2, [pc, #648]	; (8006588 <__ieee754_pow+0xa38>)
 80062fe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006302:	4293      	cmp	r3, r2
 8006304:	f340 8107 	ble.w	8006516 <__ieee754_pow+0x9c6>
 8006308:	151b      	asrs	r3, r3, #20
 800630a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800630e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006312:	fa4a fa03 	asr.w	sl, sl, r3
 8006316:	44da      	add	sl, fp
 8006318:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800631c:	489b      	ldr	r0, [pc, #620]	; (800658c <__ieee754_pow+0xa3c>)
 800631e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8006322:	4108      	asrs	r0, r1
 8006324:	ea00 030a 	and.w	r3, r0, sl
 8006328:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800632c:	f1c1 0114 	rsb	r1, r1, #20
 8006330:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006334:	fa4a fa01 	asr.w	sl, sl, r1
 8006338:	f1bb 0f00 	cmp.w	fp, #0
 800633c:	f04f 0200 	mov.w	r2, #0
 8006340:	4620      	mov	r0, r4
 8006342:	4629      	mov	r1, r5
 8006344:	bfb8      	it	lt
 8006346:	f1ca 0a00 	rsblt	sl, sl, #0
 800634a:	f7f9 ffa5 	bl	8000298 <__aeabi_dsub>
 800634e:	ec41 0b19 	vmov	d9, r0, r1
 8006352:	4642      	mov	r2, r8
 8006354:	464b      	mov	r3, r9
 8006356:	ec51 0b19 	vmov	r0, r1, d9
 800635a:	f7f9 ff9f 	bl	800029c <__adddf3>
 800635e:	a37a      	add	r3, pc, #488	; (adr r3, 8006548 <__ieee754_pow+0x9f8>)
 8006360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006364:	2000      	movs	r0, #0
 8006366:	4604      	mov	r4, r0
 8006368:	460d      	mov	r5, r1
 800636a:	f7fa f94d 	bl	8000608 <__aeabi_dmul>
 800636e:	ec53 2b19 	vmov	r2, r3, d9
 8006372:	4606      	mov	r6, r0
 8006374:	460f      	mov	r7, r1
 8006376:	4620      	mov	r0, r4
 8006378:	4629      	mov	r1, r5
 800637a:	f7f9 ff8d 	bl	8000298 <__aeabi_dsub>
 800637e:	4602      	mov	r2, r0
 8006380:	460b      	mov	r3, r1
 8006382:	4640      	mov	r0, r8
 8006384:	4649      	mov	r1, r9
 8006386:	f7f9 ff87 	bl	8000298 <__aeabi_dsub>
 800638a:	a371      	add	r3, pc, #452	; (adr r3, 8006550 <__ieee754_pow+0xa00>)
 800638c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006390:	f7fa f93a 	bl	8000608 <__aeabi_dmul>
 8006394:	a370      	add	r3, pc, #448	; (adr r3, 8006558 <__ieee754_pow+0xa08>)
 8006396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639a:	4680      	mov	r8, r0
 800639c:	4689      	mov	r9, r1
 800639e:	4620      	mov	r0, r4
 80063a0:	4629      	mov	r1, r5
 80063a2:	f7fa f931 	bl	8000608 <__aeabi_dmul>
 80063a6:	4602      	mov	r2, r0
 80063a8:	460b      	mov	r3, r1
 80063aa:	4640      	mov	r0, r8
 80063ac:	4649      	mov	r1, r9
 80063ae:	f7f9 ff75 	bl	800029c <__adddf3>
 80063b2:	4604      	mov	r4, r0
 80063b4:	460d      	mov	r5, r1
 80063b6:	4602      	mov	r2, r0
 80063b8:	460b      	mov	r3, r1
 80063ba:	4630      	mov	r0, r6
 80063bc:	4639      	mov	r1, r7
 80063be:	f7f9 ff6d 	bl	800029c <__adddf3>
 80063c2:	4632      	mov	r2, r6
 80063c4:	463b      	mov	r3, r7
 80063c6:	4680      	mov	r8, r0
 80063c8:	4689      	mov	r9, r1
 80063ca:	f7f9 ff65 	bl	8000298 <__aeabi_dsub>
 80063ce:	4602      	mov	r2, r0
 80063d0:	460b      	mov	r3, r1
 80063d2:	4620      	mov	r0, r4
 80063d4:	4629      	mov	r1, r5
 80063d6:	f7f9 ff5f 	bl	8000298 <__aeabi_dsub>
 80063da:	4642      	mov	r2, r8
 80063dc:	4606      	mov	r6, r0
 80063de:	460f      	mov	r7, r1
 80063e0:	464b      	mov	r3, r9
 80063e2:	4640      	mov	r0, r8
 80063e4:	4649      	mov	r1, r9
 80063e6:	f7fa f90f 	bl	8000608 <__aeabi_dmul>
 80063ea:	a35d      	add	r3, pc, #372	; (adr r3, 8006560 <__ieee754_pow+0xa10>)
 80063ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f0:	4604      	mov	r4, r0
 80063f2:	460d      	mov	r5, r1
 80063f4:	f7fa f908 	bl	8000608 <__aeabi_dmul>
 80063f8:	a35b      	add	r3, pc, #364	; (adr r3, 8006568 <__ieee754_pow+0xa18>)
 80063fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fe:	f7f9 ff4b 	bl	8000298 <__aeabi_dsub>
 8006402:	4622      	mov	r2, r4
 8006404:	462b      	mov	r3, r5
 8006406:	f7fa f8ff 	bl	8000608 <__aeabi_dmul>
 800640a:	a359      	add	r3, pc, #356	; (adr r3, 8006570 <__ieee754_pow+0xa20>)
 800640c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006410:	f7f9 ff44 	bl	800029c <__adddf3>
 8006414:	4622      	mov	r2, r4
 8006416:	462b      	mov	r3, r5
 8006418:	f7fa f8f6 	bl	8000608 <__aeabi_dmul>
 800641c:	a356      	add	r3, pc, #344	; (adr r3, 8006578 <__ieee754_pow+0xa28>)
 800641e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006422:	f7f9 ff39 	bl	8000298 <__aeabi_dsub>
 8006426:	4622      	mov	r2, r4
 8006428:	462b      	mov	r3, r5
 800642a:	f7fa f8ed 	bl	8000608 <__aeabi_dmul>
 800642e:	a354      	add	r3, pc, #336	; (adr r3, 8006580 <__ieee754_pow+0xa30>)
 8006430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006434:	f7f9 ff32 	bl	800029c <__adddf3>
 8006438:	4622      	mov	r2, r4
 800643a:	462b      	mov	r3, r5
 800643c:	f7fa f8e4 	bl	8000608 <__aeabi_dmul>
 8006440:	4602      	mov	r2, r0
 8006442:	460b      	mov	r3, r1
 8006444:	4640      	mov	r0, r8
 8006446:	4649      	mov	r1, r9
 8006448:	f7f9 ff26 	bl	8000298 <__aeabi_dsub>
 800644c:	4604      	mov	r4, r0
 800644e:	460d      	mov	r5, r1
 8006450:	4602      	mov	r2, r0
 8006452:	460b      	mov	r3, r1
 8006454:	4640      	mov	r0, r8
 8006456:	4649      	mov	r1, r9
 8006458:	f7fa f8d6 	bl	8000608 <__aeabi_dmul>
 800645c:	2200      	movs	r2, #0
 800645e:	ec41 0b19 	vmov	d9, r0, r1
 8006462:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006466:	4620      	mov	r0, r4
 8006468:	4629      	mov	r1, r5
 800646a:	f7f9 ff15 	bl	8000298 <__aeabi_dsub>
 800646e:	4602      	mov	r2, r0
 8006470:	460b      	mov	r3, r1
 8006472:	ec51 0b19 	vmov	r0, r1, d9
 8006476:	f7fa f9f1 	bl	800085c <__aeabi_ddiv>
 800647a:	4632      	mov	r2, r6
 800647c:	4604      	mov	r4, r0
 800647e:	460d      	mov	r5, r1
 8006480:	463b      	mov	r3, r7
 8006482:	4640      	mov	r0, r8
 8006484:	4649      	mov	r1, r9
 8006486:	f7fa f8bf 	bl	8000608 <__aeabi_dmul>
 800648a:	4632      	mov	r2, r6
 800648c:	463b      	mov	r3, r7
 800648e:	f7f9 ff05 	bl	800029c <__adddf3>
 8006492:	4602      	mov	r2, r0
 8006494:	460b      	mov	r3, r1
 8006496:	4620      	mov	r0, r4
 8006498:	4629      	mov	r1, r5
 800649a:	f7f9 fefd 	bl	8000298 <__aeabi_dsub>
 800649e:	4642      	mov	r2, r8
 80064a0:	464b      	mov	r3, r9
 80064a2:	f7f9 fef9 	bl	8000298 <__aeabi_dsub>
 80064a6:	460b      	mov	r3, r1
 80064a8:	4602      	mov	r2, r0
 80064aa:	4939      	ldr	r1, [pc, #228]	; (8006590 <__ieee754_pow+0xa40>)
 80064ac:	2000      	movs	r0, #0
 80064ae:	f7f9 fef3 	bl	8000298 <__aeabi_dsub>
 80064b2:	ec41 0b10 	vmov	d0, r0, r1
 80064b6:	ee10 3a90 	vmov	r3, s1
 80064ba:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80064be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064c2:	da2b      	bge.n	800651c <__ieee754_pow+0x9cc>
 80064c4:	4650      	mov	r0, sl
 80064c6:	f000 f877 	bl	80065b8 <scalbn>
 80064ca:	ec51 0b10 	vmov	r0, r1, d0
 80064ce:	ec53 2b18 	vmov	r2, r3, d8
 80064d2:	f7ff bbee 	b.w	8005cb2 <__ieee754_pow+0x162>
 80064d6:	4b2f      	ldr	r3, [pc, #188]	; (8006594 <__ieee754_pow+0xa44>)
 80064d8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80064dc:	429e      	cmp	r6, r3
 80064de:	f77f af0d 	ble.w	80062fc <__ieee754_pow+0x7ac>
 80064e2:	4b2d      	ldr	r3, [pc, #180]	; (8006598 <__ieee754_pow+0xa48>)
 80064e4:	440b      	add	r3, r1
 80064e6:	4303      	orrs	r3, r0
 80064e8:	d009      	beq.n	80064fe <__ieee754_pow+0x9ae>
 80064ea:	ec51 0b18 	vmov	r0, r1, d8
 80064ee:	2200      	movs	r2, #0
 80064f0:	2300      	movs	r3, #0
 80064f2:	f7fa fafb 	bl	8000aec <__aeabi_dcmplt>
 80064f6:	3800      	subs	r0, #0
 80064f8:	bf18      	it	ne
 80064fa:	2001      	movne	r0, #1
 80064fc:	e448      	b.n	8005d90 <__ieee754_pow+0x240>
 80064fe:	4622      	mov	r2, r4
 8006500:	462b      	mov	r3, r5
 8006502:	f7f9 fec9 	bl	8000298 <__aeabi_dsub>
 8006506:	4642      	mov	r2, r8
 8006508:	464b      	mov	r3, r9
 800650a:	f7fa fb03 	bl	8000b14 <__aeabi_dcmpge>
 800650e:	2800      	cmp	r0, #0
 8006510:	f43f aef4 	beq.w	80062fc <__ieee754_pow+0x7ac>
 8006514:	e7e9      	b.n	80064ea <__ieee754_pow+0x99a>
 8006516:	f04f 0a00 	mov.w	sl, #0
 800651a:	e71a      	b.n	8006352 <__ieee754_pow+0x802>
 800651c:	ec51 0b10 	vmov	r0, r1, d0
 8006520:	4619      	mov	r1, r3
 8006522:	e7d4      	b.n	80064ce <__ieee754_pow+0x97e>
 8006524:	491a      	ldr	r1, [pc, #104]	; (8006590 <__ieee754_pow+0xa40>)
 8006526:	2000      	movs	r0, #0
 8006528:	f7ff bb31 	b.w	8005b8e <__ieee754_pow+0x3e>
 800652c:	2000      	movs	r0, #0
 800652e:	2100      	movs	r1, #0
 8006530:	f7ff bb2d 	b.w	8005b8e <__ieee754_pow+0x3e>
 8006534:	4630      	mov	r0, r6
 8006536:	4639      	mov	r1, r7
 8006538:	f7ff bb29 	b.w	8005b8e <__ieee754_pow+0x3e>
 800653c:	9204      	str	r2, [sp, #16]
 800653e:	f7ff bb7b 	b.w	8005c38 <__ieee754_pow+0xe8>
 8006542:	2300      	movs	r3, #0
 8006544:	f7ff bb65 	b.w	8005c12 <__ieee754_pow+0xc2>
 8006548:	00000000 	.word	0x00000000
 800654c:	3fe62e43 	.word	0x3fe62e43
 8006550:	fefa39ef 	.word	0xfefa39ef
 8006554:	3fe62e42 	.word	0x3fe62e42
 8006558:	0ca86c39 	.word	0x0ca86c39
 800655c:	be205c61 	.word	0xbe205c61
 8006560:	72bea4d0 	.word	0x72bea4d0
 8006564:	3e663769 	.word	0x3e663769
 8006568:	c5d26bf1 	.word	0xc5d26bf1
 800656c:	3ebbbd41 	.word	0x3ebbbd41
 8006570:	af25de2c 	.word	0xaf25de2c
 8006574:	3f11566a 	.word	0x3f11566a
 8006578:	16bebd93 	.word	0x16bebd93
 800657c:	3f66c16c 	.word	0x3f66c16c
 8006580:	5555553e 	.word	0x5555553e
 8006584:	3fc55555 	.word	0x3fc55555
 8006588:	3fe00000 	.word	0x3fe00000
 800658c:	fff00000 	.word	0xfff00000
 8006590:	3ff00000 	.word	0x3ff00000
 8006594:	4090cbff 	.word	0x4090cbff
 8006598:	3f6f3400 	.word	0x3f6f3400
 800659c:	652b82fe 	.word	0x652b82fe
 80065a0:	3c971547 	.word	0x3c971547

080065a4 <fabs>:
 80065a4:	ec51 0b10 	vmov	r0, r1, d0
 80065a8:	ee10 2a10 	vmov	r2, s0
 80065ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80065b0:	ec43 2b10 	vmov	d0, r2, r3
 80065b4:	4770      	bx	lr
	...

080065b8 <scalbn>:
 80065b8:	b570      	push	{r4, r5, r6, lr}
 80065ba:	ec55 4b10 	vmov	r4, r5, d0
 80065be:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80065c2:	4606      	mov	r6, r0
 80065c4:	462b      	mov	r3, r5
 80065c6:	b999      	cbnz	r1, 80065f0 <scalbn+0x38>
 80065c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80065cc:	4323      	orrs	r3, r4
 80065ce:	d03f      	beq.n	8006650 <scalbn+0x98>
 80065d0:	4b35      	ldr	r3, [pc, #212]	; (80066a8 <scalbn+0xf0>)
 80065d2:	4629      	mov	r1, r5
 80065d4:	ee10 0a10 	vmov	r0, s0
 80065d8:	2200      	movs	r2, #0
 80065da:	f7fa f815 	bl	8000608 <__aeabi_dmul>
 80065de:	4b33      	ldr	r3, [pc, #204]	; (80066ac <scalbn+0xf4>)
 80065e0:	429e      	cmp	r6, r3
 80065e2:	4604      	mov	r4, r0
 80065e4:	460d      	mov	r5, r1
 80065e6:	da10      	bge.n	800660a <scalbn+0x52>
 80065e8:	a327      	add	r3, pc, #156	; (adr r3, 8006688 <scalbn+0xd0>)
 80065ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ee:	e01f      	b.n	8006630 <scalbn+0x78>
 80065f0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80065f4:	4291      	cmp	r1, r2
 80065f6:	d10c      	bne.n	8006612 <scalbn+0x5a>
 80065f8:	ee10 2a10 	vmov	r2, s0
 80065fc:	4620      	mov	r0, r4
 80065fe:	4629      	mov	r1, r5
 8006600:	f7f9 fe4c 	bl	800029c <__adddf3>
 8006604:	4604      	mov	r4, r0
 8006606:	460d      	mov	r5, r1
 8006608:	e022      	b.n	8006650 <scalbn+0x98>
 800660a:	460b      	mov	r3, r1
 800660c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006610:	3936      	subs	r1, #54	; 0x36
 8006612:	f24c 3250 	movw	r2, #50000	; 0xc350
 8006616:	4296      	cmp	r6, r2
 8006618:	dd0d      	ble.n	8006636 <scalbn+0x7e>
 800661a:	2d00      	cmp	r5, #0
 800661c:	a11c      	add	r1, pc, #112	; (adr r1, 8006690 <scalbn+0xd8>)
 800661e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006622:	da02      	bge.n	800662a <scalbn+0x72>
 8006624:	a11c      	add	r1, pc, #112	; (adr r1, 8006698 <scalbn+0xe0>)
 8006626:	e9d1 0100 	ldrd	r0, r1, [r1]
 800662a:	a319      	add	r3, pc, #100	; (adr r3, 8006690 <scalbn+0xd8>)
 800662c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006630:	f7f9 ffea 	bl	8000608 <__aeabi_dmul>
 8006634:	e7e6      	b.n	8006604 <scalbn+0x4c>
 8006636:	1872      	adds	r2, r6, r1
 8006638:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800663c:	428a      	cmp	r2, r1
 800663e:	dcec      	bgt.n	800661a <scalbn+0x62>
 8006640:	2a00      	cmp	r2, #0
 8006642:	dd08      	ble.n	8006656 <scalbn+0x9e>
 8006644:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006648:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800664c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006650:	ec45 4b10 	vmov	d0, r4, r5
 8006654:	bd70      	pop	{r4, r5, r6, pc}
 8006656:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800665a:	da08      	bge.n	800666e <scalbn+0xb6>
 800665c:	2d00      	cmp	r5, #0
 800665e:	a10a      	add	r1, pc, #40	; (adr r1, 8006688 <scalbn+0xd0>)
 8006660:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006664:	dac0      	bge.n	80065e8 <scalbn+0x30>
 8006666:	a10e      	add	r1, pc, #56	; (adr r1, 80066a0 <scalbn+0xe8>)
 8006668:	e9d1 0100 	ldrd	r0, r1, [r1]
 800666c:	e7bc      	b.n	80065e8 <scalbn+0x30>
 800666e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006672:	3236      	adds	r2, #54	; 0x36
 8006674:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006678:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800667c:	4620      	mov	r0, r4
 800667e:	4b0c      	ldr	r3, [pc, #48]	; (80066b0 <scalbn+0xf8>)
 8006680:	2200      	movs	r2, #0
 8006682:	e7d5      	b.n	8006630 <scalbn+0x78>
 8006684:	f3af 8000 	nop.w
 8006688:	c2f8f359 	.word	0xc2f8f359
 800668c:	01a56e1f 	.word	0x01a56e1f
 8006690:	8800759c 	.word	0x8800759c
 8006694:	7e37e43c 	.word	0x7e37e43c
 8006698:	8800759c 	.word	0x8800759c
 800669c:	fe37e43c 	.word	0xfe37e43c
 80066a0:	c2f8f359 	.word	0xc2f8f359
 80066a4:	81a56e1f 	.word	0x81a56e1f
 80066a8:	43500000 	.word	0x43500000
 80066ac:	ffff3cb0 	.word	0xffff3cb0
 80066b0:	3c900000 	.word	0x3c900000

080066b4 <with_errno>:
 80066b4:	b570      	push	{r4, r5, r6, lr}
 80066b6:	4604      	mov	r4, r0
 80066b8:	460d      	mov	r5, r1
 80066ba:	4616      	mov	r6, r2
 80066bc:	f7fe fd4e 	bl	800515c <__errno>
 80066c0:	4629      	mov	r1, r5
 80066c2:	6006      	str	r6, [r0, #0]
 80066c4:	4620      	mov	r0, r4
 80066c6:	bd70      	pop	{r4, r5, r6, pc}

080066c8 <xflow>:
 80066c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80066ca:	4614      	mov	r4, r2
 80066cc:	461d      	mov	r5, r3
 80066ce:	b108      	cbz	r0, 80066d4 <xflow+0xc>
 80066d0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80066d4:	e9cd 2300 	strd	r2, r3, [sp]
 80066d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80066dc:	4620      	mov	r0, r4
 80066de:	4629      	mov	r1, r5
 80066e0:	f7f9 ff92 	bl	8000608 <__aeabi_dmul>
 80066e4:	2222      	movs	r2, #34	; 0x22
 80066e6:	b003      	add	sp, #12
 80066e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80066ec:	f7ff bfe2 	b.w	80066b4 <with_errno>

080066f0 <__math_uflow>:
 80066f0:	b508      	push	{r3, lr}
 80066f2:	2200      	movs	r2, #0
 80066f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80066f8:	f7ff ffe6 	bl	80066c8 <xflow>
 80066fc:	ec41 0b10 	vmov	d0, r0, r1
 8006700:	bd08      	pop	{r3, pc}

08006702 <__math_oflow>:
 8006702:	b508      	push	{r3, lr}
 8006704:	2200      	movs	r2, #0
 8006706:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800670a:	f7ff ffdd 	bl	80066c8 <xflow>
 800670e:	ec41 0b10 	vmov	d0, r0, r1
 8006712:	bd08      	pop	{r3, pc}

08006714 <__ieee754_sqrt>:
 8006714:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006718:	ec55 4b10 	vmov	r4, r5, d0
 800671c:	4e67      	ldr	r6, [pc, #412]	; (80068bc <__ieee754_sqrt+0x1a8>)
 800671e:	43ae      	bics	r6, r5
 8006720:	ee10 0a10 	vmov	r0, s0
 8006724:	ee10 2a10 	vmov	r2, s0
 8006728:	4629      	mov	r1, r5
 800672a:	462b      	mov	r3, r5
 800672c:	d10d      	bne.n	800674a <__ieee754_sqrt+0x36>
 800672e:	f7f9 ff6b 	bl	8000608 <__aeabi_dmul>
 8006732:	4602      	mov	r2, r0
 8006734:	460b      	mov	r3, r1
 8006736:	4620      	mov	r0, r4
 8006738:	4629      	mov	r1, r5
 800673a:	f7f9 fdaf 	bl	800029c <__adddf3>
 800673e:	4604      	mov	r4, r0
 8006740:	460d      	mov	r5, r1
 8006742:	ec45 4b10 	vmov	d0, r4, r5
 8006746:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800674a:	2d00      	cmp	r5, #0
 800674c:	dc0b      	bgt.n	8006766 <__ieee754_sqrt+0x52>
 800674e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006752:	4326      	orrs	r6, r4
 8006754:	d0f5      	beq.n	8006742 <__ieee754_sqrt+0x2e>
 8006756:	b135      	cbz	r5, 8006766 <__ieee754_sqrt+0x52>
 8006758:	f7f9 fd9e 	bl	8000298 <__aeabi_dsub>
 800675c:	4602      	mov	r2, r0
 800675e:	460b      	mov	r3, r1
 8006760:	f7fa f87c 	bl	800085c <__aeabi_ddiv>
 8006764:	e7eb      	b.n	800673e <__ieee754_sqrt+0x2a>
 8006766:	1509      	asrs	r1, r1, #20
 8006768:	f000 808d 	beq.w	8006886 <__ieee754_sqrt+0x172>
 800676c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006770:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8006774:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006778:	07c9      	lsls	r1, r1, #31
 800677a:	bf5c      	itt	pl
 800677c:	005b      	lslpl	r3, r3, #1
 800677e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8006782:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006786:	bf58      	it	pl
 8006788:	0052      	lslpl	r2, r2, #1
 800678a:	2500      	movs	r5, #0
 800678c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8006790:	1076      	asrs	r6, r6, #1
 8006792:	0052      	lsls	r2, r2, #1
 8006794:	f04f 0e16 	mov.w	lr, #22
 8006798:	46ac      	mov	ip, r5
 800679a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800679e:	eb0c 0001 	add.w	r0, ip, r1
 80067a2:	4298      	cmp	r0, r3
 80067a4:	bfde      	ittt	le
 80067a6:	1a1b      	suble	r3, r3, r0
 80067a8:	eb00 0c01 	addle.w	ip, r0, r1
 80067ac:	186d      	addle	r5, r5, r1
 80067ae:	005b      	lsls	r3, r3, #1
 80067b0:	f1be 0e01 	subs.w	lr, lr, #1
 80067b4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80067b8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80067bc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80067c0:	d1ed      	bne.n	800679e <__ieee754_sqrt+0x8a>
 80067c2:	4674      	mov	r4, lr
 80067c4:	2720      	movs	r7, #32
 80067c6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80067ca:	4563      	cmp	r3, ip
 80067cc:	eb01 000e 	add.w	r0, r1, lr
 80067d0:	dc02      	bgt.n	80067d8 <__ieee754_sqrt+0xc4>
 80067d2:	d113      	bne.n	80067fc <__ieee754_sqrt+0xe8>
 80067d4:	4290      	cmp	r0, r2
 80067d6:	d811      	bhi.n	80067fc <__ieee754_sqrt+0xe8>
 80067d8:	2800      	cmp	r0, #0
 80067da:	eb00 0e01 	add.w	lr, r0, r1
 80067de:	da57      	bge.n	8006890 <__ieee754_sqrt+0x17c>
 80067e0:	f1be 0f00 	cmp.w	lr, #0
 80067e4:	db54      	blt.n	8006890 <__ieee754_sqrt+0x17c>
 80067e6:	f10c 0801 	add.w	r8, ip, #1
 80067ea:	eba3 030c 	sub.w	r3, r3, ip
 80067ee:	4290      	cmp	r0, r2
 80067f0:	bf88      	it	hi
 80067f2:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 80067f6:	1a12      	subs	r2, r2, r0
 80067f8:	440c      	add	r4, r1
 80067fa:	46c4      	mov	ip, r8
 80067fc:	005b      	lsls	r3, r3, #1
 80067fe:	3f01      	subs	r7, #1
 8006800:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8006804:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006808:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800680c:	d1dd      	bne.n	80067ca <__ieee754_sqrt+0xb6>
 800680e:	4313      	orrs	r3, r2
 8006810:	d01b      	beq.n	800684a <__ieee754_sqrt+0x136>
 8006812:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80068c0 <__ieee754_sqrt+0x1ac>
 8006816:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80068c4 <__ieee754_sqrt+0x1b0>
 800681a:	e9da 0100 	ldrd	r0, r1, [sl]
 800681e:	e9db 2300 	ldrd	r2, r3, [fp]
 8006822:	f7f9 fd39 	bl	8000298 <__aeabi_dsub>
 8006826:	e9da 8900 	ldrd	r8, r9, [sl]
 800682a:	4602      	mov	r2, r0
 800682c:	460b      	mov	r3, r1
 800682e:	4640      	mov	r0, r8
 8006830:	4649      	mov	r1, r9
 8006832:	f7fa f965 	bl	8000b00 <__aeabi_dcmple>
 8006836:	b140      	cbz	r0, 800684a <__ieee754_sqrt+0x136>
 8006838:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800683c:	e9da 0100 	ldrd	r0, r1, [sl]
 8006840:	e9db 2300 	ldrd	r2, r3, [fp]
 8006844:	d126      	bne.n	8006894 <__ieee754_sqrt+0x180>
 8006846:	3501      	adds	r5, #1
 8006848:	463c      	mov	r4, r7
 800684a:	106a      	asrs	r2, r5, #1
 800684c:	0863      	lsrs	r3, r4, #1
 800684e:	07e9      	lsls	r1, r5, #31
 8006850:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8006854:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8006858:	bf48      	it	mi
 800685a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800685e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8006862:	461c      	mov	r4, r3
 8006864:	e76d      	b.n	8006742 <__ieee754_sqrt+0x2e>
 8006866:	0ad3      	lsrs	r3, r2, #11
 8006868:	3815      	subs	r0, #21
 800686a:	0552      	lsls	r2, r2, #21
 800686c:	2b00      	cmp	r3, #0
 800686e:	d0fa      	beq.n	8006866 <__ieee754_sqrt+0x152>
 8006870:	02dc      	lsls	r4, r3, #11
 8006872:	d50a      	bpl.n	800688a <__ieee754_sqrt+0x176>
 8006874:	f1c1 0420 	rsb	r4, r1, #32
 8006878:	fa22 f404 	lsr.w	r4, r2, r4
 800687c:	1e4d      	subs	r5, r1, #1
 800687e:	408a      	lsls	r2, r1
 8006880:	4323      	orrs	r3, r4
 8006882:	1b41      	subs	r1, r0, r5
 8006884:	e772      	b.n	800676c <__ieee754_sqrt+0x58>
 8006886:	4608      	mov	r0, r1
 8006888:	e7f0      	b.n	800686c <__ieee754_sqrt+0x158>
 800688a:	005b      	lsls	r3, r3, #1
 800688c:	3101      	adds	r1, #1
 800688e:	e7ef      	b.n	8006870 <__ieee754_sqrt+0x15c>
 8006890:	46e0      	mov	r8, ip
 8006892:	e7aa      	b.n	80067ea <__ieee754_sqrt+0xd6>
 8006894:	f7f9 fd02 	bl	800029c <__adddf3>
 8006898:	e9da 8900 	ldrd	r8, r9, [sl]
 800689c:	4602      	mov	r2, r0
 800689e:	460b      	mov	r3, r1
 80068a0:	4640      	mov	r0, r8
 80068a2:	4649      	mov	r1, r9
 80068a4:	f7fa f922 	bl	8000aec <__aeabi_dcmplt>
 80068a8:	b120      	cbz	r0, 80068b4 <__ieee754_sqrt+0x1a0>
 80068aa:	1ca0      	adds	r0, r4, #2
 80068ac:	bf08      	it	eq
 80068ae:	3501      	addeq	r5, #1
 80068b0:	3402      	adds	r4, #2
 80068b2:	e7ca      	b.n	800684a <__ieee754_sqrt+0x136>
 80068b4:	3401      	adds	r4, #1
 80068b6:	f024 0401 	bic.w	r4, r4, #1
 80068ba:	e7c6      	b.n	800684a <__ieee754_sqrt+0x136>
 80068bc:	7ff00000 	.word	0x7ff00000
 80068c0:	20000060 	.word	0x20000060
 80068c4:	20000068 	.word	0x20000068

080068c8 <_init>:
 80068c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ca:	bf00      	nop
 80068cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ce:	bc08      	pop	{r3}
 80068d0:	469e      	mov	lr, r3
 80068d2:	4770      	bx	lr

080068d4 <_fini>:
 80068d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068d6:	bf00      	nop
 80068d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068da:	bc08      	pop	{r3}
 80068dc:	469e      	mov	lr, r3
 80068de:	4770      	bx	lr
