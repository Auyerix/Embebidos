
BMP180_F401RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e88  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08005020  08005020  00015020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005070  08005070  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005070  08005070  00015070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005078  08005078  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005078  08005078  00015078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800507c  0800507c  0001507c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005080  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  20000070  080050f0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  080050f0  000202b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a487  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017fe  00000000  00000000  0002a56a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000918  00000000  00000000  0002bd68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000726  00000000  00000000  0002c680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015181  00000000  00000000  0002cda6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b972  00000000  00000000  00041f27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086ebf  00000000  00000000  0004d899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002c10  00000000  00000000  000d4758  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000d7368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005008 	.word	0x08005008

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08005008 	.word	0x08005008

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bf4:	f000 b970 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f806 	bl	8000c10 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	9e08      	ldr	r6, [sp, #32]
 8000c16:	460d      	mov	r5, r1
 8000c18:	4604      	mov	r4, r0
 8000c1a:	460f      	mov	r7, r1
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d14a      	bne.n	8000cb6 <__udivmoddi4+0xa6>
 8000c20:	428a      	cmp	r2, r1
 8000c22:	4694      	mov	ip, r2
 8000c24:	d965      	bls.n	8000cf2 <__udivmoddi4+0xe2>
 8000c26:	fab2 f382 	clz	r3, r2
 8000c2a:	b143      	cbz	r3, 8000c3e <__udivmoddi4+0x2e>
 8000c2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c30:	f1c3 0220 	rsb	r2, r3, #32
 8000c34:	409f      	lsls	r7, r3
 8000c36:	fa20 f202 	lsr.w	r2, r0, r2
 8000c3a:	4317      	orrs	r7, r2
 8000c3c:	409c      	lsls	r4, r3
 8000c3e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c42:	fa1f f58c 	uxth.w	r5, ip
 8000c46:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c4a:	0c22      	lsrs	r2, r4, #16
 8000c4c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c50:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c54:	fb01 f005 	mul.w	r0, r1, r5
 8000c58:	4290      	cmp	r0, r2
 8000c5a:	d90a      	bls.n	8000c72 <__udivmoddi4+0x62>
 8000c5c:	eb1c 0202 	adds.w	r2, ip, r2
 8000c60:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c64:	f080 811c 	bcs.w	8000ea0 <__udivmoddi4+0x290>
 8000c68:	4290      	cmp	r0, r2
 8000c6a:	f240 8119 	bls.w	8000ea0 <__udivmoddi4+0x290>
 8000c6e:	3902      	subs	r1, #2
 8000c70:	4462      	add	r2, ip
 8000c72:	1a12      	subs	r2, r2, r0
 8000c74:	b2a4      	uxth	r4, r4
 8000c76:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c7a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c7e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c82:	fb00 f505 	mul.w	r5, r0, r5
 8000c86:	42a5      	cmp	r5, r4
 8000c88:	d90a      	bls.n	8000ca0 <__udivmoddi4+0x90>
 8000c8a:	eb1c 0404 	adds.w	r4, ip, r4
 8000c8e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c92:	f080 8107 	bcs.w	8000ea4 <__udivmoddi4+0x294>
 8000c96:	42a5      	cmp	r5, r4
 8000c98:	f240 8104 	bls.w	8000ea4 <__udivmoddi4+0x294>
 8000c9c:	4464      	add	r4, ip
 8000c9e:	3802      	subs	r0, #2
 8000ca0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ca4:	1b64      	subs	r4, r4, r5
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	b11e      	cbz	r6, 8000cb2 <__udivmoddi4+0xa2>
 8000caa:	40dc      	lsrs	r4, r3
 8000cac:	2300      	movs	r3, #0
 8000cae:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d908      	bls.n	8000ccc <__udivmoddi4+0xbc>
 8000cba:	2e00      	cmp	r6, #0
 8000cbc:	f000 80ed 	beq.w	8000e9a <__udivmoddi4+0x28a>
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	e9c6 0500 	strd	r0, r5, [r6]
 8000cc6:	4608      	mov	r0, r1
 8000cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ccc:	fab3 f183 	clz	r1, r3
 8000cd0:	2900      	cmp	r1, #0
 8000cd2:	d149      	bne.n	8000d68 <__udivmoddi4+0x158>
 8000cd4:	42ab      	cmp	r3, r5
 8000cd6:	d302      	bcc.n	8000cde <__udivmoddi4+0xce>
 8000cd8:	4282      	cmp	r2, r0
 8000cda:	f200 80f8 	bhi.w	8000ece <__udivmoddi4+0x2be>
 8000cde:	1a84      	subs	r4, r0, r2
 8000ce0:	eb65 0203 	sbc.w	r2, r5, r3
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	4617      	mov	r7, r2
 8000ce8:	2e00      	cmp	r6, #0
 8000cea:	d0e2      	beq.n	8000cb2 <__udivmoddi4+0xa2>
 8000cec:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf0:	e7df      	b.n	8000cb2 <__udivmoddi4+0xa2>
 8000cf2:	b902      	cbnz	r2, 8000cf6 <__udivmoddi4+0xe6>
 8000cf4:	deff      	udf	#255	; 0xff
 8000cf6:	fab2 f382 	clz	r3, r2
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	f040 8090 	bne.w	8000e20 <__udivmoddi4+0x210>
 8000d00:	1a8a      	subs	r2, r1, r2
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d10:	fb07 2015 	mls	r0, r7, r5, r2
 8000d14:	0c22      	lsrs	r2, r4, #16
 8000d16:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d1a:	fb0e f005 	mul.w	r0, lr, r5
 8000d1e:	4290      	cmp	r0, r2
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x124>
 8000d22:	eb1c 0202 	adds.w	r2, ip, r2
 8000d26:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x122>
 8000d2c:	4290      	cmp	r0, r2
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2b8>
 8000d32:	4645      	mov	r5, r8
 8000d34:	1a12      	subs	r2, r2, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d3c:	fb07 2210 	mls	r2, r7, r0, r2
 8000d40:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x14e>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x14c>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2c2>
 8000d5c:	4610      	mov	r0, r2
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d66:	e79f      	b.n	8000ca8 <__udivmoddi4+0x98>
 8000d68:	f1c1 0720 	rsb	r7, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa05 f401 	lsl.w	r4, r5, r1
 8000d7a:	fa20 f307 	lsr.w	r3, r0, r7
 8000d7e:	40fd      	lsrs	r5, r7
 8000d80:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d84:	4323      	orrs	r3, r4
 8000d86:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d8a:	fa1f fe8c 	uxth.w	lr, ip
 8000d8e:	fb09 5518 	mls	r5, r9, r8, r5
 8000d92:	0c1c      	lsrs	r4, r3, #16
 8000d94:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d98:	fb08 f50e 	mul.w	r5, r8, lr
 8000d9c:	42a5      	cmp	r5, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	fa00 f001 	lsl.w	r0, r0, r1
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b0>
 8000da8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2b4>
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2b4>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4464      	add	r4, ip
 8000dc0:	1b64      	subs	r4, r4, r5
 8000dc2:	b29d      	uxth	r5, r3
 8000dc4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc8:	fb09 4413 	mls	r4, r9, r3, r4
 8000dcc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd0:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dd4:	45a6      	cmp	lr, r4
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1da>
 8000dd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ddc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2ac>
 8000de2:	45a6      	cmp	lr, r4
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2ac>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	4464      	add	r4, ip
 8000dea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dee:	fba3 9502 	umull	r9, r5, r3, r2
 8000df2:	eba4 040e 	sub.w	r4, r4, lr
 8000df6:	42ac      	cmp	r4, r5
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46ae      	mov	lr, r5
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x29c>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x298>
 8000e00:	b156      	cbz	r6, 8000e18 <__udivmoddi4+0x208>
 8000e02:	ebb0 0208 	subs.w	r2, r0, r8
 8000e06:	eb64 040e 	sbc.w	r4, r4, lr
 8000e0a:	fa04 f707 	lsl.w	r7, r4, r7
 8000e0e:	40ca      	lsrs	r2, r1
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	4317      	orrs	r7, r2
 8000e14:	e9c6 7400 	strd	r7, r4, [r6]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e20:	f1c3 0120 	rsb	r1, r3, #32
 8000e24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e28:	fa20 f201 	lsr.w	r2, r0, r1
 8000e2c:	fa25 f101 	lsr.w	r1, r5, r1
 8000e30:	409d      	lsls	r5, r3
 8000e32:	432a      	orrs	r2, r5
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e40:	fb07 1510 	mls	r5, r7, r0, r1
 8000e44:	0c11      	lsrs	r1, r2, #16
 8000e46:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e4a:	fb00 f50e 	mul.w	r5, r0, lr
 8000e4e:	428d      	cmp	r5, r1
 8000e50:	fa04 f403 	lsl.w	r4, r4, r3
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x258>
 8000e56:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b0>
 8000e60:	428d      	cmp	r5, r1
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b0>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4461      	add	r1, ip
 8000e68:	1b49      	subs	r1, r1, r5
 8000e6a:	b292      	uxth	r2, r2
 8000e6c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e70:	fb07 1115 	mls	r1, r7, r5, r1
 8000e74:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e78:	fb05 f10e 	mul.w	r1, r5, lr
 8000e7c:	4291      	cmp	r1, r2
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x282>
 8000e80:	eb1c 0202 	adds.w	r2, ip, r2
 8000e84:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2a8>
 8000e8a:	4291      	cmp	r1, r2
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2a8>
 8000e8e:	3d02      	subs	r5, #2
 8000e90:	4462      	add	r2, ip
 8000e92:	1a52      	subs	r2, r2, r1
 8000e94:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0xfc>
 8000e9a:	4631      	mov	r1, r6
 8000e9c:	4630      	mov	r0, r6
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xa2>
 8000ea0:	4639      	mov	r1, r7
 8000ea2:	e6e6      	b.n	8000c72 <__udivmoddi4+0x62>
 8000ea4:	4610      	mov	r0, r2
 8000ea6:	e6fb      	b.n	8000ca0 <__udivmoddi4+0x90>
 8000ea8:	4548      	cmp	r0, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f0>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f0>
 8000eb8:	4645      	mov	r5, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x282>
 8000ebc:	462b      	mov	r3, r5
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1da>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x258>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b0>
 8000ec8:	3d02      	subs	r5, #2
 8000eca:	4462      	add	r2, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x124>
 8000ece:	4608      	mov	r0, r1
 8000ed0:	e70a      	b.n	8000ce8 <__udivmoddi4+0xd8>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x14e>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee0:	f000 feda 	bl	8001c98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee4:	f000 f834 	bl	8000f50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee8:	f000 f8f6 	bl	80010d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000eec:	f000 f8ca 	bl	8001084 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000ef0:	f000 f89a 	bl	8001028 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay (2000);
 8000ef4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ef8:	f000 ff40 	bl	8001d7c <HAL_Delay>
  BMP180_Start(); //leer calibraciòn
 8000efc:	f000 fec6 	bl	8001c8c <BMP180_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  Temperature = BMP180_GetTemp();
 8000f00:	f000 fb4c 	bl	800159c <BMP180_GetTemp>
 8000f04:	eef0 7a40 	vmov.f32	s15, s0
 8000f08:	4b0d      	ldr	r3, [pc, #52]	; (8000f40 <main+0x64>)
 8000f0a:	edc3 7a00 	vstr	s15, [r3]

	  Pressure = BMP180_GetPress (0);
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f000 fc40 	bl	8001794 <BMP180_GetPress>
 8000f14:	eef0 7a40 	vmov.f32	s15, s0
 8000f18:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <main+0x68>)
 8000f1a:	edc3 7a00 	vstr	s15, [r3]

	  Altitude = BMP180_GetAlt(0);
 8000f1e:	2000      	movs	r0, #0
 8000f20:	f000 fe6a 	bl	8001bf8 <BMP180_GetAlt>
 8000f24:	eef0 7a40 	vmov.f32	s15, s0
 8000f28:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <main+0x6c>)
 8000f2a:	edc3 7a00 	vstr	s15, [r3]

	  HAL_Delay (2000);
 8000f2e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f32:	f000 ff23 	bl	8001d7c <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000f36:	2120      	movs	r1, #32
 8000f38:	4804      	ldr	r0, [pc, #16]	; (8000f4c <main+0x70>)
 8000f3a:	f001 f9c6 	bl	80022ca <HAL_GPIO_TogglePin>
	  Temperature = BMP180_GetTemp();
 8000f3e:	e7df      	b.n	8000f00 <main+0x24>
 8000f40:	20000124 	.word	0x20000124
 8000f44:	20000128 	.word	0x20000128
 8000f48:	2000012c 	.word	0x2000012c
 8000f4c:	40020000 	.word	0x40020000

08000f50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b094      	sub	sp, #80	; 0x50
 8000f54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f56:	f107 0320 	add.w	r3, r7, #32
 8000f5a:	2230      	movs	r2, #48	; 0x30
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f003 f8e8 	bl	8004134 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f64:	f107 030c 	add.w	r3, r7, #12
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f74:	2300      	movs	r3, #0
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	4b29      	ldr	r3, [pc, #164]	; (8001020 <SystemClock_Config+0xd0>)
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7c:	4a28      	ldr	r2, [pc, #160]	; (8001020 <SystemClock_Config+0xd0>)
 8000f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f82:	6413      	str	r3, [r2, #64]	; 0x40
 8000f84:	4b26      	ldr	r3, [pc, #152]	; (8001020 <SystemClock_Config+0xd0>)
 8000f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f90:	2300      	movs	r3, #0
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	4b23      	ldr	r3, [pc, #140]	; (8001024 <SystemClock_Config+0xd4>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f9c:	4a21      	ldr	r2, [pc, #132]	; (8001024 <SystemClock_Config+0xd4>)
 8000f9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fa2:	6013      	str	r3, [r2, #0]
 8000fa4:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <SystemClock_Config+0xd4>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fac:	607b      	str	r3, [r7, #4]
 8000fae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fb8:	2310      	movs	r3, #16
 8000fba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000fc4:	2310      	movs	r3, #16
 8000fc6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fc8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000fcc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000fce:	2304      	movs	r3, #4
 8000fd0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fd2:	2307      	movs	r3, #7
 8000fd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd6:	f107 0320 	add.w	r3, r7, #32
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f002 f950 	bl	8003280 <HAL_RCC_OscConfig>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000fe6:	f000 f8e5 	bl	80011b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fea:	230f      	movs	r3, #15
 8000fec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ff6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ffa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001000:	f107 030c 	add.w	r3, r7, #12
 8001004:	2102      	movs	r1, #2
 8001006:	4618      	mov	r0, r3
 8001008:	f002 fbb2 	bl	8003770 <HAL_RCC_ClockConfig>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001012:	f000 f8cf 	bl	80011b4 <Error_Handler>
  }
}
 8001016:	bf00      	nop
 8001018:	3750      	adds	r7, #80	; 0x50
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40023800 	.word	0x40023800
 8001024:	40007000 	.word	0x40007000

08001028 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800102c:	4b12      	ldr	r3, [pc, #72]	; (8001078 <MX_I2C1_Init+0x50>)
 800102e:	4a13      	ldr	r2, [pc, #76]	; (800107c <MX_I2C1_Init+0x54>)
 8001030:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001032:	4b11      	ldr	r3, [pc, #68]	; (8001078 <MX_I2C1_Init+0x50>)
 8001034:	4a12      	ldr	r2, [pc, #72]	; (8001080 <MX_I2C1_Init+0x58>)
 8001036:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001038:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <MX_I2C1_Init+0x50>)
 800103a:	2200      	movs	r2, #0
 800103c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800103e:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <MX_I2C1_Init+0x50>)
 8001040:	2200      	movs	r2, #0
 8001042:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001044:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <MX_I2C1_Init+0x50>)
 8001046:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800104a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800104c:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <MX_I2C1_Init+0x50>)
 800104e:	2200      	movs	r2, #0
 8001050:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001052:	4b09      	ldr	r3, [pc, #36]	; (8001078 <MX_I2C1_Init+0x50>)
 8001054:	2200      	movs	r2, #0
 8001056:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001058:	4b07      	ldr	r3, [pc, #28]	; (8001078 <MX_I2C1_Init+0x50>)
 800105a:	2200      	movs	r2, #0
 800105c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <MX_I2C1_Init+0x50>)
 8001060:	2200      	movs	r2, #0
 8001062:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001064:	4804      	ldr	r0, [pc, #16]	; (8001078 <MX_I2C1_Init+0x50>)
 8001066:	f001 f94b 	bl	8002300 <HAL_I2C_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001070:	f000 f8a0 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}
 8001078:	2000008c 	.word	0x2000008c
 800107c:	40005400 	.word	0x40005400
 8001080:	00061a80 	.word	0x00061a80

08001084 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001088:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <MX_USART2_UART_Init+0x4c>)
 800108a:	4a12      	ldr	r2, [pc, #72]	; (80010d4 <MX_USART2_UART_Init+0x50>)
 800108c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800108e:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <MX_USART2_UART_Init+0x4c>)
 8001090:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001094:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001096:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <MX_USART2_UART_Init+0x4c>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800109c:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <MX_USART2_UART_Init+0x4c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010a2:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <MX_USART2_UART_Init+0x4c>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010a8:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <MX_USART2_UART_Init+0x4c>)
 80010aa:	220c      	movs	r2, #12
 80010ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ae:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <MX_USART2_UART_Init+0x4c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <MX_USART2_UART_Init+0x4c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010ba:	4805      	ldr	r0, [pc, #20]	; (80010d0 <MX_USART2_UART_Init+0x4c>)
 80010bc:	f002 fd78 	bl	8003bb0 <HAL_UART_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010c6:	f000 f875 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200000e0 	.word	0x200000e0
 80010d4:	40004400 	.word	0x40004400

080010d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08a      	sub	sp, #40	; 0x28
 80010dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
 80010ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	613b      	str	r3, [r7, #16]
 80010f2:	4b2d      	ldr	r3, [pc, #180]	; (80011a8 <MX_GPIO_Init+0xd0>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a2c      	ldr	r2, [pc, #176]	; (80011a8 <MX_GPIO_Init+0xd0>)
 80010f8:	f043 0304 	orr.w	r3, r3, #4
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b2a      	ldr	r3, [pc, #168]	; (80011a8 <MX_GPIO_Init+0xd0>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0304 	and.w	r3, r3, #4
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	4b26      	ldr	r3, [pc, #152]	; (80011a8 <MX_GPIO_Init+0xd0>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a25      	ldr	r2, [pc, #148]	; (80011a8 <MX_GPIO_Init+0xd0>)
 8001114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b23      	ldr	r3, [pc, #140]	; (80011a8 <MX_GPIO_Init+0xd0>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	4b1f      	ldr	r3, [pc, #124]	; (80011a8 <MX_GPIO_Init+0xd0>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a1e      	ldr	r2, [pc, #120]	; (80011a8 <MX_GPIO_Init+0xd0>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b1c      	ldr	r3, [pc, #112]	; (80011a8 <MX_GPIO_Init+0xd0>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	4b18      	ldr	r3, [pc, #96]	; (80011a8 <MX_GPIO_Init+0xd0>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a17      	ldr	r2, [pc, #92]	; (80011a8 <MX_GPIO_Init+0xd0>)
 800114c:	f043 0302 	orr.w	r3, r3, #2
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <MX_GPIO_Init+0xd0>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 800115e:	2200      	movs	r2, #0
 8001160:	21e0      	movs	r1, #224	; 0xe0
 8001162:	4812      	ldr	r0, [pc, #72]	; (80011ac <MX_GPIO_Init+0xd4>)
 8001164:	f001 f898 	bl	8002298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001168:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800116c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800116e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001172:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	4619      	mov	r1, r3
 800117e:	480c      	ldr	r0, [pc, #48]	; (80011b0 <MX_GPIO_Init+0xd8>)
 8001180:	f000 ff06 	bl	8001f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED3_Pin|LED4_Pin;
 8001184:	23e0      	movs	r3, #224	; 0xe0
 8001186:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001188:	2301      	movs	r3, #1
 800118a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	2300      	movs	r3, #0
 8001192:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	4619      	mov	r1, r3
 800119a:	4804      	ldr	r0, [pc, #16]	; (80011ac <MX_GPIO_Init+0xd4>)
 800119c:	f000 fef8 	bl	8001f90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011a0:	bf00      	nop
 80011a2:	3728      	adds	r7, #40	; 0x28
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40020000 	.word	0x40020000
 80011b0:	40020800 	.word	0x40020800

080011b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b8:	b672      	cpsid	i
}
 80011ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011bc:	e7fe      	b.n	80011bc <Error_Handler+0x8>
	...

080011c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	607b      	str	r3, [r7, #4]
 80011ca:	4b10      	ldr	r3, [pc, #64]	; (800120c <HAL_MspInit+0x4c>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ce:	4a0f      	ldr	r2, [pc, #60]	; (800120c <HAL_MspInit+0x4c>)
 80011d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d4:	6453      	str	r3, [r2, #68]	; 0x44
 80011d6:	4b0d      	ldr	r3, [pc, #52]	; (800120c <HAL_MspInit+0x4c>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	603b      	str	r3, [r7, #0]
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <HAL_MspInit+0x4c>)
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	4a08      	ldr	r2, [pc, #32]	; (800120c <HAL_MspInit+0x4c>)
 80011ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f0:	6413      	str	r3, [r2, #64]	; 0x40
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <HAL_MspInit+0x4c>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011fe:	2007      	movs	r0, #7
 8001200:	f000 fe92 	bl	8001f28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40023800 	.word	0x40023800

08001210 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	; 0x28
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a19      	ldr	r2, [pc, #100]	; (8001294 <HAL_I2C_MspInit+0x84>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d12b      	bne.n	800128a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
 8001236:	4b18      	ldr	r3, [pc, #96]	; (8001298 <HAL_I2C_MspInit+0x88>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a17      	ldr	r2, [pc, #92]	; (8001298 <HAL_I2C_MspInit+0x88>)
 800123c:	f043 0302 	orr.w	r3, r3, #2
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <HAL_I2C_MspInit+0x88>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800124e:	23c0      	movs	r3, #192	; 0xc0
 8001250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001252:	2312      	movs	r3, #18
 8001254:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125a:	2303      	movs	r3, #3
 800125c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800125e:	2304      	movs	r3, #4
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001262:	f107 0314 	add.w	r3, r7, #20
 8001266:	4619      	mov	r1, r3
 8001268:	480c      	ldr	r0, [pc, #48]	; (800129c <HAL_I2C_MspInit+0x8c>)
 800126a:	f000 fe91 	bl	8001f90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	4b09      	ldr	r3, [pc, #36]	; (8001298 <HAL_I2C_MspInit+0x88>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	4a08      	ldr	r2, [pc, #32]	; (8001298 <HAL_I2C_MspInit+0x88>)
 8001278:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800127c:	6413      	str	r3, [r2, #64]	; 0x40
 800127e:	4b06      	ldr	r3, [pc, #24]	; (8001298 <HAL_I2C_MspInit+0x88>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800128a:	bf00      	nop
 800128c:	3728      	adds	r7, #40	; 0x28
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40005400 	.word	0x40005400
 8001298:	40023800 	.word	0x40023800
 800129c:	40020400 	.word	0x40020400

080012a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08a      	sub	sp, #40	; 0x28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a19      	ldr	r2, [pc, #100]	; (8001324 <HAL_UART_MspInit+0x84>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d12b      	bne.n	800131a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	613b      	str	r3, [r7, #16]
 80012c6:	4b18      	ldr	r3, [pc, #96]	; (8001328 <HAL_UART_MspInit+0x88>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	4a17      	ldr	r2, [pc, #92]	; (8001328 <HAL_UART_MspInit+0x88>)
 80012cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d0:	6413      	str	r3, [r2, #64]	; 0x40
 80012d2:	4b15      	ldr	r3, [pc, #84]	; (8001328 <HAL_UART_MspInit+0x88>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	4b11      	ldr	r3, [pc, #68]	; (8001328 <HAL_UART_MspInit+0x88>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	4a10      	ldr	r2, [pc, #64]	; (8001328 <HAL_UART_MspInit+0x88>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	6313      	str	r3, [r2, #48]	; 0x30
 80012ee:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <HAL_UART_MspInit+0x88>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012fa:	230c      	movs	r3, #12
 80012fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fe:	2302      	movs	r3, #2
 8001300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001306:	2300      	movs	r3, #0
 8001308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800130a:	2307      	movs	r3, #7
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4619      	mov	r1, r3
 8001314:	4805      	ldr	r0, [pc, #20]	; (800132c <HAL_UART_MspInit+0x8c>)
 8001316:	f000 fe3b 	bl	8001f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800131a:	bf00      	nop
 800131c:	3728      	adds	r7, #40	; 0x28
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40004400 	.word	0x40004400
 8001328:	40023800 	.word	0x40023800
 800132c:	40020000 	.word	0x40020000

08001330 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001334:	e7fe      	b.n	8001334 <NMI_Handler+0x4>

08001336 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001336:	b480      	push	{r7}
 8001338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800133a:	e7fe      	b.n	800133a <HardFault_Handler+0x4>

0800133c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001340:	e7fe      	b.n	8001340 <MemManage_Handler+0x4>

08001342 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001342:	b480      	push	{r7}
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001346:	e7fe      	b.n	8001346 <BusFault_Handler+0x4>

08001348 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800134c:	e7fe      	b.n	800134c <UsageFault_Handler+0x4>

0800134e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800137c:	f000 fcde 	bl	8001d3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001380:	bf00      	nop
 8001382:	bd80      	pop	{r7, pc}

08001384 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <SystemInit+0x20>)
 800138a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800138e:	4a05      	ldr	r2, [pc, #20]	; (80013a4 <SystemInit+0x20>)
 8001390:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001394:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80013a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013ac:	480d      	ldr	r0, [pc, #52]	; (80013e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013ae:	490e      	ldr	r1, [pc, #56]	; (80013e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013b0:	4a0e      	ldr	r2, [pc, #56]	; (80013ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b4:	e002      	b.n	80013bc <LoopCopyDataInit>

080013b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ba:	3304      	adds	r3, #4

080013bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c0:	d3f9      	bcc.n	80013b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013c2:	4a0b      	ldr	r2, [pc, #44]	; (80013f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013c4:	4c0b      	ldr	r4, [pc, #44]	; (80013f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c8:	e001      	b.n	80013ce <LoopFillZerobss>

080013ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013cc:	3204      	adds	r2, #4

080013ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d0:	d3fb      	bcc.n	80013ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013d2:	f7ff ffd7 	bl	8001384 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013d6:	f002 febb 	bl	8004150 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013da:	f7ff fd7f 	bl	8000edc <main>
  bx  lr    
 80013de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80013e0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80013e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80013ec:	08005080 	.word	0x08005080
  ldr r2, =_sbss
 80013f0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80013f4:	200002b4 	.word	0x200002b4

080013f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013f8:	e7fe      	b.n	80013f8 <ADC_IRQHandler>
	...

080013fc <read_calliberation_data>:
#define atmPress 101325 //Pa



void read_calliberation_data (void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	; 0x28
 8001400:	af04      	add	r7, sp, #16
	uint8_t Callib_Data[22] = {0};
 8001402:	2300      	movs	r3, #0
 8001404:	603b      	str	r3, [r7, #0]
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	821a      	strh	r2, [r3, #16]
	uint16_t Callib_Start = 0xAA;
 8001414:	23aa      	movs	r3, #170	; 0xaa
 8001416:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, Callib_Start, 1, Callib_Data,22, HAL_MAX_DELAY);
 8001418:	8afa      	ldrh	r2, [r7, #22]
 800141a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800141e:	9302      	str	r3, [sp, #8]
 8001420:	2316      	movs	r3, #22
 8001422:	9301      	str	r3, [sp, #4]
 8001424:	463b      	mov	r3, r7
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	2301      	movs	r3, #1
 800142a:	21ee      	movs	r1, #238	; 0xee
 800142c:	4836      	ldr	r0, [pc, #216]	; (8001508 <read_calliberation_data+0x10c>)
 800142e:	f001 f9a5 	bl	800277c <HAL_I2C_Mem_Read>

	AC1 = ((Callib_Data[0] << 8) | Callib_Data[1]);
 8001432:	783b      	ldrb	r3, [r7, #0]
 8001434:	021b      	lsls	r3, r3, #8
 8001436:	b21a      	sxth	r2, r3
 8001438:	787b      	ldrb	r3, [r7, #1]
 800143a:	b21b      	sxth	r3, r3
 800143c:	4313      	orrs	r3, r2
 800143e:	b21a      	sxth	r2, r3
 8001440:	4b32      	ldr	r3, [pc, #200]	; (800150c <read_calliberation_data+0x110>)
 8001442:	801a      	strh	r2, [r3, #0]
	AC2 = ((Callib_Data[2] << 8) | Callib_Data[3]);
 8001444:	78bb      	ldrb	r3, [r7, #2]
 8001446:	021b      	lsls	r3, r3, #8
 8001448:	b21a      	sxth	r2, r3
 800144a:	78fb      	ldrb	r3, [r7, #3]
 800144c:	b21b      	sxth	r3, r3
 800144e:	4313      	orrs	r3, r2
 8001450:	b21a      	sxth	r2, r3
 8001452:	4b2f      	ldr	r3, [pc, #188]	; (8001510 <read_calliberation_data+0x114>)
 8001454:	801a      	strh	r2, [r3, #0]
	AC3 = ((Callib_Data[4] << 8) | Callib_Data[5]);
 8001456:	793b      	ldrb	r3, [r7, #4]
 8001458:	021b      	lsls	r3, r3, #8
 800145a:	b21a      	sxth	r2, r3
 800145c:	797b      	ldrb	r3, [r7, #5]
 800145e:	b21b      	sxth	r3, r3
 8001460:	4313      	orrs	r3, r2
 8001462:	b21a      	sxth	r2, r3
 8001464:	4b2b      	ldr	r3, [pc, #172]	; (8001514 <read_calliberation_data+0x118>)
 8001466:	801a      	strh	r2, [r3, #0]
	AC4 = ((Callib_Data[6] << 8) | Callib_Data[7]);
 8001468:	79bb      	ldrb	r3, [r7, #6]
 800146a:	021b      	lsls	r3, r3, #8
 800146c:	b21a      	sxth	r2, r3
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	b21b      	sxth	r3, r3
 8001472:	4313      	orrs	r3, r2
 8001474:	b21b      	sxth	r3, r3
 8001476:	b29a      	uxth	r2, r3
 8001478:	4b27      	ldr	r3, [pc, #156]	; (8001518 <read_calliberation_data+0x11c>)
 800147a:	801a      	strh	r2, [r3, #0]
	AC5 = ((Callib_Data[8] << 8) | Callib_Data[9]);
 800147c:	7a3b      	ldrb	r3, [r7, #8]
 800147e:	021b      	lsls	r3, r3, #8
 8001480:	b21a      	sxth	r2, r3
 8001482:	7a7b      	ldrb	r3, [r7, #9]
 8001484:	b21b      	sxth	r3, r3
 8001486:	4313      	orrs	r3, r2
 8001488:	b21b      	sxth	r3, r3
 800148a:	b29a      	uxth	r2, r3
 800148c:	4b23      	ldr	r3, [pc, #140]	; (800151c <read_calliberation_data+0x120>)
 800148e:	801a      	strh	r2, [r3, #0]
	AC6 = ((Callib_Data[10] << 8) | Callib_Data[11]);
 8001490:	7abb      	ldrb	r3, [r7, #10]
 8001492:	021b      	lsls	r3, r3, #8
 8001494:	b21a      	sxth	r2, r3
 8001496:	7afb      	ldrb	r3, [r7, #11]
 8001498:	b21b      	sxth	r3, r3
 800149a:	4313      	orrs	r3, r2
 800149c:	b21b      	sxth	r3, r3
 800149e:	b29a      	uxth	r2, r3
 80014a0:	4b1f      	ldr	r3, [pc, #124]	; (8001520 <read_calliberation_data+0x124>)
 80014a2:	801a      	strh	r2, [r3, #0]
	B1 = ((Callib_Data[12] << 8) | Callib_Data[13]);
 80014a4:	7b3b      	ldrb	r3, [r7, #12]
 80014a6:	021b      	lsls	r3, r3, #8
 80014a8:	b21a      	sxth	r2, r3
 80014aa:	7b7b      	ldrb	r3, [r7, #13]
 80014ac:	b21b      	sxth	r3, r3
 80014ae:	4313      	orrs	r3, r2
 80014b0:	b21a      	sxth	r2, r3
 80014b2:	4b1c      	ldr	r3, [pc, #112]	; (8001524 <read_calliberation_data+0x128>)
 80014b4:	801a      	strh	r2, [r3, #0]
	B2 = ((Callib_Data[14] << 8) | Callib_Data[15]);
 80014b6:	7bbb      	ldrb	r3, [r7, #14]
 80014b8:	021b      	lsls	r3, r3, #8
 80014ba:	b21a      	sxth	r2, r3
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
 80014be:	b21b      	sxth	r3, r3
 80014c0:	4313      	orrs	r3, r2
 80014c2:	b21a      	sxth	r2, r3
 80014c4:	4b18      	ldr	r3, [pc, #96]	; (8001528 <read_calliberation_data+0x12c>)
 80014c6:	801a      	strh	r2, [r3, #0]
	MB = ((Callib_Data[16] << 8) | Callib_Data[17]);
 80014c8:	7c3b      	ldrb	r3, [r7, #16]
 80014ca:	021b      	lsls	r3, r3, #8
 80014cc:	b21a      	sxth	r2, r3
 80014ce:	7c7b      	ldrb	r3, [r7, #17]
 80014d0:	b21b      	sxth	r3, r3
 80014d2:	4313      	orrs	r3, r2
 80014d4:	b21a      	sxth	r2, r3
 80014d6:	4b15      	ldr	r3, [pc, #84]	; (800152c <read_calliberation_data+0x130>)
 80014d8:	801a      	strh	r2, [r3, #0]
	MC = ((Callib_Data[18] << 8) | Callib_Data[19]);
 80014da:	7cbb      	ldrb	r3, [r7, #18]
 80014dc:	021b      	lsls	r3, r3, #8
 80014de:	b21a      	sxth	r2, r3
 80014e0:	7cfb      	ldrb	r3, [r7, #19]
 80014e2:	b21b      	sxth	r3, r3
 80014e4:	4313      	orrs	r3, r2
 80014e6:	b21a      	sxth	r2, r3
 80014e8:	4b11      	ldr	r3, [pc, #68]	; (8001530 <read_calliberation_data+0x134>)
 80014ea:	801a      	strh	r2, [r3, #0]
	MD = ((Callib_Data[20] << 8) | Callib_Data[21]);
 80014ec:	7d3b      	ldrb	r3, [r7, #20]
 80014ee:	021b      	lsls	r3, r3, #8
 80014f0:	b21a      	sxth	r2, r3
 80014f2:	7d7b      	ldrb	r3, [r7, #21]
 80014f4:	b21b      	sxth	r3, r3
 80014f6:	4313      	orrs	r3, r2
 80014f8:	b21a      	sxth	r2, r3
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <read_calliberation_data+0x138>)
 80014fc:	801a      	strh	r2, [r3, #0]

}
 80014fe:	bf00      	nop
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	2000008c 	.word	0x2000008c
 800150c:	20000130 	.word	0x20000130
 8001510:	20000132 	.word	0x20000132
 8001514:	20000134 	.word	0x20000134
 8001518:	20000136 	.word	0x20000136
 800151c:	20000138 	.word	0x20000138
 8001520:	2000013a 	.word	0x2000013a
 8001524:	2000013c 	.word	0x2000013c
 8001528:	2000013e 	.word	0x2000013e
 800152c:	20000140 	.word	0x20000140
 8001530:	20000142 	.word	0x20000142
 8001534:	20000144 	.word	0x20000144

08001538 <Get_UTemp>:


// Get uncompensated Temp
uint16_t Get_UTemp (void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af04      	add	r7, sp, #16
	uint8_t datatowrite = 0x2E;
 800153e:	232e      	movs	r3, #46	; 0x2e
 8001540:	71fb      	strb	r3, [r7, #7]
	uint8_t Temp_RAW[2] = {0};
 8001542:	2300      	movs	r3, #0
 8001544:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 8001546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800154a:	9302      	str	r3, [sp, #8]
 800154c:	2301      	movs	r3, #1
 800154e:	9301      	str	r3, [sp, #4]
 8001550:	1dfb      	adds	r3, r7, #7
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	2301      	movs	r3, #1
 8001556:	22f4      	movs	r2, #244	; 0xf4
 8001558:	21ee      	movs	r1, #238	; 0xee
 800155a:	480f      	ldr	r0, [pc, #60]	; (8001598 <Get_UTemp+0x60>)
 800155c:	f001 f814 	bl	8002588 <HAL_I2C_Mem_Write>
	HAL_Delay (5);  // wait 4.5 ms
 8001560:	2005      	movs	r0, #5
 8001562:	f000 fc0b 	bl	8001d7c <HAL_Delay>
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Temp_RAW, 2, 1000);
 8001566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800156a:	9302      	str	r3, [sp, #8]
 800156c:	2302      	movs	r3, #2
 800156e:	9301      	str	r3, [sp, #4]
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	2301      	movs	r3, #1
 8001576:	22f6      	movs	r2, #246	; 0xf6
 8001578:	21ee      	movs	r1, #238	; 0xee
 800157a:	4807      	ldr	r0, [pc, #28]	; (8001598 <Get_UTemp+0x60>)
 800157c:	f001 f8fe 	bl	800277c <HAL_I2C_Mem_Read>
	return ((Temp_RAW[0]<<8) + Temp_RAW[1]);
 8001580:	793b      	ldrb	r3, [r7, #4]
 8001582:	b29b      	uxth	r3, r3
 8001584:	021b      	lsls	r3, r3, #8
 8001586:	b29a      	uxth	r2, r3
 8001588:	797b      	ldrb	r3, [r7, #5]
 800158a:	b29b      	uxth	r3, r3
 800158c:	4413      	add	r3, r2
 800158e:	b29b      	uxth	r3, r3
}
 8001590:	4618      	mov	r0, r3
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	2000008c 	.word	0x2000008c

0800159c <BMP180_GetTemp>:

float BMP180_GetTemp (void)
{
 800159c:	b5b0      	push	{r4, r5, r7, lr}
 800159e:	af00      	add	r7, sp, #0
	UT = Get_UTemp();
 80015a0:	f7ff ffca 	bl	8001538 <Get_UTemp>
 80015a4:	4603      	mov	r3, r0
 80015a6:	461a      	mov	r2, r3
 80015a8:	4b3e      	ldr	r3, [pc, #248]	; (80016a4 <BMP180_GetTemp+0x108>)
 80015aa:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 80015ac:	4b3d      	ldr	r3, [pc, #244]	; (80016a4 <BMP180_GetTemp+0x108>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a3d      	ldr	r2, [pc, #244]	; (80016a8 <BMP180_GetTemp+0x10c>)
 80015b2:	8812      	ldrh	r2, [r2, #0]
 80015b4:	1a9b      	subs	r3, r3, r2
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7fe ff60 	bl	800047c <__aeabi_i2d>
 80015bc:	4604      	mov	r4, r0
 80015be:	460d      	mov	r5, r1
 80015c0:	4b3a      	ldr	r3, [pc, #232]	; (80016ac <BMP180_GetTemp+0x110>)
 80015c2:	881b      	ldrh	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7fe ff59 	bl	800047c <__aeabi_i2d>
 80015ca:	f04f 0200 	mov.w	r2, #0
 80015ce:	4b38      	ldr	r3, [pc, #224]	; (80016b0 <BMP180_GetTemp+0x114>)
 80015d0:	f7ff f8e8 	bl	80007a4 <__aeabi_ddiv>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4620      	mov	r0, r4
 80015da:	4629      	mov	r1, r5
 80015dc:	f7fe ffb8 	bl	8000550 <__aeabi_dmul>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	4610      	mov	r0, r2
 80015e6:	4619      	mov	r1, r3
 80015e8:	f7ff fa62 	bl	8000ab0 <__aeabi_d2iz>
 80015ec:	4603      	mov	r3, r0
 80015ee:	4a31      	ldr	r2, [pc, #196]	; (80016b4 <BMP180_GetTemp+0x118>)
 80015f0:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 80015f2:	4b31      	ldr	r3, [pc, #196]	; (80016b8 <BMP180_GetTemp+0x11c>)
 80015f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7fe ff3f 	bl	800047c <__aeabi_i2d>
 80015fe:	f04f 0200 	mov.w	r2, #0
 8001602:	4b2e      	ldr	r3, [pc, #184]	; (80016bc <BMP180_GetTemp+0x120>)
 8001604:	f7fe ffa4 	bl	8000550 <__aeabi_dmul>
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	4614      	mov	r4, r2
 800160e:	461d      	mov	r5, r3
 8001610:	4b2b      	ldr	r3, [pc, #172]	; (80016c0 <BMP180_GetTemp+0x124>)
 8001612:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001616:	461a      	mov	r2, r3
 8001618:	4b26      	ldr	r3, [pc, #152]	; (80016b4 <BMP180_GetTemp+0x118>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4413      	add	r3, r2
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe ff2c 	bl	800047c <__aeabi_i2d>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	4620      	mov	r0, r4
 800162a:	4629      	mov	r1, r5
 800162c:	f7ff f8ba 	bl	80007a4 <__aeabi_ddiv>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	4610      	mov	r0, r2
 8001636:	4619      	mov	r1, r3
 8001638:	f7ff fa3a 	bl	8000ab0 <__aeabi_d2iz>
 800163c:	4603      	mov	r3, r0
 800163e:	4a21      	ldr	r2, [pc, #132]	; (80016c4 <BMP180_GetTemp+0x128>)
 8001640:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 8001642:	4b1c      	ldr	r3, [pc, #112]	; (80016b4 <BMP180_GetTemp+0x118>)
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	4b1f      	ldr	r3, [pc, #124]	; (80016c4 <BMP180_GetTemp+0x128>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4413      	add	r3, r2
 800164c:	4a1e      	ldr	r2, [pc, #120]	; (80016c8 <BMP180_GetTemp+0x12c>)
 800164e:	6013      	str	r3, [r2, #0]
	Temp = (B5+8)/(pow(2,4));
 8001650:	4b1d      	ldr	r3, [pc, #116]	; (80016c8 <BMP180_GetTemp+0x12c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	3308      	adds	r3, #8
 8001656:	4618      	mov	r0, r3
 8001658:	f7fe ff10 	bl	800047c <__aeabi_i2d>
 800165c:	f04f 0200 	mov.w	r2, #0
 8001660:	4b1a      	ldr	r3, [pc, #104]	; (80016cc <BMP180_GetTemp+0x130>)
 8001662:	f7ff f89f 	bl	80007a4 <__aeabi_ddiv>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4610      	mov	r0, r2
 800166c:	4619      	mov	r1, r3
 800166e:	f7ff fa1f 	bl	8000ab0 <__aeabi_d2iz>
 8001672:	4603      	mov	r3, r0
 8001674:	4a16      	ldr	r2, [pc, #88]	; (80016d0 <BMP180_GetTemp+0x134>)
 8001676:	6013      	str	r3, [r2, #0]
	return Temp/10.0;
 8001678:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <BMP180_GetTemp+0x134>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f7fe fefd 	bl	800047c <__aeabi_i2d>
 8001682:	f04f 0200 	mov.w	r2, #0
 8001686:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <BMP180_GetTemp+0x138>)
 8001688:	f7ff f88c 	bl	80007a4 <__aeabi_ddiv>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4610      	mov	r0, r2
 8001692:	4619      	mov	r1, r3
 8001694:	f7ff fa54 	bl	8000b40 <__aeabi_d2f>
 8001698:	4603      	mov	r3, r0
 800169a:	ee07 3a90 	vmov	s15, r3
}
 800169e:	eeb0 0a67 	vmov.f32	s0, s15
 80016a2:	bdb0      	pop	{r4, r5, r7, pc}
 80016a4:	20000148 	.word	0x20000148
 80016a8:	2000013a 	.word	0x2000013a
 80016ac:	20000138 	.word	0x20000138
 80016b0:	40e00000 	.word	0x40e00000
 80016b4:	20000150 	.word	0x20000150
 80016b8:	20000142 	.word	0x20000142
 80016bc:	40a00000 	.word	0x40a00000
 80016c0:	20000144 	.word	0x20000144
 80016c4:	20000154 	.word	0x20000154
 80016c8:	20000160 	.word	0x20000160
 80016cc:	40300000 	.word	0x40300000
 80016d0:	20000174 	.word	0x20000174
 80016d4:	40240000 	.word	0x40240000

080016d8 <Get_UPress>:

// Get uncompensated Pressure
uint32_t Get_UPress (int oss)   // oversampling setting 0,1,2,3
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b088      	sub	sp, #32
 80016dc:	af04      	add	r7, sp, #16
 80016de:	6078      	str	r0, [r7, #4]
	uint8_t datatowrite = 0x34+(oss<<6);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	019b      	lsls	r3, r3, #6
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	3334      	adds	r3, #52	; 0x34
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	73fb      	strb	r3, [r7, #15]
	uint8_t Press_RAW[3] = {0};
 80016ee:	4b27      	ldr	r3, [pc, #156]	; (800178c <Get_UPress+0xb4>)
 80016f0:	881b      	ldrh	r3, [r3, #0]
 80016f2:	81bb      	strh	r3, [r7, #12]
 80016f4:	2300      	movs	r3, #0
 80016f6:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 80016f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016fc:	9302      	str	r3, [sp, #8]
 80016fe:	2301      	movs	r3, #1
 8001700:	9301      	str	r3, [sp, #4]
 8001702:	f107 030f 	add.w	r3, r7, #15
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	2301      	movs	r3, #1
 800170a:	22f4      	movs	r2, #244	; 0xf4
 800170c:	21ee      	movs	r1, #238	; 0xee
 800170e:	4820      	ldr	r0, [pc, #128]	; (8001790 <Get_UPress+0xb8>)
 8001710:	f000 ff3a 	bl	8002588 <HAL_I2C_Mem_Write>
	switch (oss)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2b03      	cmp	r3, #3
 8001718:	d81a      	bhi.n	8001750 <Get_UPress+0x78>
 800171a:	a201      	add	r2, pc, #4	; (adr r2, 8001720 <Get_UPress+0x48>)
 800171c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001720:	08001731 	.word	0x08001731
 8001724:	08001739 	.word	0x08001739
 8001728:	08001741 	.word	0x08001741
 800172c:	08001749 	.word	0x08001749
	{
		case (0):
			HAL_Delay (5);
 8001730:	2005      	movs	r0, #5
 8001732:	f000 fb23 	bl	8001d7c <HAL_Delay>
			break;
 8001736:	e00b      	b.n	8001750 <Get_UPress+0x78>
		case (1):
			HAL_Delay (8);
 8001738:	2008      	movs	r0, #8
 800173a:	f000 fb1f 	bl	8001d7c <HAL_Delay>
			break;
 800173e:	e007      	b.n	8001750 <Get_UPress+0x78>
		case (2):
			HAL_Delay (14);
 8001740:	200e      	movs	r0, #14
 8001742:	f000 fb1b 	bl	8001d7c <HAL_Delay>
			break;
 8001746:	e003      	b.n	8001750 <Get_UPress+0x78>
		case (3):
			HAL_Delay (26);
 8001748:	201a      	movs	r0, #26
 800174a:	f000 fb17 	bl	8001d7c <HAL_Delay>
			break;
 800174e:	bf00      	nop
	}
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Press_RAW, 3, 1000);
 8001750:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001754:	9302      	str	r3, [sp, #8]
 8001756:	2303      	movs	r3, #3
 8001758:	9301      	str	r3, [sp, #4]
 800175a:	f107 030c 	add.w	r3, r7, #12
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	2301      	movs	r3, #1
 8001762:	22f6      	movs	r2, #246	; 0xf6
 8001764:	21ee      	movs	r1, #238	; 0xee
 8001766:	480a      	ldr	r0, [pc, #40]	; (8001790 <Get_UPress+0xb8>)
 8001768:	f001 f808 	bl	800277c <HAL_I2C_Mem_Read>
	return (((Press_RAW[0]<<16)+(Press_RAW[1]<<8)+Press_RAW[2]) >> (8-oss));
 800176c:	7b3b      	ldrb	r3, [r7, #12]
 800176e:	041a      	lsls	r2, r3, #16
 8001770:	7b7b      	ldrb	r3, [r7, #13]
 8001772:	021b      	lsls	r3, r3, #8
 8001774:	4413      	add	r3, r2
 8001776:	7bba      	ldrb	r2, [r7, #14]
 8001778:	441a      	add	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f1c3 0308 	rsb	r3, r3, #8
 8001780:	fa42 f303 	asr.w	r3, r2, r3
}
 8001784:	4618      	mov	r0, r3
 8001786:	3710      	adds	r7, #16
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	08005020 	.word	0x08005020
 8001790:	2000008c 	.word	0x2000008c

08001794 <BMP180_GetPress>:


float BMP180_GetPress (int oss)
{
 8001794:	b5b0      	push	{r4, r5, r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	UP = Get_UPress(oss);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7ff ff9b 	bl	80016d8 <Get_UPress>
 80017a2:	4603      	mov	r3, r0
 80017a4:	461a      	mov	r2, r3
 80017a6:	4ba8      	ldr	r3, [pc, #672]	; (8001a48 <BMP180_GetPress+0x2b4>)
 80017a8:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 80017aa:	4ba8      	ldr	r3, [pc, #672]	; (8001a4c <BMP180_GetPress+0x2b8>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4aa8      	ldr	r2, [pc, #672]	; (8001a50 <BMP180_GetPress+0x2bc>)
 80017b0:	8812      	ldrh	r2, [r2, #0]
 80017b2:	1a9b      	subs	r3, r3, r2
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7fe fe61 	bl	800047c <__aeabi_i2d>
 80017ba:	4604      	mov	r4, r0
 80017bc:	460d      	mov	r5, r1
 80017be:	4ba5      	ldr	r3, [pc, #660]	; (8001a54 <BMP180_GetPress+0x2c0>)
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7fe fe5a 	bl	800047c <__aeabi_i2d>
 80017c8:	f04f 0200 	mov.w	r2, #0
 80017cc:	4ba2      	ldr	r3, [pc, #648]	; (8001a58 <BMP180_GetPress+0x2c4>)
 80017ce:	f7fe ffe9 	bl	80007a4 <__aeabi_ddiv>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	4620      	mov	r0, r4
 80017d8:	4629      	mov	r1, r5
 80017da:	f7fe feb9 	bl	8000550 <__aeabi_dmul>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	4610      	mov	r0, r2
 80017e4:	4619      	mov	r1, r3
 80017e6:	f7ff f963 	bl	8000ab0 <__aeabi_d2iz>
 80017ea:	4603      	mov	r3, r0
 80017ec:	4a9b      	ldr	r2, [pc, #620]	; (8001a5c <BMP180_GetPress+0x2c8>)
 80017ee:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 80017f0:	4b9b      	ldr	r3, [pc, #620]	; (8001a60 <BMP180_GetPress+0x2cc>)
 80017f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7fe fe40 	bl	800047c <__aeabi_i2d>
 80017fc:	f04f 0200 	mov.w	r2, #0
 8001800:	4b98      	ldr	r3, [pc, #608]	; (8001a64 <BMP180_GetPress+0x2d0>)
 8001802:	f7fe fea5 	bl	8000550 <__aeabi_dmul>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	4614      	mov	r4, r2
 800180c:	461d      	mov	r5, r3
 800180e:	4b96      	ldr	r3, [pc, #600]	; (8001a68 <BMP180_GetPress+0x2d4>)
 8001810:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001814:	461a      	mov	r2, r3
 8001816:	4b91      	ldr	r3, [pc, #580]	; (8001a5c <BMP180_GetPress+0x2c8>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4413      	add	r3, r2
 800181c:	4618      	mov	r0, r3
 800181e:	f7fe fe2d 	bl	800047c <__aeabi_i2d>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	4620      	mov	r0, r4
 8001828:	4629      	mov	r1, r5
 800182a:	f7fe ffbb 	bl	80007a4 <__aeabi_ddiv>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4610      	mov	r0, r2
 8001834:	4619      	mov	r1, r3
 8001836:	f7ff f93b 	bl	8000ab0 <__aeabi_d2iz>
 800183a:	4603      	mov	r3, r0
 800183c:	4a8b      	ldr	r2, [pc, #556]	; (8001a6c <BMP180_GetPress+0x2d8>)
 800183e:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 8001840:	4b86      	ldr	r3, [pc, #536]	; (8001a5c <BMP180_GetPress+0x2c8>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4b89      	ldr	r3, [pc, #548]	; (8001a6c <BMP180_GetPress+0x2d8>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4413      	add	r3, r2
 800184a:	4a89      	ldr	r2, [pc, #548]	; (8001a70 <BMP180_GetPress+0x2dc>)
 800184c:	6013      	str	r3, [r2, #0]
	B6 = B5-4000;
 800184e:	4b88      	ldr	r3, [pc, #544]	; (8001a70 <BMP180_GetPress+0x2dc>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001856:	4a87      	ldr	r2, [pc, #540]	; (8001a74 <BMP180_GetPress+0x2e0>)
 8001858:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(pow(2,12))))/(pow(2,11));
 800185a:	4b87      	ldr	r3, [pc, #540]	; (8001a78 <BMP180_GetPress+0x2e4>)
 800185c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001860:	4618      	mov	r0, r3
 8001862:	f7fe fe0b 	bl	800047c <__aeabi_i2d>
 8001866:	4604      	mov	r4, r0
 8001868:	460d      	mov	r5, r1
 800186a:	4b82      	ldr	r3, [pc, #520]	; (8001a74 <BMP180_GetPress+0x2e0>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a81      	ldr	r2, [pc, #516]	; (8001a74 <BMP180_GetPress+0x2e0>)
 8001870:	6812      	ldr	r2, [r2, #0]
 8001872:	fb02 f303 	mul.w	r3, r2, r3
 8001876:	4618      	mov	r0, r3
 8001878:	f7fe fe00 	bl	800047c <__aeabi_i2d>
 800187c:	f04f 0200 	mov.w	r2, #0
 8001880:	4b7e      	ldr	r3, [pc, #504]	; (8001a7c <BMP180_GetPress+0x2e8>)
 8001882:	f7fe ff8f 	bl	80007a4 <__aeabi_ddiv>
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	4620      	mov	r0, r4
 800188c:	4629      	mov	r1, r5
 800188e:	f7fe fe5f 	bl	8000550 <__aeabi_dmul>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4610      	mov	r0, r2
 8001898:	4619      	mov	r1, r3
 800189a:	f04f 0200 	mov.w	r2, #0
 800189e:	4b71      	ldr	r3, [pc, #452]	; (8001a64 <BMP180_GetPress+0x2d0>)
 80018a0:	f7fe ff80 	bl	80007a4 <__aeabi_ddiv>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4610      	mov	r0, r2
 80018aa:	4619      	mov	r1, r3
 80018ac:	f7ff f900 	bl	8000ab0 <__aeabi_d2iz>
 80018b0:	4603      	mov	r3, r0
 80018b2:	4a6a      	ldr	r2, [pc, #424]	; (8001a5c <BMP180_GetPress+0x2c8>)
 80018b4:	6013      	str	r3, [r2, #0]
	X2 = AC2*B6/(pow(2,11));
 80018b6:	4b72      	ldr	r3, [pc, #456]	; (8001a80 <BMP180_GetPress+0x2ec>)
 80018b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018bc:	461a      	mov	r2, r3
 80018be:	4b6d      	ldr	r3, [pc, #436]	; (8001a74 <BMP180_GetPress+0x2e0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	fb02 f303 	mul.w	r3, r2, r3
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe fdd8 	bl	800047c <__aeabi_i2d>
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	4b64      	ldr	r3, [pc, #400]	; (8001a64 <BMP180_GetPress+0x2d0>)
 80018d2:	f7fe ff67 	bl	80007a4 <__aeabi_ddiv>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	4610      	mov	r0, r2
 80018dc:	4619      	mov	r1, r3
 80018de:	f7ff f8e7 	bl	8000ab0 <__aeabi_d2iz>
 80018e2:	4603      	mov	r3, r0
 80018e4:	4a61      	ldr	r2, [pc, #388]	; (8001a6c <BMP180_GetPress+0x2d8>)
 80018e6:	6013      	str	r3, [r2, #0]
	X3 = X1+X2;
 80018e8:	4b5c      	ldr	r3, [pc, #368]	; (8001a5c <BMP180_GetPress+0x2c8>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	4b5f      	ldr	r3, [pc, #380]	; (8001a6c <BMP180_GetPress+0x2d8>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4413      	add	r3, r2
 80018f2:	4a64      	ldr	r2, [pc, #400]	; (8001a84 <BMP180_GetPress+0x2f0>)
 80018f4:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<oss)+2)/4;
 80018f6:	4b64      	ldr	r3, [pc, #400]	; (8001a88 <BMP180_GetPress+0x2f4>)
 80018f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018fc:	009a      	lsls	r2, r3, #2
 80018fe:	4b61      	ldr	r3, [pc, #388]	; (8001a84 <BMP180_GetPress+0x2f0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	441a      	add	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	3302      	adds	r3, #2
 800190c:	2b00      	cmp	r3, #0
 800190e:	da00      	bge.n	8001912 <BMP180_GetPress+0x17e>
 8001910:	3303      	adds	r3, #3
 8001912:	109b      	asrs	r3, r3, #2
 8001914:	461a      	mov	r2, r3
 8001916:	4b5d      	ldr	r3, [pc, #372]	; (8001a8c <BMP180_GetPress+0x2f8>)
 8001918:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/pow(2,13);
 800191a:	4b5d      	ldr	r3, [pc, #372]	; (8001a90 <BMP180_GetPress+0x2fc>)
 800191c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001920:	461a      	mov	r2, r3
 8001922:	4b54      	ldr	r3, [pc, #336]	; (8001a74 <BMP180_GetPress+0x2e0>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	fb02 f303 	mul.w	r3, r2, r3
 800192a:	4618      	mov	r0, r3
 800192c:	f7fe fda6 	bl	800047c <__aeabi_i2d>
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	4b57      	ldr	r3, [pc, #348]	; (8001a94 <BMP180_GetPress+0x300>)
 8001936:	f7fe ff35 	bl	80007a4 <__aeabi_ddiv>
 800193a:	4602      	mov	r2, r0
 800193c:	460b      	mov	r3, r1
 800193e:	4610      	mov	r0, r2
 8001940:	4619      	mov	r1, r3
 8001942:	f7ff f8b5 	bl	8000ab0 <__aeabi_d2iz>
 8001946:	4603      	mov	r3, r0
 8001948:	4a44      	ldr	r2, [pc, #272]	; (8001a5c <BMP180_GetPress+0x2c8>)
 800194a:	6013      	str	r3, [r2, #0]
	X2 = (B1 * (B6*B6/(pow(2,12))))/(pow(2,16));
 800194c:	4b52      	ldr	r3, [pc, #328]	; (8001a98 <BMP180_GetPress+0x304>)
 800194e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001952:	4618      	mov	r0, r3
 8001954:	f7fe fd92 	bl	800047c <__aeabi_i2d>
 8001958:	4604      	mov	r4, r0
 800195a:	460d      	mov	r5, r1
 800195c:	4b45      	ldr	r3, [pc, #276]	; (8001a74 <BMP180_GetPress+0x2e0>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a44      	ldr	r2, [pc, #272]	; (8001a74 <BMP180_GetPress+0x2e0>)
 8001962:	6812      	ldr	r2, [r2, #0]
 8001964:	fb02 f303 	mul.w	r3, r2, r3
 8001968:	4618      	mov	r0, r3
 800196a:	f7fe fd87 	bl	800047c <__aeabi_i2d>
 800196e:	f04f 0200 	mov.w	r2, #0
 8001972:	4b42      	ldr	r3, [pc, #264]	; (8001a7c <BMP180_GetPress+0x2e8>)
 8001974:	f7fe ff16 	bl	80007a4 <__aeabi_ddiv>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	4620      	mov	r0, r4
 800197e:	4629      	mov	r1, r5
 8001980:	f7fe fde6 	bl	8000550 <__aeabi_dmul>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4610      	mov	r0, r2
 800198a:	4619      	mov	r1, r3
 800198c:	f04f 0200 	mov.w	r2, #0
 8001990:	4b42      	ldr	r3, [pc, #264]	; (8001a9c <BMP180_GetPress+0x308>)
 8001992:	f7fe ff07 	bl	80007a4 <__aeabi_ddiv>
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	4610      	mov	r0, r2
 800199c:	4619      	mov	r1, r3
 800199e:	f7ff f887 	bl	8000ab0 <__aeabi_d2iz>
 80019a2:	4603      	mov	r3, r0
 80019a4:	4a31      	ldr	r2, [pc, #196]	; (8001a6c <BMP180_GetPress+0x2d8>)
 80019a6:	6013      	str	r3, [r2, #0]
	X3 = ((X1+X2)+2)/pow(2,2);
 80019a8:	4b2c      	ldr	r3, [pc, #176]	; (8001a5c <BMP180_GetPress+0x2c8>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	4b2f      	ldr	r3, [pc, #188]	; (8001a6c <BMP180_GetPress+0x2d8>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4413      	add	r3, r2
 80019b2:	3302      	adds	r3, #2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7fe fd61 	bl	800047c <__aeabi_i2d>
 80019ba:	f04f 0200 	mov.w	r2, #0
 80019be:	4b38      	ldr	r3, [pc, #224]	; (8001aa0 <BMP180_GetPress+0x30c>)
 80019c0:	f7fe fef0 	bl	80007a4 <__aeabi_ddiv>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	4610      	mov	r0, r2
 80019ca:	4619      	mov	r1, r3
 80019cc:	f7ff f870 	bl	8000ab0 <__aeabi_d2iz>
 80019d0:	4603      	mov	r3, r0
 80019d2:	4a2c      	ldr	r2, [pc, #176]	; (8001a84 <BMP180_GetPress+0x2f0>)
 80019d4:	6013      	str	r3, [r2, #0]
	B4 = AC4*(unsigned long)(X3+32768)/(pow(2,15));
 80019d6:	4b33      	ldr	r3, [pc, #204]	; (8001aa4 <BMP180_GetPress+0x310>)
 80019d8:	881b      	ldrh	r3, [r3, #0]
 80019da:	461a      	mov	r2, r3
 80019dc:	4b29      	ldr	r3, [pc, #164]	; (8001a84 <BMP180_GetPress+0x2f0>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80019e4:	fb02 f303 	mul.w	r3, r2, r3
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7fe fd37 	bl	800045c <__aeabi_ui2d>
 80019ee:	f04f 0200 	mov.w	r2, #0
 80019f2:	4b19      	ldr	r3, [pc, #100]	; (8001a58 <BMP180_GetPress+0x2c4>)
 80019f4:	f7fe fed6 	bl	80007a4 <__aeabi_ddiv>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4610      	mov	r0, r2
 80019fe:	4619      	mov	r1, r3
 8001a00:	f7ff f87e 	bl	8000b00 <__aeabi_d2uiz>
 8001a04:	4603      	mov	r3, r0
 8001a06:	4a28      	ldr	r2, [pc, #160]	; (8001aa8 <BMP180_GetPress+0x314>)
 8001a08:	6013      	str	r3, [r2, #0]
	B7 = ((unsigned long)UP-B3)*(50000>>oss);
 8001a0a:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <BMP180_GetPress+0x2b4>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	4b1e      	ldr	r3, [pc, #120]	; (8001a8c <BMP180_GetPress+0x2f8>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	f24c 3150 	movw	r1, #50000	; 0xc350
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	fa41 f202 	asr.w	r2, r1, r2
 8001a20:	fb02 f303 	mul.w	r3, r2, r3
 8001a24:	4a21      	ldr	r2, [pc, #132]	; (8001aac <BMP180_GetPress+0x318>)
 8001a26:	6013      	str	r3, [r2, #0]
	if (B7<0x80000000) Press = (B7*2)/B4;
 8001a28:	4b20      	ldr	r3, [pc, #128]	; (8001aac <BMP180_GetPress+0x318>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	db41      	blt.n	8001ab4 <BMP180_GetPress+0x320>
 8001a30:	4b1e      	ldr	r3, [pc, #120]	; (8001aac <BMP180_GetPress+0x318>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	005a      	lsls	r2, r3, #1
 8001a36:	4b1c      	ldr	r3, [pc, #112]	; (8001aa8 <BMP180_GetPress+0x314>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3e:	461a      	mov	r2, r3
 8001a40:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <BMP180_GetPress+0x31c>)
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	e040      	b.n	8001ac8 <BMP180_GetPress+0x334>
 8001a46:	bf00      	nop
 8001a48:	2000014c 	.word	0x2000014c
 8001a4c:	20000148 	.word	0x20000148
 8001a50:	2000013a 	.word	0x2000013a
 8001a54:	20000138 	.word	0x20000138
 8001a58:	40e00000 	.word	0x40e00000
 8001a5c:	20000150 	.word	0x20000150
 8001a60:	20000142 	.word	0x20000142
 8001a64:	40a00000 	.word	0x40a00000
 8001a68:	20000144 	.word	0x20000144
 8001a6c:	20000154 	.word	0x20000154
 8001a70:	20000160 	.word	0x20000160
 8001a74:	20000168 	.word	0x20000168
 8001a78:	2000013e 	.word	0x2000013e
 8001a7c:	40b00000 	.word	0x40b00000
 8001a80:	20000132 	.word	0x20000132
 8001a84:	20000158 	.word	0x20000158
 8001a88:	20000130 	.word	0x20000130
 8001a8c:	2000015c 	.word	0x2000015c
 8001a90:	20000134 	.word	0x20000134
 8001a94:	40c00000 	.word	0x40c00000
 8001a98:	2000013c 	.word	0x2000013c
 8001a9c:	40f00000 	.word	0x40f00000
 8001aa0:	40100000 	.word	0x40100000
 8001aa4:	20000136 	.word	0x20000136
 8001aa8:	20000164 	.word	0x20000164
 8001aac:	2000016c 	.word	0x2000016c
 8001ab0:	20000170 	.word	0x20000170
	else Press = (B7/B4)*2;
 8001ab4:	4b46      	ldr	r3, [pc, #280]	; (8001bd0 <BMP180_GetPress+0x43c>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	4b46      	ldr	r3, [pc, #280]	; (8001bd4 <BMP180_GetPress+0x440>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	4b44      	ldr	r3, [pc, #272]	; (8001bd8 <BMP180_GetPress+0x444>)
 8001ac6:	601a      	str	r2, [r3, #0]
	X1 = (Press/(pow(2,8)))*(Press/(pow(2,8)));
 8001ac8:	4b43      	ldr	r3, [pc, #268]	; (8001bd8 <BMP180_GetPress+0x444>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7fe fcd5 	bl	800047c <__aeabi_i2d>
 8001ad2:	f04f 0200 	mov.w	r2, #0
 8001ad6:	4b41      	ldr	r3, [pc, #260]	; (8001bdc <BMP180_GetPress+0x448>)
 8001ad8:	f7fe fe64 	bl	80007a4 <__aeabi_ddiv>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4614      	mov	r4, r2
 8001ae2:	461d      	mov	r5, r3
 8001ae4:	4b3c      	ldr	r3, [pc, #240]	; (8001bd8 <BMP180_GetPress+0x444>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7fe fcc7 	bl	800047c <__aeabi_i2d>
 8001aee:	f04f 0200 	mov.w	r2, #0
 8001af2:	4b3a      	ldr	r3, [pc, #232]	; (8001bdc <BMP180_GetPress+0x448>)
 8001af4:	f7fe fe56 	bl	80007a4 <__aeabi_ddiv>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	4620      	mov	r0, r4
 8001afe:	4629      	mov	r1, r5
 8001b00:	f7fe fd26 	bl	8000550 <__aeabi_dmul>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	4610      	mov	r0, r2
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	f7fe ffd0 	bl	8000ab0 <__aeabi_d2iz>
 8001b10:	4603      	mov	r3, r0
 8001b12:	4a33      	ldr	r2, [pc, #204]	; (8001be0 <BMP180_GetPress+0x44c>)
 8001b14:	6013      	str	r3, [r2, #0]
	X1 = (X1*3038)/(pow(2,16));
 8001b16:	4b32      	ldr	r3, [pc, #200]	; (8001be0 <BMP180_GetPress+0x44c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f640 32de 	movw	r2, #3038	; 0xbde
 8001b1e:	fb02 f303 	mul.w	r3, r2, r3
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7fe fcaa 	bl	800047c <__aeabi_i2d>
 8001b28:	f04f 0200 	mov.w	r2, #0
 8001b2c:	4b2d      	ldr	r3, [pc, #180]	; (8001be4 <BMP180_GetPress+0x450>)
 8001b2e:	f7fe fe39 	bl	80007a4 <__aeabi_ddiv>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4610      	mov	r0, r2
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f7fe ffb9 	bl	8000ab0 <__aeabi_d2iz>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	4a27      	ldr	r2, [pc, #156]	; (8001be0 <BMP180_GetPress+0x44c>)
 8001b42:	6013      	str	r3, [r2, #0]
	X2 = (-7357*Press)/(pow(2,16));
 8001b44:	4b24      	ldr	r3, [pc, #144]	; (8001bd8 <BMP180_GetPress+0x444>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a27      	ldr	r2, [pc, #156]	; (8001be8 <BMP180_GetPress+0x454>)
 8001b4a:	fb02 f303 	mul.w	r3, r2, r3
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fc94 	bl	800047c <__aeabi_i2d>
 8001b54:	f04f 0200 	mov.w	r2, #0
 8001b58:	4b22      	ldr	r3, [pc, #136]	; (8001be4 <BMP180_GetPress+0x450>)
 8001b5a:	f7fe fe23 	bl	80007a4 <__aeabi_ddiv>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	4610      	mov	r0, r2
 8001b64:	4619      	mov	r1, r3
 8001b66:	f7fe ffa3 	bl	8000ab0 <__aeabi_d2iz>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	4a1f      	ldr	r2, [pc, #124]	; (8001bec <BMP180_GetPress+0x458>)
 8001b6e:	6013      	str	r3, [r2, #0]
	Press = Press + (X1+X2+3791)/(pow(2,4));
 8001b70:	4b19      	ldr	r3, [pc, #100]	; (8001bd8 <BMP180_GetPress+0x444>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7fe fc81 	bl	800047c <__aeabi_i2d>
 8001b7a:	4604      	mov	r4, r0
 8001b7c:	460d      	mov	r5, r1
 8001b7e:	4b18      	ldr	r3, [pc, #96]	; (8001be0 <BMP180_GetPress+0x44c>)
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	4b1a      	ldr	r3, [pc, #104]	; (8001bec <BMP180_GetPress+0x458>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4413      	add	r3, r2
 8001b88:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7fe fc75 	bl	800047c <__aeabi_i2d>
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <BMP180_GetPress+0x45c>)
 8001b98:	f7fe fe04 	bl	80007a4 <__aeabi_ddiv>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	4620      	mov	r0, r4
 8001ba2:	4629      	mov	r1, r5
 8001ba4:	f7fe fb1e 	bl	80001e4 <__adddf3>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4610      	mov	r0, r2
 8001bae:	4619      	mov	r1, r3
 8001bb0:	f7fe ff7e 	bl	8000ab0 <__aeabi_d2iz>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	4a08      	ldr	r2, [pc, #32]	; (8001bd8 <BMP180_GetPress+0x444>)
 8001bb8:	6013      	str	r3, [r2, #0]

	return Press;
 8001bba:	4b07      	ldr	r3, [pc, #28]	; (8001bd8 <BMP180_GetPress+0x444>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	ee07 3a90 	vmov	s15, r3
 8001bc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001bc6:	eeb0 0a67 	vmov.f32	s0, s15
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bdb0      	pop	{r4, r5, r7, pc}
 8001bd0:	2000016c 	.word	0x2000016c
 8001bd4:	20000164 	.word	0x20000164
 8001bd8:	20000170 	.word	0x20000170
 8001bdc:	40700000 	.word	0x40700000
 8001be0:	20000150 	.word	0x20000150
 8001be4:	40f00000 	.word	0x40f00000
 8001be8:	ffffe343 	.word	0xffffe343
 8001bec:	20000154 	.word	0x20000154
 8001bf0:	40300000 	.word	0x40300000
 8001bf4:	00000000 	.word	0x00000000

08001bf8 <BMP180_GetAlt>:


float BMP180_GetAlt (int oss)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
	BMP180_GetPress (oss);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff fdc7 	bl	8001794 <BMP180_GetPress>
	return 44330*(1-(pow((Press/(float)atmPress), 0.19029495718)));
 8001c06:	4b1e      	ldr	r3, [pc, #120]	; (8001c80 <BMP180_GetAlt+0x88>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	ee07 3a90 	vmov	s15, r3
 8001c0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c12:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001c84 <BMP180_GetAlt+0x8c>
 8001c16:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001c1a:	ee16 0a90 	vmov	r0, s13
 8001c1e:	f7fe fc3f 	bl	80004a0 <__aeabi_f2d>
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
 8001c26:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8001c70 <BMP180_GetAlt+0x78>
 8001c2a:	ec43 2b10 	vmov	d0, r2, r3
 8001c2e:	f002 fab3 	bl	8004198 <pow>
 8001c32:	ec53 2b10 	vmov	r2, r3, d0
 8001c36:	f04f 0000 	mov.w	r0, #0
 8001c3a:	4913      	ldr	r1, [pc, #76]	; (8001c88 <BMP180_GetAlt+0x90>)
 8001c3c:	f7fe fad0 	bl	80001e0 <__aeabi_dsub>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4610      	mov	r0, r2
 8001c46:	4619      	mov	r1, r3
 8001c48:	a30b      	add	r3, pc, #44	; (adr r3, 8001c78 <BMP180_GetAlt+0x80>)
 8001c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4e:	f7fe fc7f 	bl	8000550 <__aeabi_dmul>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	4610      	mov	r0, r2
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f7fe ff71 	bl	8000b40 <__aeabi_d2f>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	ee07 3a90 	vmov	s15, r3
}
 8001c64:	eeb0 0a67 	vmov.f32	s0, s15
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	ccd745e4 	.word	0xccd745e4
 8001c74:	3fc85b95 	.word	0x3fc85b95
 8001c78:	00000000 	.word	0x00000000
 8001c7c:	40e5a540 	.word	0x40e5a540
 8001c80:	20000170 	.word	0x20000170
 8001c84:	47c5e680 	.word	0x47c5e680
 8001c88:	3ff00000 	.word	0x3ff00000

08001c8c <BMP180_Start>:

void BMP180_Start (void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
	read_calliberation_data();
 8001c90:	f7ff fbb4 	bl	80013fc <read_calliberation_data>
}
 8001c94:	bf00      	nop
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c9c:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <HAL_Init+0x40>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a0d      	ldr	r2, [pc, #52]	; (8001cd8 <HAL_Init+0x40>)
 8001ca2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ca6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <HAL_Init+0x40>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a0a      	ldr	r2, [pc, #40]	; (8001cd8 <HAL_Init+0x40>)
 8001cae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cb4:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <HAL_Init+0x40>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a07      	ldr	r2, [pc, #28]	; (8001cd8 <HAL_Init+0x40>)
 8001cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cc0:	2003      	movs	r0, #3
 8001cc2:	f000 f931 	bl	8001f28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	f000 f808 	bl	8001cdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ccc:	f7ff fa78 	bl	80011c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40023c00 	.word	0x40023c00

08001cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ce4:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <HAL_InitTick+0x54>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	4b12      	ldr	r3, [pc, #72]	; (8001d34 <HAL_InitTick+0x58>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	4619      	mov	r1, r3
 8001cee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f000 f93b 	bl	8001f76 <HAL_SYSTICK_Config>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e00e      	b.n	8001d28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b0f      	cmp	r3, #15
 8001d0e:	d80a      	bhi.n	8001d26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d10:	2200      	movs	r2, #0
 8001d12:	6879      	ldr	r1, [r7, #4]
 8001d14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d18:	f000 f911 	bl	8001f3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d1c:	4a06      	ldr	r2, [pc, #24]	; (8001d38 <HAL_InitTick+0x5c>)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
 8001d24:	e000      	b.n	8001d28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20000000 	.word	0x20000000
 8001d34:	20000008 	.word	0x20000008
 8001d38:	20000004 	.word	0x20000004

08001d3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d40:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <HAL_IncTick+0x20>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	461a      	mov	r2, r3
 8001d46:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <HAL_IncTick+0x24>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	4a04      	ldr	r2, [pc, #16]	; (8001d60 <HAL_IncTick+0x24>)
 8001d4e:	6013      	str	r3, [r2, #0]
}
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	20000008 	.word	0x20000008
 8001d60:	20000178 	.word	0x20000178

08001d64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  return uwTick;
 8001d68:	4b03      	ldr	r3, [pc, #12]	; (8001d78 <HAL_GetTick+0x14>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	20000178 	.word	0x20000178

08001d7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d84:	f7ff ffee 	bl	8001d64 <HAL_GetTick>
 8001d88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d94:	d005      	beq.n	8001da2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d96:	4b0a      	ldr	r3, [pc, #40]	; (8001dc0 <HAL_Delay+0x44>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4413      	add	r3, r2
 8001da0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001da2:	bf00      	nop
 8001da4:	f7ff ffde 	bl	8001d64 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d8f7      	bhi.n	8001da4 <HAL_Delay+0x28>
  {
  }
}
 8001db4:	bf00      	nop
 8001db6:	bf00      	nop
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000008 	.word	0x20000008

08001dc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dda:	68ba      	ldr	r2, [r7, #8]
 8001ddc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001de0:	4013      	ands	r3, r2
 8001de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001df6:	4a04      	ldr	r2, [pc, #16]	; (8001e08 <__NVIC_SetPriorityGrouping+0x44>)
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	60d3      	str	r3, [r2, #12]
}
 8001dfc:	bf00      	nop
 8001dfe:	3714      	adds	r7, #20
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	e000ed00 	.word	0xe000ed00

08001e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e10:	4b04      	ldr	r3, [pc, #16]	; (8001e24 <__NVIC_GetPriorityGrouping+0x18>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	0a1b      	lsrs	r3, r3, #8
 8001e16:	f003 0307 	and.w	r3, r3, #7
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	e000ed00 	.word	0xe000ed00

08001e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	6039      	str	r1, [r7, #0]
 8001e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	db0a      	blt.n	8001e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	490c      	ldr	r1, [pc, #48]	; (8001e74 <__NVIC_SetPriority+0x4c>)
 8001e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e46:	0112      	lsls	r2, r2, #4
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	440b      	add	r3, r1
 8001e4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e50:	e00a      	b.n	8001e68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	4908      	ldr	r1, [pc, #32]	; (8001e78 <__NVIC_SetPriority+0x50>)
 8001e58:	79fb      	ldrb	r3, [r7, #7]
 8001e5a:	f003 030f 	and.w	r3, r3, #15
 8001e5e:	3b04      	subs	r3, #4
 8001e60:	0112      	lsls	r2, r2, #4
 8001e62:	b2d2      	uxtb	r2, r2
 8001e64:	440b      	add	r3, r1
 8001e66:	761a      	strb	r2, [r3, #24]
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	e000e100 	.word	0xe000e100
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b089      	sub	sp, #36	; 0x24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	f1c3 0307 	rsb	r3, r3, #7
 8001e96:	2b04      	cmp	r3, #4
 8001e98:	bf28      	it	cs
 8001e9a:	2304      	movcs	r3, #4
 8001e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	3304      	adds	r3, #4
 8001ea2:	2b06      	cmp	r3, #6
 8001ea4:	d902      	bls.n	8001eac <NVIC_EncodePriority+0x30>
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	3b03      	subs	r3, #3
 8001eaa:	e000      	b.n	8001eae <NVIC_EncodePriority+0x32>
 8001eac:	2300      	movs	r3, #0
 8001eae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43da      	mvns	r2, r3
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	401a      	ands	r2, r3
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ec4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ece:	43d9      	mvns	r1, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed4:	4313      	orrs	r3, r2
         );
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3724      	adds	r7, #36	; 0x24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
	...

08001ee4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ef4:	d301      	bcc.n	8001efa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e00f      	b.n	8001f1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001efa:	4a0a      	ldr	r2, [pc, #40]	; (8001f24 <SysTick_Config+0x40>)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3b01      	subs	r3, #1
 8001f00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f02:	210f      	movs	r1, #15
 8001f04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f08:	f7ff ff8e 	bl	8001e28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f0c:	4b05      	ldr	r3, [pc, #20]	; (8001f24 <SysTick_Config+0x40>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f12:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <SysTick_Config+0x40>)
 8001f14:	2207      	movs	r2, #7
 8001f16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	e000e010 	.word	0xe000e010

08001f28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7ff ff47 	bl	8001dc4 <__NVIC_SetPriorityGrouping>
}
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b086      	sub	sp, #24
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	4603      	mov	r3, r0
 8001f46:	60b9      	str	r1, [r7, #8]
 8001f48:	607a      	str	r2, [r7, #4]
 8001f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f50:	f7ff ff5c 	bl	8001e0c <__NVIC_GetPriorityGrouping>
 8001f54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	68b9      	ldr	r1, [r7, #8]
 8001f5a:	6978      	ldr	r0, [r7, #20]
 8001f5c:	f7ff ff8e 	bl	8001e7c <NVIC_EncodePriority>
 8001f60:	4602      	mov	r2, r0
 8001f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f66:	4611      	mov	r1, r2
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff ff5d 	bl	8001e28 <__NVIC_SetPriority>
}
 8001f6e:	bf00      	nop
 8001f70:	3718      	adds	r7, #24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b082      	sub	sp, #8
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff ffb0 	bl	8001ee4 <SysTick_Config>
 8001f84:	4603      	mov	r3, r0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
	...

08001f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b089      	sub	sp, #36	; 0x24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61fb      	str	r3, [r7, #28]
 8001faa:	e159      	b.n	8002260 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fac:	2201      	movs	r2, #1
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	f040 8148 	bne.w	800225a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f003 0303 	and.w	r3, r3, #3
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d005      	beq.n	8001fe2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d130      	bne.n	8002044 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	2203      	movs	r2, #3
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	68da      	ldr	r2, [r3, #12]
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4313      	orrs	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002018:	2201      	movs	r2, #1
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	091b      	lsrs	r3, r3, #4
 800202e:	f003 0201 	and.w	r2, r3, #1
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f003 0303 	and.w	r3, r3, #3
 800204c:	2b03      	cmp	r3, #3
 800204e:	d017      	beq.n	8002080 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	2203      	movs	r2, #3
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 0303 	and.w	r3, r3, #3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d123      	bne.n	80020d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	08da      	lsrs	r2, r3, #3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3208      	adds	r2, #8
 8002094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002098:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	220f      	movs	r2, #15
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	691a      	ldr	r2, [r3, #16]
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	08da      	lsrs	r2, r3, #3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	3208      	adds	r2, #8
 80020ce:	69b9      	ldr	r1, [r7, #24]
 80020d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	2203      	movs	r2, #3
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 0203 	and.w	r2, r3, #3
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 80a2 	beq.w	800225a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	4b57      	ldr	r3, [pc, #348]	; (8002278 <HAL_GPIO_Init+0x2e8>)
 800211c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211e:	4a56      	ldr	r2, [pc, #344]	; (8002278 <HAL_GPIO_Init+0x2e8>)
 8002120:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002124:	6453      	str	r3, [r2, #68]	; 0x44
 8002126:	4b54      	ldr	r3, [pc, #336]	; (8002278 <HAL_GPIO_Init+0x2e8>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002132:	4a52      	ldr	r2, [pc, #328]	; (800227c <HAL_GPIO_Init+0x2ec>)
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	089b      	lsrs	r3, r3, #2
 8002138:	3302      	adds	r3, #2
 800213a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800213e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	f003 0303 	and.w	r3, r3, #3
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	220f      	movs	r2, #15
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4013      	ands	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a49      	ldr	r2, [pc, #292]	; (8002280 <HAL_GPIO_Init+0x2f0>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d019      	beq.n	8002192 <HAL_GPIO_Init+0x202>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a48      	ldr	r2, [pc, #288]	; (8002284 <HAL_GPIO_Init+0x2f4>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d013      	beq.n	800218e <HAL_GPIO_Init+0x1fe>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a47      	ldr	r2, [pc, #284]	; (8002288 <HAL_GPIO_Init+0x2f8>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d00d      	beq.n	800218a <HAL_GPIO_Init+0x1fa>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a46      	ldr	r2, [pc, #280]	; (800228c <HAL_GPIO_Init+0x2fc>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d007      	beq.n	8002186 <HAL_GPIO_Init+0x1f6>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a45      	ldr	r2, [pc, #276]	; (8002290 <HAL_GPIO_Init+0x300>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d101      	bne.n	8002182 <HAL_GPIO_Init+0x1f2>
 800217e:	2304      	movs	r3, #4
 8002180:	e008      	b.n	8002194 <HAL_GPIO_Init+0x204>
 8002182:	2307      	movs	r3, #7
 8002184:	e006      	b.n	8002194 <HAL_GPIO_Init+0x204>
 8002186:	2303      	movs	r3, #3
 8002188:	e004      	b.n	8002194 <HAL_GPIO_Init+0x204>
 800218a:	2302      	movs	r3, #2
 800218c:	e002      	b.n	8002194 <HAL_GPIO_Init+0x204>
 800218e:	2301      	movs	r3, #1
 8002190:	e000      	b.n	8002194 <HAL_GPIO_Init+0x204>
 8002192:	2300      	movs	r3, #0
 8002194:	69fa      	ldr	r2, [r7, #28]
 8002196:	f002 0203 	and.w	r2, r2, #3
 800219a:	0092      	lsls	r2, r2, #2
 800219c:	4093      	lsls	r3, r2
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021a4:	4935      	ldr	r1, [pc, #212]	; (800227c <HAL_GPIO_Init+0x2ec>)
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	089b      	lsrs	r3, r3, #2
 80021aa:	3302      	adds	r3, #2
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021b2:	4b38      	ldr	r3, [pc, #224]	; (8002294 <HAL_GPIO_Init+0x304>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	43db      	mvns	r3, r3
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4013      	ands	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021d6:	4a2f      	ldr	r2, [pc, #188]	; (8002294 <HAL_GPIO_Init+0x304>)
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021dc:	4b2d      	ldr	r3, [pc, #180]	; (8002294 <HAL_GPIO_Init+0x304>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	43db      	mvns	r3, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4013      	ands	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d003      	beq.n	8002200 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002200:	4a24      	ldr	r2, [pc, #144]	; (8002294 <HAL_GPIO_Init+0x304>)
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002206:	4b23      	ldr	r3, [pc, #140]	; (8002294 <HAL_GPIO_Init+0x304>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	43db      	mvns	r3, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	4013      	ands	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	4313      	orrs	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800222a:	4a1a      	ldr	r2, [pc, #104]	; (8002294 <HAL_GPIO_Init+0x304>)
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002230:	4b18      	ldr	r3, [pc, #96]	; (8002294 <HAL_GPIO_Init+0x304>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	43db      	mvns	r3, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4013      	ands	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d003      	beq.n	8002254 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	4313      	orrs	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002254:	4a0f      	ldr	r2, [pc, #60]	; (8002294 <HAL_GPIO_Init+0x304>)
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	3301      	adds	r3, #1
 800225e:	61fb      	str	r3, [r7, #28]
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	2b0f      	cmp	r3, #15
 8002264:	f67f aea2 	bls.w	8001fac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002268:	bf00      	nop
 800226a:	bf00      	nop
 800226c:	3724      	adds	r7, #36	; 0x24
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	40023800 	.word	0x40023800
 800227c:	40013800 	.word	0x40013800
 8002280:	40020000 	.word	0x40020000
 8002284:	40020400 	.word	0x40020400
 8002288:	40020800 	.word	0x40020800
 800228c:	40020c00 	.word	0x40020c00
 8002290:	40021000 	.word	0x40021000
 8002294:	40013c00 	.word	0x40013c00

08002298 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	460b      	mov	r3, r1
 80022a2:	807b      	strh	r3, [r7, #2]
 80022a4:	4613      	mov	r3, r2
 80022a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022a8:	787b      	ldrb	r3, [r7, #1]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022ae:	887a      	ldrh	r2, [r7, #2]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022b4:	e003      	b.n	80022be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022b6:	887b      	ldrh	r3, [r7, #2]
 80022b8:	041a      	lsls	r2, r3, #16
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	619a      	str	r2, [r3, #24]
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b085      	sub	sp, #20
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
 80022d2:	460b      	mov	r3, r1
 80022d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022dc:	887a      	ldrh	r2, [r7, #2]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	4013      	ands	r3, r2
 80022e2:	041a      	lsls	r2, r3, #16
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	43d9      	mvns	r1, r3
 80022e8:	887b      	ldrh	r3, [r7, #2]
 80022ea:	400b      	ands	r3, r1
 80022ec:	431a      	orrs	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	619a      	str	r2, [r3, #24]
}
 80022f2:	bf00      	nop
 80022f4:	3714      	adds	r7, #20
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
	...

08002300 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e12b      	b.n	800256a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d106      	bne.n	800232c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7fe ff72 	bl	8001210 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2224      	movs	r2, #36	; 0x24
 8002330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 0201 	bic.w	r2, r2, #1
 8002342:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002352:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002362:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002364:	f001 fbfc 	bl	8003b60 <HAL_RCC_GetPCLK1Freq>
 8002368:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	4a81      	ldr	r2, [pc, #516]	; (8002574 <HAL_I2C_Init+0x274>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d807      	bhi.n	8002384 <HAL_I2C_Init+0x84>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	4a80      	ldr	r2, [pc, #512]	; (8002578 <HAL_I2C_Init+0x278>)
 8002378:	4293      	cmp	r3, r2
 800237a:	bf94      	ite	ls
 800237c:	2301      	movls	r3, #1
 800237e:	2300      	movhi	r3, #0
 8002380:	b2db      	uxtb	r3, r3
 8002382:	e006      	b.n	8002392 <HAL_I2C_Init+0x92>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	4a7d      	ldr	r2, [pc, #500]	; (800257c <HAL_I2C_Init+0x27c>)
 8002388:	4293      	cmp	r3, r2
 800238a:	bf94      	ite	ls
 800238c:	2301      	movls	r3, #1
 800238e:	2300      	movhi	r3, #0
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e0e7      	b.n	800256a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	4a78      	ldr	r2, [pc, #480]	; (8002580 <HAL_I2C_Init+0x280>)
 800239e:	fba2 2303 	umull	r2, r3, r2, r3
 80023a2:	0c9b      	lsrs	r3, r3, #18
 80023a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68ba      	ldr	r2, [r7, #8]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	4a6a      	ldr	r2, [pc, #424]	; (8002574 <HAL_I2C_Init+0x274>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d802      	bhi.n	80023d4 <HAL_I2C_Init+0xd4>
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	3301      	adds	r3, #1
 80023d2:	e009      	b.n	80023e8 <HAL_I2C_Init+0xe8>
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80023da:	fb02 f303 	mul.w	r3, r2, r3
 80023de:	4a69      	ldr	r2, [pc, #420]	; (8002584 <HAL_I2C_Init+0x284>)
 80023e0:	fba2 2303 	umull	r2, r3, r2, r3
 80023e4:	099b      	lsrs	r3, r3, #6
 80023e6:	3301      	adds	r3, #1
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	6812      	ldr	r2, [r2, #0]
 80023ec:	430b      	orrs	r3, r1
 80023ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80023fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	495c      	ldr	r1, [pc, #368]	; (8002574 <HAL_I2C_Init+0x274>)
 8002404:	428b      	cmp	r3, r1
 8002406:	d819      	bhi.n	800243c <HAL_I2C_Init+0x13c>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	1e59      	subs	r1, r3, #1
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	fbb1 f3f3 	udiv	r3, r1, r3
 8002416:	1c59      	adds	r1, r3, #1
 8002418:	f640 73fc 	movw	r3, #4092	; 0xffc
 800241c:	400b      	ands	r3, r1
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00a      	beq.n	8002438 <HAL_I2C_Init+0x138>
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	1e59      	subs	r1, r3, #1
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002430:	3301      	adds	r3, #1
 8002432:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002436:	e051      	b.n	80024dc <HAL_I2C_Init+0x1dc>
 8002438:	2304      	movs	r3, #4
 800243a:	e04f      	b.n	80024dc <HAL_I2C_Init+0x1dc>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d111      	bne.n	8002468 <HAL_I2C_Init+0x168>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	1e58      	subs	r0, r3, #1
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6859      	ldr	r1, [r3, #4]
 800244c:	460b      	mov	r3, r1
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	440b      	add	r3, r1
 8002452:	fbb0 f3f3 	udiv	r3, r0, r3
 8002456:	3301      	adds	r3, #1
 8002458:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800245c:	2b00      	cmp	r3, #0
 800245e:	bf0c      	ite	eq
 8002460:	2301      	moveq	r3, #1
 8002462:	2300      	movne	r3, #0
 8002464:	b2db      	uxtb	r3, r3
 8002466:	e012      	b.n	800248e <HAL_I2C_Init+0x18e>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	1e58      	subs	r0, r3, #1
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6859      	ldr	r1, [r3, #4]
 8002470:	460b      	mov	r3, r1
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	440b      	add	r3, r1
 8002476:	0099      	lsls	r1, r3, #2
 8002478:	440b      	add	r3, r1
 800247a:	fbb0 f3f3 	udiv	r3, r0, r3
 800247e:	3301      	adds	r3, #1
 8002480:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002484:	2b00      	cmp	r3, #0
 8002486:	bf0c      	ite	eq
 8002488:	2301      	moveq	r3, #1
 800248a:	2300      	movne	r3, #0
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <HAL_I2C_Init+0x196>
 8002492:	2301      	movs	r3, #1
 8002494:	e022      	b.n	80024dc <HAL_I2C_Init+0x1dc>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10e      	bne.n	80024bc <HAL_I2C_Init+0x1bc>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	1e58      	subs	r0, r3, #1
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6859      	ldr	r1, [r3, #4]
 80024a6:	460b      	mov	r3, r1
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	440b      	add	r3, r1
 80024ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80024b0:	3301      	adds	r3, #1
 80024b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024ba:	e00f      	b.n	80024dc <HAL_I2C_Init+0x1dc>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	1e58      	subs	r0, r3, #1
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6859      	ldr	r1, [r3, #4]
 80024c4:	460b      	mov	r3, r1
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	440b      	add	r3, r1
 80024ca:	0099      	lsls	r1, r3, #2
 80024cc:	440b      	add	r3, r1
 80024ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80024d2:	3301      	adds	r3, #1
 80024d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024dc:	6879      	ldr	r1, [r7, #4]
 80024de:	6809      	ldr	r1, [r1, #0]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69da      	ldr	r2, [r3, #28]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800250a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	6911      	ldr	r1, [r2, #16]
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	68d2      	ldr	r2, [r2, #12]
 8002516:	4311      	orrs	r1, r2
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	6812      	ldr	r2, [r2, #0]
 800251c:	430b      	orrs	r3, r1
 800251e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	695a      	ldr	r2, [r3, #20]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	431a      	orrs	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	430a      	orrs	r2, r1
 800253a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f042 0201 	orr.w	r2, r2, #1
 800254a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2220      	movs	r2, #32
 8002556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	000186a0 	.word	0x000186a0
 8002578:	001e847f 	.word	0x001e847f
 800257c:	003d08ff 	.word	0x003d08ff
 8002580:	431bde83 	.word	0x431bde83
 8002584:	10624dd3 	.word	0x10624dd3

08002588 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b088      	sub	sp, #32
 800258c:	af02      	add	r7, sp, #8
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	4608      	mov	r0, r1
 8002592:	4611      	mov	r1, r2
 8002594:	461a      	mov	r2, r3
 8002596:	4603      	mov	r3, r0
 8002598:	817b      	strh	r3, [r7, #10]
 800259a:	460b      	mov	r3, r1
 800259c:	813b      	strh	r3, [r7, #8]
 800259e:	4613      	mov	r3, r2
 80025a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025a2:	f7ff fbdf 	bl	8001d64 <HAL_GetTick>
 80025a6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b20      	cmp	r3, #32
 80025b2:	f040 80d9 	bne.w	8002768 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	9300      	str	r3, [sp, #0]
 80025ba:	2319      	movs	r3, #25
 80025bc:	2201      	movs	r2, #1
 80025be:	496d      	ldr	r1, [pc, #436]	; (8002774 <HAL_I2C_Mem_Write+0x1ec>)
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	f000 fc7f 	bl	8002ec4 <I2C_WaitOnFlagUntilTimeout>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80025cc:	2302      	movs	r3, #2
 80025ce:	e0cc      	b.n	800276a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d101      	bne.n	80025de <HAL_I2C_Mem_Write+0x56>
 80025da:	2302      	movs	r3, #2
 80025dc:	e0c5      	b.n	800276a <HAL_I2C_Mem_Write+0x1e2>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d007      	beq.n	8002604 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f042 0201 	orr.w	r2, r2, #1
 8002602:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002612:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2221      	movs	r2, #33	; 0x21
 8002618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2240      	movs	r2, #64	; 0x40
 8002620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6a3a      	ldr	r2, [r7, #32]
 800262e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002634:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800263a:	b29a      	uxth	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4a4d      	ldr	r2, [pc, #308]	; (8002778 <HAL_I2C_Mem_Write+0x1f0>)
 8002644:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002646:	88f8      	ldrh	r0, [r7, #6]
 8002648:	893a      	ldrh	r2, [r7, #8]
 800264a:	8979      	ldrh	r1, [r7, #10]
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	9301      	str	r3, [sp, #4]
 8002650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	4603      	mov	r3, r0
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f000 fab6 	bl	8002bc8 <I2C_RequestMemoryWrite>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d052      	beq.n	8002708 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e081      	b.n	800276a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f000 fd00 	bl	8003070 <I2C_WaitOnTXEFlagUntilTimeout>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00d      	beq.n	8002692 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	2b04      	cmp	r3, #4
 800267c:	d107      	bne.n	800268e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800268c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e06b      	b.n	800276a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002696:	781a      	ldrb	r2, [r3, #0]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a2:	1c5a      	adds	r2, r3, #1
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ac:	3b01      	subs	r3, #1
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	3b01      	subs	r3, #1
 80026bc:	b29a      	uxth	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b04      	cmp	r3, #4
 80026ce:	d11b      	bne.n	8002708 <HAL_I2C_Mem_Write+0x180>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d017      	beq.n	8002708 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026dc:	781a      	ldrb	r2, [r3, #0]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e8:	1c5a      	adds	r2, r3, #1
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f2:	3b01      	subs	r3, #1
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026fe:	b29b      	uxth	r3, r3
 8002700:	3b01      	subs	r3, #1
 8002702:	b29a      	uxth	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1aa      	bne.n	8002666 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	f000 fcec 	bl	80030f2 <I2C_WaitOnBTFFlagUntilTimeout>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00d      	beq.n	800273c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002724:	2b04      	cmp	r3, #4
 8002726:	d107      	bne.n	8002738 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002736:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e016      	b.n	800276a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800274a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2220      	movs	r2, #32
 8002750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002764:	2300      	movs	r3, #0
 8002766:	e000      	b.n	800276a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002768:	2302      	movs	r3, #2
  }
}
 800276a:	4618      	mov	r0, r3
 800276c:	3718      	adds	r7, #24
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	00100002 	.word	0x00100002
 8002778:	ffff0000 	.word	0xffff0000

0800277c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b08c      	sub	sp, #48	; 0x30
 8002780:	af02      	add	r7, sp, #8
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	4608      	mov	r0, r1
 8002786:	4611      	mov	r1, r2
 8002788:	461a      	mov	r2, r3
 800278a:	4603      	mov	r3, r0
 800278c:	817b      	strh	r3, [r7, #10]
 800278e:	460b      	mov	r3, r1
 8002790:	813b      	strh	r3, [r7, #8]
 8002792:	4613      	mov	r3, r2
 8002794:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002796:	f7ff fae5 	bl	8001d64 <HAL_GetTick>
 800279a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b20      	cmp	r3, #32
 80027a6:	f040 8208 	bne.w	8002bba <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	9300      	str	r3, [sp, #0]
 80027ae:	2319      	movs	r3, #25
 80027b0:	2201      	movs	r2, #1
 80027b2:	497b      	ldr	r1, [pc, #492]	; (80029a0 <HAL_I2C_Mem_Read+0x224>)
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	f000 fb85 	bl	8002ec4 <I2C_WaitOnFlagUntilTimeout>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80027c0:	2302      	movs	r3, #2
 80027c2:	e1fb      	b.n	8002bbc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d101      	bne.n	80027d2 <HAL_I2C_Mem_Read+0x56>
 80027ce:	2302      	movs	r3, #2
 80027d0:	e1f4      	b.n	8002bbc <HAL_I2C_Mem_Read+0x440>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d007      	beq.n	80027f8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f042 0201 	orr.w	r2, r2, #1
 80027f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002806:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2222      	movs	r2, #34	; 0x22
 800280c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2240      	movs	r2, #64	; 0x40
 8002814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002822:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002828:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800282e:	b29a      	uxth	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	4a5b      	ldr	r2, [pc, #364]	; (80029a4 <HAL_I2C_Mem_Read+0x228>)
 8002838:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800283a:	88f8      	ldrh	r0, [r7, #6]
 800283c:	893a      	ldrh	r2, [r7, #8]
 800283e:	8979      	ldrh	r1, [r7, #10]
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	9301      	str	r3, [sp, #4]
 8002844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002846:	9300      	str	r3, [sp, #0]
 8002848:	4603      	mov	r3, r0
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f000 fa52 	bl	8002cf4 <I2C_RequestMemoryRead>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e1b0      	b.n	8002bbc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800285e:	2b00      	cmp	r3, #0
 8002860:	d113      	bne.n	800288a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002862:	2300      	movs	r3, #0
 8002864:	623b      	str	r3, [r7, #32]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	623b      	str	r3, [r7, #32]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	623b      	str	r3, [r7, #32]
 8002876:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	e184      	b.n	8002b94 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288e:	2b01      	cmp	r3, #1
 8002890:	d11b      	bne.n	80028ca <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028a2:	2300      	movs	r3, #0
 80028a4:	61fb      	str	r3, [r7, #28]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	61fb      	str	r3, [r7, #28]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	61fb      	str	r3, [r7, #28]
 80028b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	e164      	b.n	8002b94 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d11b      	bne.n	800290a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028e0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028f2:	2300      	movs	r3, #0
 80028f4:	61bb      	str	r3, [r7, #24]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	61bb      	str	r3, [r7, #24]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	61bb      	str	r3, [r7, #24]
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	e144      	b.n	8002b94 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800290a:	2300      	movs	r3, #0
 800290c:	617b      	str	r3, [r7, #20]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	617b      	str	r3, [r7, #20]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	617b      	str	r3, [r7, #20]
 800291e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002920:	e138      	b.n	8002b94 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002926:	2b03      	cmp	r3, #3
 8002928:	f200 80f1 	bhi.w	8002b0e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002930:	2b01      	cmp	r3, #1
 8002932:	d123      	bne.n	800297c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002936:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f000 fc1b 	bl	8003174 <I2C_WaitOnRXNEFlagUntilTimeout>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e139      	b.n	8002bbc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	691a      	ldr	r2, [r3, #16]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295a:	1c5a      	adds	r2, r3, #1
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002964:	3b01      	subs	r3, #1
 8002966:	b29a      	uxth	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002970:	b29b      	uxth	r3, r3
 8002972:	3b01      	subs	r3, #1
 8002974:	b29a      	uxth	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	855a      	strh	r2, [r3, #42]	; 0x2a
 800297a:	e10b      	b.n	8002b94 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002980:	2b02      	cmp	r3, #2
 8002982:	d14e      	bne.n	8002a22 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800298a:	2200      	movs	r2, #0
 800298c:	4906      	ldr	r1, [pc, #24]	; (80029a8 <HAL_I2C_Mem_Read+0x22c>)
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f000 fa98 	bl	8002ec4 <I2C_WaitOnFlagUntilTimeout>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d008      	beq.n	80029ac <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e10e      	b.n	8002bbc <HAL_I2C_Mem_Read+0x440>
 800299e:	bf00      	nop
 80029a0:	00100002 	.word	0x00100002
 80029a4:	ffff0000 	.word	0xffff0000
 80029a8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	691a      	ldr	r2, [r3, #16]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	b2d2      	uxtb	r2, r2
 80029c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	1c5a      	adds	r2, r3, #1
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d8:	3b01      	subs	r3, #1
 80029da:	b29a      	uxth	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	3b01      	subs	r3, #1
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	691a      	ldr	r2, [r3, #16]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	b2d2      	uxtb	r2, r2
 80029fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	1c5a      	adds	r2, r3, #1
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a20:	e0b8      	b.n	8002b94 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	9300      	str	r3, [sp, #0]
 8002a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a28:	2200      	movs	r2, #0
 8002a2a:	4966      	ldr	r1, [pc, #408]	; (8002bc4 <HAL_I2C_Mem_Read+0x448>)
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f000 fa49 	bl	8002ec4 <I2C_WaitOnFlagUntilTimeout>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e0bf      	b.n	8002bbc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	691a      	ldr	r2, [r3, #16]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a56:	b2d2      	uxtb	r2, r2
 8002a58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5e:	1c5a      	adds	r2, r3, #1
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	3b01      	subs	r3, #1
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a84:	2200      	movs	r2, #0
 8002a86:	494f      	ldr	r1, [pc, #316]	; (8002bc4 <HAL_I2C_Mem_Read+0x448>)
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f000 fa1b 	bl	8002ec4 <I2C_WaitOnFlagUntilTimeout>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e091      	b.n	8002bbc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aa6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	691a      	ldr	r2, [r3, #16]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	1c5a      	adds	r2, r3, #1
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	691a      	ldr	r2, [r3, #16]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae4:	b2d2      	uxtb	r2, r2
 8002ae6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	1c5a      	adds	r2, r3, #1
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af6:	3b01      	subs	r3, #1
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	3b01      	subs	r3, #1
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b0c:	e042      	b.n	8002b94 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f000 fb2e 	bl	8003174 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e04c      	b.n	8002bbc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	691a      	ldr	r2, [r3, #16]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b34:	1c5a      	adds	r2, r3, #1
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	f003 0304 	and.w	r3, r3, #4
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d118      	bne.n	8002b94 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	691a      	ldr	r2, [r3, #16]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6c:	b2d2      	uxtb	r2, r2
 8002b6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b74:	1c5a      	adds	r2, r3, #1
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f47f aec2 	bne.w	8002922 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2220      	movs	r2, #32
 8002ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	e000      	b.n	8002bbc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002bba:	2302      	movs	r3, #2
  }
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3728      	adds	r7, #40	; 0x28
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	00010004 	.word	0x00010004

08002bc8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b088      	sub	sp, #32
 8002bcc:	af02      	add	r7, sp, #8
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	4608      	mov	r0, r1
 8002bd2:	4611      	mov	r1, r2
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	817b      	strh	r3, [r7, #10]
 8002bda:	460b      	mov	r3, r1
 8002bdc:	813b      	strh	r3, [r7, #8]
 8002bde:	4613      	mov	r3, r2
 8002be0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bf0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf4:	9300      	str	r3, [sp, #0]
 8002bf6:	6a3b      	ldr	r3, [r7, #32]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bfe:	68f8      	ldr	r0, [r7, #12]
 8002c00:	f000 f960 	bl	8002ec4 <I2C_WaitOnFlagUntilTimeout>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00d      	beq.n	8002c26 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c18:	d103      	bne.n	8002c22 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c20:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e05f      	b.n	8002ce6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c26:	897b      	ldrh	r3, [r7, #10]
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c34:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c38:	6a3a      	ldr	r2, [r7, #32]
 8002c3a:	492d      	ldr	r1, [pc, #180]	; (8002cf0 <I2C_RequestMemoryWrite+0x128>)
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f000 f998 	bl	8002f72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e04c      	b.n	8002ce6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	617b      	str	r3, [r7, #20]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	617b      	str	r3, [r7, #20]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	617b      	str	r3, [r7, #20]
 8002c60:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c64:	6a39      	ldr	r1, [r7, #32]
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f000 fa02 	bl	8003070 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00d      	beq.n	8002c8e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	2b04      	cmp	r3, #4
 8002c78:	d107      	bne.n	8002c8a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c88:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e02b      	b.n	8002ce6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c8e:	88fb      	ldrh	r3, [r7, #6]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d105      	bne.n	8002ca0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c94:	893b      	ldrh	r3, [r7, #8]
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	611a      	str	r2, [r3, #16]
 8002c9e:	e021      	b.n	8002ce4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ca0:	893b      	ldrh	r3, [r7, #8]
 8002ca2:	0a1b      	lsrs	r3, r3, #8
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	b2da      	uxtb	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb0:	6a39      	ldr	r1, [r7, #32]
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f000 f9dc 	bl	8003070 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00d      	beq.n	8002cda <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	d107      	bne.n	8002cd6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cd4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e005      	b.n	8002ce6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cda:	893b      	ldrh	r3, [r7, #8]
 8002cdc:	b2da      	uxtb	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3718      	adds	r7, #24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	00010002 	.word	0x00010002

08002cf4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b088      	sub	sp, #32
 8002cf8:	af02      	add	r7, sp, #8
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	4608      	mov	r0, r1
 8002cfe:	4611      	mov	r1, r2
 8002d00:	461a      	mov	r2, r3
 8002d02:	4603      	mov	r3, r0
 8002d04:	817b      	strh	r3, [r7, #10]
 8002d06:	460b      	mov	r3, r1
 8002d08:	813b      	strh	r3, [r7, #8]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d1c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	6a3b      	ldr	r3, [r7, #32]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f000 f8c2 	bl	8002ec4 <I2C_WaitOnFlagUntilTimeout>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00d      	beq.n	8002d62 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d54:	d103      	bne.n	8002d5e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d5c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e0aa      	b.n	8002eb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d62:	897b      	ldrh	r3, [r7, #10]
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	461a      	mov	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d70:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d74:	6a3a      	ldr	r2, [r7, #32]
 8002d76:	4952      	ldr	r1, [pc, #328]	; (8002ec0 <I2C_RequestMemoryRead+0x1cc>)
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f000 f8fa 	bl	8002f72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e097      	b.n	8002eb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d88:	2300      	movs	r3, #0
 8002d8a:	617b      	str	r3, [r7, #20]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	617b      	str	r3, [r7, #20]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002da0:	6a39      	ldr	r1, [r7, #32]
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f000 f964 	bl	8003070 <I2C_WaitOnTXEFlagUntilTimeout>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00d      	beq.n	8002dca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d107      	bne.n	8002dc6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dc4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e076      	b.n	8002eb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002dca:	88fb      	ldrh	r3, [r7, #6]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d105      	bne.n	8002ddc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002dd0:	893b      	ldrh	r3, [r7, #8]
 8002dd2:	b2da      	uxtb	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	611a      	str	r2, [r3, #16]
 8002dda:	e021      	b.n	8002e20 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ddc:	893b      	ldrh	r3, [r7, #8]
 8002dde:	0a1b      	lsrs	r3, r3, #8
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	b2da      	uxtb	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dec:	6a39      	ldr	r1, [r7, #32]
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f000 f93e 	bl	8003070 <I2C_WaitOnTXEFlagUntilTimeout>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00d      	beq.n	8002e16 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	2b04      	cmp	r3, #4
 8002e00:	d107      	bne.n	8002e12 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e10:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e050      	b.n	8002eb8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e16:	893b      	ldrh	r3, [r7, #8]
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e22:	6a39      	ldr	r1, [r7, #32]
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f000 f923 	bl	8003070 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00d      	beq.n	8002e4c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e34:	2b04      	cmp	r3, #4
 8002e36:	d107      	bne.n	8002e48 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e46:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e035      	b.n	8002eb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e5a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	6a3b      	ldr	r3, [r7, #32]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f000 f82b 	bl	8002ec4 <I2C_WaitOnFlagUntilTimeout>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00d      	beq.n	8002e90 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e82:	d103      	bne.n	8002e8c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e013      	b.n	8002eb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002e90:	897b      	ldrh	r3, [r7, #10]
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	f043 0301 	orr.w	r3, r3, #1
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea2:	6a3a      	ldr	r2, [r7, #32]
 8002ea4:	4906      	ldr	r1, [pc, #24]	; (8002ec0 <I2C_RequestMemoryRead+0x1cc>)
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f000 f863 	bl	8002f72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3718      	adds	r7, #24
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	00010002 	.word	0x00010002

08002ec4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	603b      	str	r3, [r7, #0]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ed4:	e025      	b.n	8002f22 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002edc:	d021      	beq.n	8002f22 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ede:	f7fe ff41 	bl	8001d64 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d302      	bcc.n	8002ef4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d116      	bne.n	8002f22 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2220      	movs	r2, #32
 8002efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	f043 0220 	orr.w	r2, r3, #32
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e023      	b.n	8002f6a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	0c1b      	lsrs	r3, r3, #16
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d10d      	bne.n	8002f48 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	43da      	mvns	r2, r3
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	4013      	ands	r3, r2
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	bf0c      	ite	eq
 8002f3e:	2301      	moveq	r3, #1
 8002f40:	2300      	movne	r3, #0
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	461a      	mov	r2, r3
 8002f46:	e00c      	b.n	8002f62 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	43da      	mvns	r2, r3
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	4013      	ands	r3, r2
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	bf0c      	ite	eq
 8002f5a:	2301      	moveq	r3, #1
 8002f5c:	2300      	movne	r3, #0
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	461a      	mov	r2, r3
 8002f62:	79fb      	ldrb	r3, [r7, #7]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d0b6      	beq.n	8002ed6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b084      	sub	sp, #16
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	60f8      	str	r0, [r7, #12]
 8002f7a:	60b9      	str	r1, [r7, #8]
 8002f7c:	607a      	str	r2, [r7, #4]
 8002f7e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f80:	e051      	b.n	8003026 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f90:	d123      	bne.n	8002fda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fa0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002faa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2220      	movs	r2, #32
 8002fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	f043 0204 	orr.w	r2, r3, #4
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e046      	b.n	8003068 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fe0:	d021      	beq.n	8003026 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fe2:	f7fe febf 	bl	8001d64 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d302      	bcc.n	8002ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d116      	bne.n	8003026 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2220      	movs	r2, #32
 8003002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	f043 0220 	orr.w	r2, r3, #32
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e020      	b.n	8003068 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	0c1b      	lsrs	r3, r3, #16
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b01      	cmp	r3, #1
 800302e:	d10c      	bne.n	800304a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	43da      	mvns	r2, r3
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	4013      	ands	r3, r2
 800303c:	b29b      	uxth	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	bf14      	ite	ne
 8003042:	2301      	movne	r3, #1
 8003044:	2300      	moveq	r3, #0
 8003046:	b2db      	uxtb	r3, r3
 8003048:	e00b      	b.n	8003062 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	43da      	mvns	r2, r3
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	4013      	ands	r3, r2
 8003056:	b29b      	uxth	r3, r3
 8003058:	2b00      	cmp	r3, #0
 800305a:	bf14      	ite	ne
 800305c:	2301      	movne	r3, #1
 800305e:	2300      	moveq	r3, #0
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d18d      	bne.n	8002f82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	3710      	adds	r7, #16
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800307c:	e02d      	b.n	80030da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 f8ce 	bl	8003220 <I2C_IsAcknowledgeFailed>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e02d      	b.n	80030ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003094:	d021      	beq.n	80030da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003096:	f7fe fe65 	bl	8001d64 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	68ba      	ldr	r2, [r7, #8]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d302      	bcc.n	80030ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d116      	bne.n	80030da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2220      	movs	r2, #32
 80030b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	f043 0220 	orr.w	r2, r3, #32
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e007      	b.n	80030ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	695b      	ldr	r3, [r3, #20]
 80030e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e4:	2b80      	cmp	r3, #128	; 0x80
 80030e6:	d1ca      	bne.n	800307e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b084      	sub	sp, #16
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	60f8      	str	r0, [r7, #12]
 80030fa:	60b9      	str	r1, [r7, #8]
 80030fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030fe:	e02d      	b.n	800315c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 f88d 	bl	8003220 <I2C_IsAcknowledgeFailed>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e02d      	b.n	800316c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003116:	d021      	beq.n	800315c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003118:	f7fe fe24 	bl	8001d64 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	429a      	cmp	r2, r3
 8003126:	d302      	bcc.n	800312e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d116      	bne.n	800315c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2220      	movs	r2, #32
 8003138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003148:	f043 0220 	orr.w	r2, r3, #32
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e007      	b.n	800316c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	f003 0304 	and.w	r3, r3, #4
 8003166:	2b04      	cmp	r3, #4
 8003168:	d1ca      	bne.n	8003100 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003180:	e042      	b.n	8003208 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	f003 0310 	and.w	r3, r3, #16
 800318c:	2b10      	cmp	r3, #16
 800318e:	d119      	bne.n	80031c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f06f 0210 	mvn.w	r2, #16
 8003198:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2220      	movs	r2, #32
 80031a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e029      	b.n	8003218 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031c4:	f7fe fdce 	bl	8001d64 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d302      	bcc.n	80031da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d116      	bne.n	8003208 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2220      	movs	r2, #32
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f4:	f043 0220 	orr.w	r2, r3, #32
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e007      	b.n	8003218 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003212:	2b40      	cmp	r3, #64	; 0x40
 8003214:	d1b5      	bne.n	8003182 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003232:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003236:	d11b      	bne.n	8003270 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003240:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2220      	movs	r2, #32
 800324c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325c:	f043 0204 	orr.w	r2, r3, #4
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e000      	b.n	8003272 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
	...

08003280 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e267      	b.n	8003762 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b00      	cmp	r3, #0
 800329c:	d075      	beq.n	800338a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800329e:	4b88      	ldr	r3, [pc, #544]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f003 030c 	and.w	r3, r3, #12
 80032a6:	2b04      	cmp	r3, #4
 80032a8:	d00c      	beq.n	80032c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032aa:	4b85      	ldr	r3, [pc, #532]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032b2:	2b08      	cmp	r3, #8
 80032b4:	d112      	bne.n	80032dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032b6:	4b82      	ldr	r3, [pc, #520]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032c2:	d10b      	bne.n	80032dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c4:	4b7e      	ldr	r3, [pc, #504]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d05b      	beq.n	8003388 <HAL_RCC_OscConfig+0x108>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d157      	bne.n	8003388 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e242      	b.n	8003762 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e4:	d106      	bne.n	80032f4 <HAL_RCC_OscConfig+0x74>
 80032e6:	4b76      	ldr	r3, [pc, #472]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a75      	ldr	r2, [pc, #468]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 80032ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f0:	6013      	str	r3, [r2, #0]
 80032f2:	e01d      	b.n	8003330 <HAL_RCC_OscConfig+0xb0>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032fc:	d10c      	bne.n	8003318 <HAL_RCC_OscConfig+0x98>
 80032fe:	4b70      	ldr	r3, [pc, #448]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a6f      	ldr	r2, [pc, #444]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 8003304:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003308:	6013      	str	r3, [r2, #0]
 800330a:	4b6d      	ldr	r3, [pc, #436]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a6c      	ldr	r2, [pc, #432]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 8003310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003314:	6013      	str	r3, [r2, #0]
 8003316:	e00b      	b.n	8003330 <HAL_RCC_OscConfig+0xb0>
 8003318:	4b69      	ldr	r3, [pc, #420]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a68      	ldr	r2, [pc, #416]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 800331e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003322:	6013      	str	r3, [r2, #0]
 8003324:	4b66      	ldr	r3, [pc, #408]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a65      	ldr	r2, [pc, #404]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 800332a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800332e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d013      	beq.n	8003360 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003338:	f7fe fd14 	bl	8001d64 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003340:	f7fe fd10 	bl	8001d64 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b64      	cmp	r3, #100	; 0x64
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e207      	b.n	8003762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003352:	4b5b      	ldr	r3, [pc, #364]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0f0      	beq.n	8003340 <HAL_RCC_OscConfig+0xc0>
 800335e:	e014      	b.n	800338a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003360:	f7fe fd00 	bl	8001d64 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003368:	f7fe fcfc 	bl	8001d64 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b64      	cmp	r3, #100	; 0x64
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e1f3      	b.n	8003762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800337a:	4b51      	ldr	r3, [pc, #324]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1f0      	bne.n	8003368 <HAL_RCC_OscConfig+0xe8>
 8003386:	e000      	b.n	800338a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003388:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d063      	beq.n	800345e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003396:	4b4a      	ldr	r3, [pc, #296]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 030c 	and.w	r3, r3, #12
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00b      	beq.n	80033ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033a2:	4b47      	ldr	r3, [pc, #284]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033aa:	2b08      	cmp	r3, #8
 80033ac:	d11c      	bne.n	80033e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ae:	4b44      	ldr	r3, [pc, #272]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d116      	bne.n	80033e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ba:	4b41      	ldr	r3, [pc, #260]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d005      	beq.n	80033d2 <HAL_RCC_OscConfig+0x152>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d001      	beq.n	80033d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e1c7      	b.n	8003762 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d2:	4b3b      	ldr	r3, [pc, #236]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	4937      	ldr	r1, [pc, #220]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033e6:	e03a      	b.n	800345e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d020      	beq.n	8003432 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033f0:	4b34      	ldr	r3, [pc, #208]	; (80034c4 <HAL_RCC_OscConfig+0x244>)
 80033f2:	2201      	movs	r2, #1
 80033f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f6:	f7fe fcb5 	bl	8001d64 <HAL_GetTick>
 80033fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033fc:	e008      	b.n	8003410 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033fe:	f7fe fcb1 	bl	8001d64 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d901      	bls.n	8003410 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e1a8      	b.n	8003762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003410:	4b2b      	ldr	r3, [pc, #172]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d0f0      	beq.n	80033fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800341c:	4b28      	ldr	r3, [pc, #160]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	4925      	ldr	r1, [pc, #148]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 800342c:	4313      	orrs	r3, r2
 800342e:	600b      	str	r3, [r1, #0]
 8003430:	e015      	b.n	800345e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003432:	4b24      	ldr	r3, [pc, #144]	; (80034c4 <HAL_RCC_OscConfig+0x244>)
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003438:	f7fe fc94 	bl	8001d64 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003440:	f7fe fc90 	bl	8001d64 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e187      	b.n	8003762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003452:	4b1b      	ldr	r3, [pc, #108]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1f0      	bne.n	8003440 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0308 	and.w	r3, r3, #8
 8003466:	2b00      	cmp	r3, #0
 8003468:	d036      	beq.n	80034d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d016      	beq.n	80034a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003472:	4b15      	ldr	r3, [pc, #84]	; (80034c8 <HAL_RCC_OscConfig+0x248>)
 8003474:	2201      	movs	r2, #1
 8003476:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003478:	f7fe fc74 	bl	8001d64 <HAL_GetTick>
 800347c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800347e:	e008      	b.n	8003492 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003480:	f7fe fc70 	bl	8001d64 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e167      	b.n	8003762 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003492:	4b0b      	ldr	r3, [pc, #44]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 8003494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d0f0      	beq.n	8003480 <HAL_RCC_OscConfig+0x200>
 800349e:	e01b      	b.n	80034d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034a0:	4b09      	ldr	r3, [pc, #36]	; (80034c8 <HAL_RCC_OscConfig+0x248>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034a6:	f7fe fc5d 	bl	8001d64 <HAL_GetTick>
 80034aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034ac:	e00e      	b.n	80034cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034ae:	f7fe fc59 	bl	8001d64 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d907      	bls.n	80034cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e150      	b.n	8003762 <HAL_RCC_OscConfig+0x4e2>
 80034c0:	40023800 	.word	0x40023800
 80034c4:	42470000 	.word	0x42470000
 80034c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034cc:	4b88      	ldr	r3, [pc, #544]	; (80036f0 <HAL_RCC_OscConfig+0x470>)
 80034ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1ea      	bne.n	80034ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 8097 	beq.w	8003614 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034e6:	2300      	movs	r3, #0
 80034e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034ea:	4b81      	ldr	r3, [pc, #516]	; (80036f0 <HAL_RCC_OscConfig+0x470>)
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10f      	bne.n	8003516 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034f6:	2300      	movs	r3, #0
 80034f8:	60bb      	str	r3, [r7, #8]
 80034fa:	4b7d      	ldr	r3, [pc, #500]	; (80036f0 <HAL_RCC_OscConfig+0x470>)
 80034fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fe:	4a7c      	ldr	r2, [pc, #496]	; (80036f0 <HAL_RCC_OscConfig+0x470>)
 8003500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003504:	6413      	str	r3, [r2, #64]	; 0x40
 8003506:	4b7a      	ldr	r3, [pc, #488]	; (80036f0 <HAL_RCC_OscConfig+0x470>)
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800350e:	60bb      	str	r3, [r7, #8]
 8003510:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003512:	2301      	movs	r3, #1
 8003514:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003516:	4b77      	ldr	r3, [pc, #476]	; (80036f4 <HAL_RCC_OscConfig+0x474>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351e:	2b00      	cmp	r3, #0
 8003520:	d118      	bne.n	8003554 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003522:	4b74      	ldr	r3, [pc, #464]	; (80036f4 <HAL_RCC_OscConfig+0x474>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a73      	ldr	r2, [pc, #460]	; (80036f4 <HAL_RCC_OscConfig+0x474>)
 8003528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800352c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800352e:	f7fe fc19 	bl	8001d64 <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003534:	e008      	b.n	8003548 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003536:	f7fe fc15 	bl	8001d64 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e10c      	b.n	8003762 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003548:	4b6a      	ldr	r3, [pc, #424]	; (80036f4 <HAL_RCC_OscConfig+0x474>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003550:	2b00      	cmp	r3, #0
 8003552:	d0f0      	beq.n	8003536 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d106      	bne.n	800356a <HAL_RCC_OscConfig+0x2ea>
 800355c:	4b64      	ldr	r3, [pc, #400]	; (80036f0 <HAL_RCC_OscConfig+0x470>)
 800355e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003560:	4a63      	ldr	r2, [pc, #396]	; (80036f0 <HAL_RCC_OscConfig+0x470>)
 8003562:	f043 0301 	orr.w	r3, r3, #1
 8003566:	6713      	str	r3, [r2, #112]	; 0x70
 8003568:	e01c      	b.n	80035a4 <HAL_RCC_OscConfig+0x324>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	2b05      	cmp	r3, #5
 8003570:	d10c      	bne.n	800358c <HAL_RCC_OscConfig+0x30c>
 8003572:	4b5f      	ldr	r3, [pc, #380]	; (80036f0 <HAL_RCC_OscConfig+0x470>)
 8003574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003576:	4a5e      	ldr	r2, [pc, #376]	; (80036f0 <HAL_RCC_OscConfig+0x470>)
 8003578:	f043 0304 	orr.w	r3, r3, #4
 800357c:	6713      	str	r3, [r2, #112]	; 0x70
 800357e:	4b5c      	ldr	r3, [pc, #368]	; (80036f0 <HAL_RCC_OscConfig+0x470>)
 8003580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003582:	4a5b      	ldr	r2, [pc, #364]	; (80036f0 <HAL_RCC_OscConfig+0x470>)
 8003584:	f043 0301 	orr.w	r3, r3, #1
 8003588:	6713      	str	r3, [r2, #112]	; 0x70
 800358a:	e00b      	b.n	80035a4 <HAL_RCC_OscConfig+0x324>
 800358c:	4b58      	ldr	r3, [pc, #352]	; (80036f0 <HAL_RCC_OscConfig+0x470>)
 800358e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003590:	4a57      	ldr	r2, [pc, #348]	; (80036f0 <HAL_RCC_OscConfig+0x470>)
 8003592:	f023 0301 	bic.w	r3, r3, #1
 8003596:	6713      	str	r3, [r2, #112]	; 0x70
 8003598:	4b55      	ldr	r3, [pc, #340]	; (80036f0 <HAL_RCC_OscConfig+0x470>)
 800359a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359c:	4a54      	ldr	r2, [pc, #336]	; (80036f0 <HAL_RCC_OscConfig+0x470>)
 800359e:	f023 0304 	bic.w	r3, r3, #4
 80035a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d015      	beq.n	80035d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ac:	f7fe fbda 	bl	8001d64 <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035b2:	e00a      	b.n	80035ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035b4:	f7fe fbd6 	bl	8001d64 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e0cb      	b.n	8003762 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ca:	4b49      	ldr	r3, [pc, #292]	; (80036f0 <HAL_RCC_OscConfig+0x470>)
 80035cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d0ee      	beq.n	80035b4 <HAL_RCC_OscConfig+0x334>
 80035d6:	e014      	b.n	8003602 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035d8:	f7fe fbc4 	bl	8001d64 <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035de:	e00a      	b.n	80035f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035e0:	f7fe fbc0 	bl	8001d64 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e0b5      	b.n	8003762 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035f6:	4b3e      	ldr	r3, [pc, #248]	; (80036f0 <HAL_RCC_OscConfig+0x470>)
 80035f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1ee      	bne.n	80035e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003602:	7dfb      	ldrb	r3, [r7, #23]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d105      	bne.n	8003614 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003608:	4b39      	ldr	r3, [pc, #228]	; (80036f0 <HAL_RCC_OscConfig+0x470>)
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	4a38      	ldr	r2, [pc, #224]	; (80036f0 <HAL_RCC_OscConfig+0x470>)
 800360e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003612:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 80a1 	beq.w	8003760 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800361e:	4b34      	ldr	r3, [pc, #208]	; (80036f0 <HAL_RCC_OscConfig+0x470>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 030c 	and.w	r3, r3, #12
 8003626:	2b08      	cmp	r3, #8
 8003628:	d05c      	beq.n	80036e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	2b02      	cmp	r3, #2
 8003630:	d141      	bne.n	80036b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003632:	4b31      	ldr	r3, [pc, #196]	; (80036f8 <HAL_RCC_OscConfig+0x478>)
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003638:	f7fe fb94 	bl	8001d64 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003640:	f7fe fb90 	bl	8001d64 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e087      	b.n	8003762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003652:	4b27      	ldr	r3, [pc, #156]	; (80036f0 <HAL_RCC_OscConfig+0x470>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1f0      	bne.n	8003640 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	69da      	ldr	r2, [r3, #28]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	431a      	orrs	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366c:	019b      	lsls	r3, r3, #6
 800366e:	431a      	orrs	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003674:	085b      	lsrs	r3, r3, #1
 8003676:	3b01      	subs	r3, #1
 8003678:	041b      	lsls	r3, r3, #16
 800367a:	431a      	orrs	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003680:	061b      	lsls	r3, r3, #24
 8003682:	491b      	ldr	r1, [pc, #108]	; (80036f0 <HAL_RCC_OscConfig+0x470>)
 8003684:	4313      	orrs	r3, r2
 8003686:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003688:	4b1b      	ldr	r3, [pc, #108]	; (80036f8 <HAL_RCC_OscConfig+0x478>)
 800368a:	2201      	movs	r2, #1
 800368c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800368e:	f7fe fb69 	bl	8001d64 <HAL_GetTick>
 8003692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003694:	e008      	b.n	80036a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003696:	f7fe fb65 	bl	8001d64 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d901      	bls.n	80036a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e05c      	b.n	8003762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036a8:	4b11      	ldr	r3, [pc, #68]	; (80036f0 <HAL_RCC_OscConfig+0x470>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d0f0      	beq.n	8003696 <HAL_RCC_OscConfig+0x416>
 80036b4:	e054      	b.n	8003760 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036b6:	4b10      	ldr	r3, [pc, #64]	; (80036f8 <HAL_RCC_OscConfig+0x478>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036bc:	f7fe fb52 	bl	8001d64 <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036c4:	f7fe fb4e 	bl	8001d64 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e045      	b.n	8003762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036d6:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <HAL_RCC_OscConfig+0x470>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1f0      	bne.n	80036c4 <HAL_RCC_OscConfig+0x444>
 80036e2:	e03d      	b.n	8003760 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d107      	bne.n	80036fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e038      	b.n	8003762 <HAL_RCC_OscConfig+0x4e2>
 80036f0:	40023800 	.word	0x40023800
 80036f4:	40007000 	.word	0x40007000
 80036f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036fc:	4b1b      	ldr	r3, [pc, #108]	; (800376c <HAL_RCC_OscConfig+0x4ec>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d028      	beq.n	800375c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003714:	429a      	cmp	r2, r3
 8003716:	d121      	bne.n	800375c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003722:	429a      	cmp	r2, r3
 8003724:	d11a      	bne.n	800375c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800372c:	4013      	ands	r3, r2
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003732:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003734:	4293      	cmp	r3, r2
 8003736:	d111      	bne.n	800375c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003742:	085b      	lsrs	r3, r3, #1
 8003744:	3b01      	subs	r3, #1
 8003746:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003748:	429a      	cmp	r2, r3
 800374a:	d107      	bne.n	800375c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003756:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003758:	429a      	cmp	r2, r3
 800375a:	d001      	beq.n	8003760 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e000      	b.n	8003762 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3718      	adds	r7, #24
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	40023800 	.word	0x40023800

08003770 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e0cc      	b.n	800391e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003784:	4b68      	ldr	r3, [pc, #416]	; (8003928 <HAL_RCC_ClockConfig+0x1b8>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0307 	and.w	r3, r3, #7
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	429a      	cmp	r2, r3
 8003790:	d90c      	bls.n	80037ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003792:	4b65      	ldr	r3, [pc, #404]	; (8003928 <HAL_RCC_ClockConfig+0x1b8>)
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	b2d2      	uxtb	r2, r2
 8003798:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800379a:	4b63      	ldr	r3, [pc, #396]	; (8003928 <HAL_RCC_ClockConfig+0x1b8>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0307 	and.w	r3, r3, #7
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d001      	beq.n	80037ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e0b8      	b.n	800391e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d020      	beq.n	80037fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0304 	and.w	r3, r3, #4
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d005      	beq.n	80037d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037c4:	4b59      	ldr	r3, [pc, #356]	; (800392c <HAL_RCC_ClockConfig+0x1bc>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	4a58      	ldr	r2, [pc, #352]	; (800392c <HAL_RCC_ClockConfig+0x1bc>)
 80037ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0308 	and.w	r3, r3, #8
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d005      	beq.n	80037e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037dc:	4b53      	ldr	r3, [pc, #332]	; (800392c <HAL_RCC_ClockConfig+0x1bc>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	4a52      	ldr	r2, [pc, #328]	; (800392c <HAL_RCC_ClockConfig+0x1bc>)
 80037e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037e8:	4b50      	ldr	r3, [pc, #320]	; (800392c <HAL_RCC_ClockConfig+0x1bc>)
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	494d      	ldr	r1, [pc, #308]	; (800392c <HAL_RCC_ClockConfig+0x1bc>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b00      	cmp	r3, #0
 8003804:	d044      	beq.n	8003890 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d107      	bne.n	800381e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800380e:	4b47      	ldr	r3, [pc, #284]	; (800392c <HAL_RCC_ClockConfig+0x1bc>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d119      	bne.n	800384e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e07f      	b.n	800391e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	2b02      	cmp	r3, #2
 8003824:	d003      	beq.n	800382e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800382a:	2b03      	cmp	r3, #3
 800382c:	d107      	bne.n	800383e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800382e:	4b3f      	ldr	r3, [pc, #252]	; (800392c <HAL_RCC_ClockConfig+0x1bc>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d109      	bne.n	800384e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e06f      	b.n	800391e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800383e:	4b3b      	ldr	r3, [pc, #236]	; (800392c <HAL_RCC_ClockConfig+0x1bc>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e067      	b.n	800391e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800384e:	4b37      	ldr	r3, [pc, #220]	; (800392c <HAL_RCC_ClockConfig+0x1bc>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f023 0203 	bic.w	r2, r3, #3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	4934      	ldr	r1, [pc, #208]	; (800392c <HAL_RCC_ClockConfig+0x1bc>)
 800385c:	4313      	orrs	r3, r2
 800385e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003860:	f7fe fa80 	bl	8001d64 <HAL_GetTick>
 8003864:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003866:	e00a      	b.n	800387e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003868:	f7fe fa7c 	bl	8001d64 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	f241 3288 	movw	r2, #5000	; 0x1388
 8003876:	4293      	cmp	r3, r2
 8003878:	d901      	bls.n	800387e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e04f      	b.n	800391e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800387e:	4b2b      	ldr	r3, [pc, #172]	; (800392c <HAL_RCC_ClockConfig+0x1bc>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f003 020c 	and.w	r2, r3, #12
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	429a      	cmp	r2, r3
 800388e:	d1eb      	bne.n	8003868 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003890:	4b25      	ldr	r3, [pc, #148]	; (8003928 <HAL_RCC_ClockConfig+0x1b8>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0307 	and.w	r3, r3, #7
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	429a      	cmp	r2, r3
 800389c:	d20c      	bcs.n	80038b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800389e:	4b22      	ldr	r3, [pc, #136]	; (8003928 <HAL_RCC_ClockConfig+0x1b8>)
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	b2d2      	uxtb	r2, r2
 80038a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038a6:	4b20      	ldr	r3, [pc, #128]	; (8003928 <HAL_RCC_ClockConfig+0x1b8>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0307 	and.w	r3, r3, #7
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d001      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e032      	b.n	800391e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d008      	beq.n	80038d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038c4:	4b19      	ldr	r3, [pc, #100]	; (800392c <HAL_RCC_ClockConfig+0x1bc>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	4916      	ldr	r1, [pc, #88]	; (800392c <HAL_RCC_ClockConfig+0x1bc>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0308 	and.w	r3, r3, #8
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d009      	beq.n	80038f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038e2:	4b12      	ldr	r3, [pc, #72]	; (800392c <HAL_RCC_ClockConfig+0x1bc>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	490e      	ldr	r1, [pc, #56]	; (800392c <HAL_RCC_ClockConfig+0x1bc>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038f6:	f000 f821 	bl	800393c <HAL_RCC_GetSysClockFreq>
 80038fa:	4602      	mov	r2, r0
 80038fc:	4b0b      	ldr	r3, [pc, #44]	; (800392c <HAL_RCC_ClockConfig+0x1bc>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	091b      	lsrs	r3, r3, #4
 8003902:	f003 030f 	and.w	r3, r3, #15
 8003906:	490a      	ldr	r1, [pc, #40]	; (8003930 <HAL_RCC_ClockConfig+0x1c0>)
 8003908:	5ccb      	ldrb	r3, [r1, r3]
 800390a:	fa22 f303 	lsr.w	r3, r2, r3
 800390e:	4a09      	ldr	r2, [pc, #36]	; (8003934 <HAL_RCC_ClockConfig+0x1c4>)
 8003910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003912:	4b09      	ldr	r3, [pc, #36]	; (8003938 <HAL_RCC_ClockConfig+0x1c8>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4618      	mov	r0, r3
 8003918:	f7fe f9e0 	bl	8001cdc <HAL_InitTick>

  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	40023c00 	.word	0x40023c00
 800392c:	40023800 	.word	0x40023800
 8003930:	08005024 	.word	0x08005024
 8003934:	20000000 	.word	0x20000000
 8003938:	20000004 	.word	0x20000004

0800393c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800393c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003940:	b094      	sub	sp, #80	; 0x50
 8003942:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003944:	2300      	movs	r3, #0
 8003946:	647b      	str	r3, [r7, #68]	; 0x44
 8003948:	2300      	movs	r3, #0
 800394a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800394c:	2300      	movs	r3, #0
 800394e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003950:	2300      	movs	r3, #0
 8003952:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003954:	4b79      	ldr	r3, [pc, #484]	; (8003b3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f003 030c 	and.w	r3, r3, #12
 800395c:	2b08      	cmp	r3, #8
 800395e:	d00d      	beq.n	800397c <HAL_RCC_GetSysClockFreq+0x40>
 8003960:	2b08      	cmp	r3, #8
 8003962:	f200 80e1 	bhi.w	8003b28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003966:	2b00      	cmp	r3, #0
 8003968:	d002      	beq.n	8003970 <HAL_RCC_GetSysClockFreq+0x34>
 800396a:	2b04      	cmp	r3, #4
 800396c:	d003      	beq.n	8003976 <HAL_RCC_GetSysClockFreq+0x3a>
 800396e:	e0db      	b.n	8003b28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003970:	4b73      	ldr	r3, [pc, #460]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x204>)
 8003972:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003974:	e0db      	b.n	8003b2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003976:	4b73      	ldr	r3, [pc, #460]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x208>)
 8003978:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800397a:	e0d8      	b.n	8003b2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800397c:	4b6f      	ldr	r3, [pc, #444]	; (8003b3c <HAL_RCC_GetSysClockFreq+0x200>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003984:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003986:	4b6d      	ldr	r3, [pc, #436]	; (8003b3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d063      	beq.n	8003a5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003992:	4b6a      	ldr	r3, [pc, #424]	; (8003b3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	099b      	lsrs	r3, r3, #6
 8003998:	2200      	movs	r2, #0
 800399a:	63bb      	str	r3, [r7, #56]	; 0x38
 800399c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800399e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039a4:	633b      	str	r3, [r7, #48]	; 0x30
 80039a6:	2300      	movs	r3, #0
 80039a8:	637b      	str	r3, [r7, #52]	; 0x34
 80039aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80039ae:	4622      	mov	r2, r4
 80039b0:	462b      	mov	r3, r5
 80039b2:	f04f 0000 	mov.w	r0, #0
 80039b6:	f04f 0100 	mov.w	r1, #0
 80039ba:	0159      	lsls	r1, r3, #5
 80039bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039c0:	0150      	lsls	r0, r2, #5
 80039c2:	4602      	mov	r2, r0
 80039c4:	460b      	mov	r3, r1
 80039c6:	4621      	mov	r1, r4
 80039c8:	1a51      	subs	r1, r2, r1
 80039ca:	6139      	str	r1, [r7, #16]
 80039cc:	4629      	mov	r1, r5
 80039ce:	eb63 0301 	sbc.w	r3, r3, r1
 80039d2:	617b      	str	r3, [r7, #20]
 80039d4:	f04f 0200 	mov.w	r2, #0
 80039d8:	f04f 0300 	mov.w	r3, #0
 80039dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039e0:	4659      	mov	r1, fp
 80039e2:	018b      	lsls	r3, r1, #6
 80039e4:	4651      	mov	r1, sl
 80039e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039ea:	4651      	mov	r1, sl
 80039ec:	018a      	lsls	r2, r1, #6
 80039ee:	4651      	mov	r1, sl
 80039f0:	ebb2 0801 	subs.w	r8, r2, r1
 80039f4:	4659      	mov	r1, fp
 80039f6:	eb63 0901 	sbc.w	r9, r3, r1
 80039fa:	f04f 0200 	mov.w	r2, #0
 80039fe:	f04f 0300 	mov.w	r3, #0
 8003a02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a0e:	4690      	mov	r8, r2
 8003a10:	4699      	mov	r9, r3
 8003a12:	4623      	mov	r3, r4
 8003a14:	eb18 0303 	adds.w	r3, r8, r3
 8003a18:	60bb      	str	r3, [r7, #8]
 8003a1a:	462b      	mov	r3, r5
 8003a1c:	eb49 0303 	adc.w	r3, r9, r3
 8003a20:	60fb      	str	r3, [r7, #12]
 8003a22:	f04f 0200 	mov.w	r2, #0
 8003a26:	f04f 0300 	mov.w	r3, #0
 8003a2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a2e:	4629      	mov	r1, r5
 8003a30:	024b      	lsls	r3, r1, #9
 8003a32:	4621      	mov	r1, r4
 8003a34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a38:	4621      	mov	r1, r4
 8003a3a:	024a      	lsls	r2, r1, #9
 8003a3c:	4610      	mov	r0, r2
 8003a3e:	4619      	mov	r1, r3
 8003a40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a42:	2200      	movs	r2, #0
 8003a44:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a4c:	f7fd f8c8 	bl	8000be0 <__aeabi_uldivmod>
 8003a50:	4602      	mov	r2, r0
 8003a52:	460b      	mov	r3, r1
 8003a54:	4613      	mov	r3, r2
 8003a56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a58:	e058      	b.n	8003b0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a5a:	4b38      	ldr	r3, [pc, #224]	; (8003b3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	099b      	lsrs	r3, r3, #6
 8003a60:	2200      	movs	r2, #0
 8003a62:	4618      	mov	r0, r3
 8003a64:	4611      	mov	r1, r2
 8003a66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a6a:	623b      	str	r3, [r7, #32]
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a74:	4642      	mov	r2, r8
 8003a76:	464b      	mov	r3, r9
 8003a78:	f04f 0000 	mov.w	r0, #0
 8003a7c:	f04f 0100 	mov.w	r1, #0
 8003a80:	0159      	lsls	r1, r3, #5
 8003a82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a86:	0150      	lsls	r0, r2, #5
 8003a88:	4602      	mov	r2, r0
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	4641      	mov	r1, r8
 8003a8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a92:	4649      	mov	r1, r9
 8003a94:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a98:	f04f 0200 	mov.w	r2, #0
 8003a9c:	f04f 0300 	mov.w	r3, #0
 8003aa0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003aa4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003aa8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003aac:	ebb2 040a 	subs.w	r4, r2, sl
 8003ab0:	eb63 050b 	sbc.w	r5, r3, fp
 8003ab4:	f04f 0200 	mov.w	r2, #0
 8003ab8:	f04f 0300 	mov.w	r3, #0
 8003abc:	00eb      	lsls	r3, r5, #3
 8003abe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ac2:	00e2      	lsls	r2, r4, #3
 8003ac4:	4614      	mov	r4, r2
 8003ac6:	461d      	mov	r5, r3
 8003ac8:	4643      	mov	r3, r8
 8003aca:	18e3      	adds	r3, r4, r3
 8003acc:	603b      	str	r3, [r7, #0]
 8003ace:	464b      	mov	r3, r9
 8003ad0:	eb45 0303 	adc.w	r3, r5, r3
 8003ad4:	607b      	str	r3, [r7, #4]
 8003ad6:	f04f 0200 	mov.w	r2, #0
 8003ada:	f04f 0300 	mov.w	r3, #0
 8003ade:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ae2:	4629      	mov	r1, r5
 8003ae4:	028b      	lsls	r3, r1, #10
 8003ae6:	4621      	mov	r1, r4
 8003ae8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003aec:	4621      	mov	r1, r4
 8003aee:	028a      	lsls	r2, r1, #10
 8003af0:	4610      	mov	r0, r2
 8003af2:	4619      	mov	r1, r3
 8003af4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003af6:	2200      	movs	r2, #0
 8003af8:	61bb      	str	r3, [r7, #24]
 8003afa:	61fa      	str	r2, [r7, #28]
 8003afc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b00:	f7fd f86e 	bl	8000be0 <__aeabi_uldivmod>
 8003b04:	4602      	mov	r2, r0
 8003b06:	460b      	mov	r3, r1
 8003b08:	4613      	mov	r3, r2
 8003b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b0c:	4b0b      	ldr	r3, [pc, #44]	; (8003b3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	0c1b      	lsrs	r3, r3, #16
 8003b12:	f003 0303 	and.w	r3, r3, #3
 8003b16:	3301      	adds	r3, #1
 8003b18:	005b      	lsls	r3, r3, #1
 8003b1a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003b1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b26:	e002      	b.n	8003b2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b28:	4b05      	ldr	r3, [pc, #20]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b2a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3750      	adds	r7, #80	; 0x50
 8003b34:	46bd      	mov	sp, r7
 8003b36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b3a:	bf00      	nop
 8003b3c:	40023800 	.word	0x40023800
 8003b40:	00f42400 	.word	0x00f42400
 8003b44:	007a1200 	.word	0x007a1200

08003b48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b4c:	4b03      	ldr	r3, [pc, #12]	; (8003b5c <HAL_RCC_GetHCLKFreq+0x14>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	20000000 	.word	0x20000000

08003b60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b64:	f7ff fff0 	bl	8003b48 <HAL_RCC_GetHCLKFreq>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	4b05      	ldr	r3, [pc, #20]	; (8003b80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	0a9b      	lsrs	r3, r3, #10
 8003b70:	f003 0307 	and.w	r3, r3, #7
 8003b74:	4903      	ldr	r1, [pc, #12]	; (8003b84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b76:	5ccb      	ldrb	r3, [r1, r3]
 8003b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	40023800 	.word	0x40023800
 8003b84:	08005034 	.word	0x08005034

08003b88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b8c:	f7ff ffdc 	bl	8003b48 <HAL_RCC_GetHCLKFreq>
 8003b90:	4602      	mov	r2, r0
 8003b92:	4b05      	ldr	r3, [pc, #20]	; (8003ba8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	0b5b      	lsrs	r3, r3, #13
 8003b98:	f003 0307 	and.w	r3, r3, #7
 8003b9c:	4903      	ldr	r1, [pc, #12]	; (8003bac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b9e:	5ccb      	ldrb	r3, [r1, r3]
 8003ba0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	40023800 	.word	0x40023800
 8003bac:	08005034 	.word	0x08005034

08003bb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e03f      	b.n	8003c42 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d106      	bne.n	8003bdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f7fd fb62 	bl	80012a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2224      	movs	r2, #36	; 0x24
 8003be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68da      	ldr	r2, [r3, #12]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bf2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 f829 	bl	8003c4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	691a      	ldr	r2, [r3, #16]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	695a      	ldr	r2, [r3, #20]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68da      	ldr	r2, [r3, #12]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2220      	movs	r2, #32
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
	...

08003c4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c50:	b0c0      	sub	sp, #256	; 0x100
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c68:	68d9      	ldr	r1, [r3, #12]
 8003c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	ea40 0301 	orr.w	r3, r0, r1
 8003c74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	431a      	orrs	r2, r3
 8003c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ca4:	f021 010c 	bic.w	r1, r1, #12
 8003ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003cb2:	430b      	orrs	r3, r1
 8003cb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc6:	6999      	ldr	r1, [r3, #24]
 8003cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	ea40 0301 	orr.w	r3, r0, r1
 8003cd2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	4b8f      	ldr	r3, [pc, #572]	; (8003f18 <UART_SetConfig+0x2cc>)
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d005      	beq.n	8003cec <UART_SetConfig+0xa0>
 8003ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	4b8d      	ldr	r3, [pc, #564]	; (8003f1c <UART_SetConfig+0x2d0>)
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d104      	bne.n	8003cf6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003cec:	f7ff ff4c 	bl	8003b88 <HAL_RCC_GetPCLK2Freq>
 8003cf0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003cf4:	e003      	b.n	8003cfe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cf6:	f7ff ff33 	bl	8003b60 <HAL_RCC_GetPCLK1Freq>
 8003cfa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d02:	69db      	ldr	r3, [r3, #28]
 8003d04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d08:	f040 810c 	bne.w	8003f24 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d10:	2200      	movs	r2, #0
 8003d12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003d16:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003d1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003d1e:	4622      	mov	r2, r4
 8003d20:	462b      	mov	r3, r5
 8003d22:	1891      	adds	r1, r2, r2
 8003d24:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d26:	415b      	adcs	r3, r3
 8003d28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d2e:	4621      	mov	r1, r4
 8003d30:	eb12 0801 	adds.w	r8, r2, r1
 8003d34:	4629      	mov	r1, r5
 8003d36:	eb43 0901 	adc.w	r9, r3, r1
 8003d3a:	f04f 0200 	mov.w	r2, #0
 8003d3e:	f04f 0300 	mov.w	r3, #0
 8003d42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d4e:	4690      	mov	r8, r2
 8003d50:	4699      	mov	r9, r3
 8003d52:	4623      	mov	r3, r4
 8003d54:	eb18 0303 	adds.w	r3, r8, r3
 8003d58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003d5c:	462b      	mov	r3, r5
 8003d5e:	eb49 0303 	adc.w	r3, r9, r3
 8003d62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003d72:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003d76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	18db      	adds	r3, r3, r3
 8003d7e:	653b      	str	r3, [r7, #80]	; 0x50
 8003d80:	4613      	mov	r3, r2
 8003d82:	eb42 0303 	adc.w	r3, r2, r3
 8003d86:	657b      	str	r3, [r7, #84]	; 0x54
 8003d88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003d8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003d90:	f7fc ff26 	bl	8000be0 <__aeabi_uldivmod>
 8003d94:	4602      	mov	r2, r0
 8003d96:	460b      	mov	r3, r1
 8003d98:	4b61      	ldr	r3, [pc, #388]	; (8003f20 <UART_SetConfig+0x2d4>)
 8003d9a:	fba3 2302 	umull	r2, r3, r3, r2
 8003d9e:	095b      	lsrs	r3, r3, #5
 8003da0:	011c      	lsls	r4, r3, #4
 8003da2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003da6:	2200      	movs	r2, #0
 8003da8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003dac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003db0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003db4:	4642      	mov	r2, r8
 8003db6:	464b      	mov	r3, r9
 8003db8:	1891      	adds	r1, r2, r2
 8003dba:	64b9      	str	r1, [r7, #72]	; 0x48
 8003dbc:	415b      	adcs	r3, r3
 8003dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dc0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003dc4:	4641      	mov	r1, r8
 8003dc6:	eb12 0a01 	adds.w	sl, r2, r1
 8003dca:	4649      	mov	r1, r9
 8003dcc:	eb43 0b01 	adc.w	fp, r3, r1
 8003dd0:	f04f 0200 	mov.w	r2, #0
 8003dd4:	f04f 0300 	mov.w	r3, #0
 8003dd8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ddc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003de0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003de4:	4692      	mov	sl, r2
 8003de6:	469b      	mov	fp, r3
 8003de8:	4643      	mov	r3, r8
 8003dea:	eb1a 0303 	adds.w	r3, sl, r3
 8003dee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003df2:	464b      	mov	r3, r9
 8003df4:	eb4b 0303 	adc.w	r3, fp, r3
 8003df8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e08:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003e0c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003e10:	460b      	mov	r3, r1
 8003e12:	18db      	adds	r3, r3, r3
 8003e14:	643b      	str	r3, [r7, #64]	; 0x40
 8003e16:	4613      	mov	r3, r2
 8003e18:	eb42 0303 	adc.w	r3, r2, r3
 8003e1c:	647b      	str	r3, [r7, #68]	; 0x44
 8003e1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003e26:	f7fc fedb 	bl	8000be0 <__aeabi_uldivmod>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	4611      	mov	r1, r2
 8003e30:	4b3b      	ldr	r3, [pc, #236]	; (8003f20 <UART_SetConfig+0x2d4>)
 8003e32:	fba3 2301 	umull	r2, r3, r3, r1
 8003e36:	095b      	lsrs	r3, r3, #5
 8003e38:	2264      	movs	r2, #100	; 0x64
 8003e3a:	fb02 f303 	mul.w	r3, r2, r3
 8003e3e:	1acb      	subs	r3, r1, r3
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003e46:	4b36      	ldr	r3, [pc, #216]	; (8003f20 <UART_SetConfig+0x2d4>)
 8003e48:	fba3 2302 	umull	r2, r3, r3, r2
 8003e4c:	095b      	lsrs	r3, r3, #5
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e54:	441c      	add	r4, r3
 8003e56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e60:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003e64:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003e68:	4642      	mov	r2, r8
 8003e6a:	464b      	mov	r3, r9
 8003e6c:	1891      	adds	r1, r2, r2
 8003e6e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e70:	415b      	adcs	r3, r3
 8003e72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e78:	4641      	mov	r1, r8
 8003e7a:	1851      	adds	r1, r2, r1
 8003e7c:	6339      	str	r1, [r7, #48]	; 0x30
 8003e7e:	4649      	mov	r1, r9
 8003e80:	414b      	adcs	r3, r1
 8003e82:	637b      	str	r3, [r7, #52]	; 0x34
 8003e84:	f04f 0200 	mov.w	r2, #0
 8003e88:	f04f 0300 	mov.w	r3, #0
 8003e8c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003e90:	4659      	mov	r1, fp
 8003e92:	00cb      	lsls	r3, r1, #3
 8003e94:	4651      	mov	r1, sl
 8003e96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e9a:	4651      	mov	r1, sl
 8003e9c:	00ca      	lsls	r2, r1, #3
 8003e9e:	4610      	mov	r0, r2
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	4642      	mov	r2, r8
 8003ea6:	189b      	adds	r3, r3, r2
 8003ea8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003eac:	464b      	mov	r3, r9
 8003eae:	460a      	mov	r2, r1
 8003eb0:	eb42 0303 	adc.w	r3, r2, r3
 8003eb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003ec4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003ec8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ecc:	460b      	mov	r3, r1
 8003ece:	18db      	adds	r3, r3, r3
 8003ed0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	eb42 0303 	adc.w	r3, r2, r3
 8003ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003eda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ede:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003ee2:	f7fc fe7d 	bl	8000be0 <__aeabi_uldivmod>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	460b      	mov	r3, r1
 8003eea:	4b0d      	ldr	r3, [pc, #52]	; (8003f20 <UART_SetConfig+0x2d4>)
 8003eec:	fba3 1302 	umull	r1, r3, r3, r2
 8003ef0:	095b      	lsrs	r3, r3, #5
 8003ef2:	2164      	movs	r1, #100	; 0x64
 8003ef4:	fb01 f303 	mul.w	r3, r1, r3
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	3332      	adds	r3, #50	; 0x32
 8003efe:	4a08      	ldr	r2, [pc, #32]	; (8003f20 <UART_SetConfig+0x2d4>)
 8003f00:	fba2 2303 	umull	r2, r3, r2, r3
 8003f04:	095b      	lsrs	r3, r3, #5
 8003f06:	f003 0207 	and.w	r2, r3, #7
 8003f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4422      	add	r2, r4
 8003f12:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f14:	e106      	b.n	8004124 <UART_SetConfig+0x4d8>
 8003f16:	bf00      	nop
 8003f18:	40011000 	.word	0x40011000
 8003f1c:	40011400 	.word	0x40011400
 8003f20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003f2e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003f32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003f36:	4642      	mov	r2, r8
 8003f38:	464b      	mov	r3, r9
 8003f3a:	1891      	adds	r1, r2, r2
 8003f3c:	6239      	str	r1, [r7, #32]
 8003f3e:	415b      	adcs	r3, r3
 8003f40:	627b      	str	r3, [r7, #36]	; 0x24
 8003f42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f46:	4641      	mov	r1, r8
 8003f48:	1854      	adds	r4, r2, r1
 8003f4a:	4649      	mov	r1, r9
 8003f4c:	eb43 0501 	adc.w	r5, r3, r1
 8003f50:	f04f 0200 	mov.w	r2, #0
 8003f54:	f04f 0300 	mov.w	r3, #0
 8003f58:	00eb      	lsls	r3, r5, #3
 8003f5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f5e:	00e2      	lsls	r2, r4, #3
 8003f60:	4614      	mov	r4, r2
 8003f62:	461d      	mov	r5, r3
 8003f64:	4643      	mov	r3, r8
 8003f66:	18e3      	adds	r3, r4, r3
 8003f68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003f6c:	464b      	mov	r3, r9
 8003f6e:	eb45 0303 	adc.w	r3, r5, r3
 8003f72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003f82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f86:	f04f 0200 	mov.w	r2, #0
 8003f8a:	f04f 0300 	mov.w	r3, #0
 8003f8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003f92:	4629      	mov	r1, r5
 8003f94:	008b      	lsls	r3, r1, #2
 8003f96:	4621      	mov	r1, r4
 8003f98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f9c:	4621      	mov	r1, r4
 8003f9e:	008a      	lsls	r2, r1, #2
 8003fa0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003fa4:	f7fc fe1c 	bl	8000be0 <__aeabi_uldivmod>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	460b      	mov	r3, r1
 8003fac:	4b60      	ldr	r3, [pc, #384]	; (8004130 <UART_SetConfig+0x4e4>)
 8003fae:	fba3 2302 	umull	r2, r3, r3, r2
 8003fb2:	095b      	lsrs	r3, r3, #5
 8003fb4:	011c      	lsls	r4, r3, #4
 8003fb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003fc0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003fc4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003fc8:	4642      	mov	r2, r8
 8003fca:	464b      	mov	r3, r9
 8003fcc:	1891      	adds	r1, r2, r2
 8003fce:	61b9      	str	r1, [r7, #24]
 8003fd0:	415b      	adcs	r3, r3
 8003fd2:	61fb      	str	r3, [r7, #28]
 8003fd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fd8:	4641      	mov	r1, r8
 8003fda:	1851      	adds	r1, r2, r1
 8003fdc:	6139      	str	r1, [r7, #16]
 8003fde:	4649      	mov	r1, r9
 8003fe0:	414b      	adcs	r3, r1
 8003fe2:	617b      	str	r3, [r7, #20]
 8003fe4:	f04f 0200 	mov.w	r2, #0
 8003fe8:	f04f 0300 	mov.w	r3, #0
 8003fec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ff0:	4659      	mov	r1, fp
 8003ff2:	00cb      	lsls	r3, r1, #3
 8003ff4:	4651      	mov	r1, sl
 8003ff6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ffa:	4651      	mov	r1, sl
 8003ffc:	00ca      	lsls	r2, r1, #3
 8003ffe:	4610      	mov	r0, r2
 8004000:	4619      	mov	r1, r3
 8004002:	4603      	mov	r3, r0
 8004004:	4642      	mov	r2, r8
 8004006:	189b      	adds	r3, r3, r2
 8004008:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800400c:	464b      	mov	r3, r9
 800400e:	460a      	mov	r2, r1
 8004010:	eb42 0303 	adc.w	r3, r2, r3
 8004014:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	67bb      	str	r3, [r7, #120]	; 0x78
 8004022:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004024:	f04f 0200 	mov.w	r2, #0
 8004028:	f04f 0300 	mov.w	r3, #0
 800402c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004030:	4649      	mov	r1, r9
 8004032:	008b      	lsls	r3, r1, #2
 8004034:	4641      	mov	r1, r8
 8004036:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800403a:	4641      	mov	r1, r8
 800403c:	008a      	lsls	r2, r1, #2
 800403e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004042:	f7fc fdcd 	bl	8000be0 <__aeabi_uldivmod>
 8004046:	4602      	mov	r2, r0
 8004048:	460b      	mov	r3, r1
 800404a:	4611      	mov	r1, r2
 800404c:	4b38      	ldr	r3, [pc, #224]	; (8004130 <UART_SetConfig+0x4e4>)
 800404e:	fba3 2301 	umull	r2, r3, r3, r1
 8004052:	095b      	lsrs	r3, r3, #5
 8004054:	2264      	movs	r2, #100	; 0x64
 8004056:	fb02 f303 	mul.w	r3, r2, r3
 800405a:	1acb      	subs	r3, r1, r3
 800405c:	011b      	lsls	r3, r3, #4
 800405e:	3332      	adds	r3, #50	; 0x32
 8004060:	4a33      	ldr	r2, [pc, #204]	; (8004130 <UART_SetConfig+0x4e4>)
 8004062:	fba2 2303 	umull	r2, r3, r2, r3
 8004066:	095b      	lsrs	r3, r3, #5
 8004068:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800406c:	441c      	add	r4, r3
 800406e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004072:	2200      	movs	r2, #0
 8004074:	673b      	str	r3, [r7, #112]	; 0x70
 8004076:	677a      	str	r2, [r7, #116]	; 0x74
 8004078:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800407c:	4642      	mov	r2, r8
 800407e:	464b      	mov	r3, r9
 8004080:	1891      	adds	r1, r2, r2
 8004082:	60b9      	str	r1, [r7, #8]
 8004084:	415b      	adcs	r3, r3
 8004086:	60fb      	str	r3, [r7, #12]
 8004088:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800408c:	4641      	mov	r1, r8
 800408e:	1851      	adds	r1, r2, r1
 8004090:	6039      	str	r1, [r7, #0]
 8004092:	4649      	mov	r1, r9
 8004094:	414b      	adcs	r3, r1
 8004096:	607b      	str	r3, [r7, #4]
 8004098:	f04f 0200 	mov.w	r2, #0
 800409c:	f04f 0300 	mov.w	r3, #0
 80040a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80040a4:	4659      	mov	r1, fp
 80040a6:	00cb      	lsls	r3, r1, #3
 80040a8:	4651      	mov	r1, sl
 80040aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040ae:	4651      	mov	r1, sl
 80040b0:	00ca      	lsls	r2, r1, #3
 80040b2:	4610      	mov	r0, r2
 80040b4:	4619      	mov	r1, r3
 80040b6:	4603      	mov	r3, r0
 80040b8:	4642      	mov	r2, r8
 80040ba:	189b      	adds	r3, r3, r2
 80040bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80040be:	464b      	mov	r3, r9
 80040c0:	460a      	mov	r2, r1
 80040c2:	eb42 0303 	adc.w	r3, r2, r3
 80040c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	663b      	str	r3, [r7, #96]	; 0x60
 80040d2:	667a      	str	r2, [r7, #100]	; 0x64
 80040d4:	f04f 0200 	mov.w	r2, #0
 80040d8:	f04f 0300 	mov.w	r3, #0
 80040dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80040e0:	4649      	mov	r1, r9
 80040e2:	008b      	lsls	r3, r1, #2
 80040e4:	4641      	mov	r1, r8
 80040e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040ea:	4641      	mov	r1, r8
 80040ec:	008a      	lsls	r2, r1, #2
 80040ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80040f2:	f7fc fd75 	bl	8000be0 <__aeabi_uldivmod>
 80040f6:	4602      	mov	r2, r0
 80040f8:	460b      	mov	r3, r1
 80040fa:	4b0d      	ldr	r3, [pc, #52]	; (8004130 <UART_SetConfig+0x4e4>)
 80040fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004100:	095b      	lsrs	r3, r3, #5
 8004102:	2164      	movs	r1, #100	; 0x64
 8004104:	fb01 f303 	mul.w	r3, r1, r3
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	011b      	lsls	r3, r3, #4
 800410c:	3332      	adds	r3, #50	; 0x32
 800410e:	4a08      	ldr	r2, [pc, #32]	; (8004130 <UART_SetConfig+0x4e4>)
 8004110:	fba2 2303 	umull	r2, r3, r2, r3
 8004114:	095b      	lsrs	r3, r3, #5
 8004116:	f003 020f 	and.w	r2, r3, #15
 800411a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4422      	add	r2, r4
 8004122:	609a      	str	r2, [r3, #8]
}
 8004124:	bf00      	nop
 8004126:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800412a:	46bd      	mov	sp, r7
 800412c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004130:	51eb851f 	.word	0x51eb851f

08004134 <memset>:
 8004134:	4402      	add	r2, r0
 8004136:	4603      	mov	r3, r0
 8004138:	4293      	cmp	r3, r2
 800413a:	d100      	bne.n	800413e <memset+0xa>
 800413c:	4770      	bx	lr
 800413e:	f803 1b01 	strb.w	r1, [r3], #1
 8004142:	e7f9      	b.n	8004138 <memset+0x4>

08004144 <__errno>:
 8004144:	4b01      	ldr	r3, [pc, #4]	; (800414c <__errno+0x8>)
 8004146:	6818      	ldr	r0, [r3, #0]
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	20000058 	.word	0x20000058

08004150 <__libc_init_array>:
 8004150:	b570      	push	{r4, r5, r6, lr}
 8004152:	4d0d      	ldr	r5, [pc, #52]	; (8004188 <__libc_init_array+0x38>)
 8004154:	4c0d      	ldr	r4, [pc, #52]	; (800418c <__libc_init_array+0x3c>)
 8004156:	1b64      	subs	r4, r4, r5
 8004158:	10a4      	asrs	r4, r4, #2
 800415a:	2600      	movs	r6, #0
 800415c:	42a6      	cmp	r6, r4
 800415e:	d109      	bne.n	8004174 <__libc_init_array+0x24>
 8004160:	4d0b      	ldr	r5, [pc, #44]	; (8004190 <__libc_init_array+0x40>)
 8004162:	4c0c      	ldr	r4, [pc, #48]	; (8004194 <__libc_init_array+0x44>)
 8004164:	f000 ff50 	bl	8005008 <_init>
 8004168:	1b64      	subs	r4, r4, r5
 800416a:	10a4      	asrs	r4, r4, #2
 800416c:	2600      	movs	r6, #0
 800416e:	42a6      	cmp	r6, r4
 8004170:	d105      	bne.n	800417e <__libc_init_array+0x2e>
 8004172:	bd70      	pop	{r4, r5, r6, pc}
 8004174:	f855 3b04 	ldr.w	r3, [r5], #4
 8004178:	4798      	blx	r3
 800417a:	3601      	adds	r6, #1
 800417c:	e7ee      	b.n	800415c <__libc_init_array+0xc>
 800417e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004182:	4798      	blx	r3
 8004184:	3601      	adds	r6, #1
 8004186:	e7f2      	b.n	800416e <__libc_init_array+0x1e>
 8004188:	08005078 	.word	0x08005078
 800418c:	08005078 	.word	0x08005078
 8004190:	08005078 	.word	0x08005078
 8004194:	0800507c 	.word	0x0800507c

08004198 <pow>:
 8004198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800419a:	ed2d 8b02 	vpush	{d8}
 800419e:	eeb0 8a40 	vmov.f32	s16, s0
 80041a2:	eef0 8a60 	vmov.f32	s17, s1
 80041a6:	ec55 4b11 	vmov	r4, r5, d1
 80041aa:	f000 f871 	bl	8004290 <__ieee754_pow>
 80041ae:	4622      	mov	r2, r4
 80041b0:	462b      	mov	r3, r5
 80041b2:	4620      	mov	r0, r4
 80041b4:	4629      	mov	r1, r5
 80041b6:	ec57 6b10 	vmov	r6, r7, d0
 80041ba:	f7fc fc63 	bl	8000a84 <__aeabi_dcmpun>
 80041be:	2800      	cmp	r0, #0
 80041c0:	d13b      	bne.n	800423a <pow+0xa2>
 80041c2:	ec51 0b18 	vmov	r0, r1, d8
 80041c6:	2200      	movs	r2, #0
 80041c8:	2300      	movs	r3, #0
 80041ca:	f7fc fc29 	bl	8000a20 <__aeabi_dcmpeq>
 80041ce:	b1b8      	cbz	r0, 8004200 <pow+0x68>
 80041d0:	2200      	movs	r2, #0
 80041d2:	2300      	movs	r3, #0
 80041d4:	4620      	mov	r0, r4
 80041d6:	4629      	mov	r1, r5
 80041d8:	f7fc fc22 	bl	8000a20 <__aeabi_dcmpeq>
 80041dc:	2800      	cmp	r0, #0
 80041de:	d146      	bne.n	800426e <pow+0xd6>
 80041e0:	ec45 4b10 	vmov	d0, r4, r5
 80041e4:	f000 f848 	bl	8004278 <finite>
 80041e8:	b338      	cbz	r0, 800423a <pow+0xa2>
 80041ea:	2200      	movs	r2, #0
 80041ec:	2300      	movs	r3, #0
 80041ee:	4620      	mov	r0, r4
 80041f0:	4629      	mov	r1, r5
 80041f2:	f7fc fc1f 	bl	8000a34 <__aeabi_dcmplt>
 80041f6:	b300      	cbz	r0, 800423a <pow+0xa2>
 80041f8:	f7ff ffa4 	bl	8004144 <__errno>
 80041fc:	2322      	movs	r3, #34	; 0x22
 80041fe:	e01b      	b.n	8004238 <pow+0xa0>
 8004200:	ec47 6b10 	vmov	d0, r6, r7
 8004204:	f000 f838 	bl	8004278 <finite>
 8004208:	b9e0      	cbnz	r0, 8004244 <pow+0xac>
 800420a:	eeb0 0a48 	vmov.f32	s0, s16
 800420e:	eef0 0a68 	vmov.f32	s1, s17
 8004212:	f000 f831 	bl	8004278 <finite>
 8004216:	b1a8      	cbz	r0, 8004244 <pow+0xac>
 8004218:	ec45 4b10 	vmov	d0, r4, r5
 800421c:	f000 f82c 	bl	8004278 <finite>
 8004220:	b180      	cbz	r0, 8004244 <pow+0xac>
 8004222:	4632      	mov	r2, r6
 8004224:	463b      	mov	r3, r7
 8004226:	4630      	mov	r0, r6
 8004228:	4639      	mov	r1, r7
 800422a:	f7fc fc2b 	bl	8000a84 <__aeabi_dcmpun>
 800422e:	2800      	cmp	r0, #0
 8004230:	d0e2      	beq.n	80041f8 <pow+0x60>
 8004232:	f7ff ff87 	bl	8004144 <__errno>
 8004236:	2321      	movs	r3, #33	; 0x21
 8004238:	6003      	str	r3, [r0, #0]
 800423a:	ecbd 8b02 	vpop	{d8}
 800423e:	ec47 6b10 	vmov	d0, r6, r7
 8004242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004244:	2200      	movs	r2, #0
 8004246:	2300      	movs	r3, #0
 8004248:	4630      	mov	r0, r6
 800424a:	4639      	mov	r1, r7
 800424c:	f7fc fbe8 	bl	8000a20 <__aeabi_dcmpeq>
 8004250:	2800      	cmp	r0, #0
 8004252:	d0f2      	beq.n	800423a <pow+0xa2>
 8004254:	eeb0 0a48 	vmov.f32	s0, s16
 8004258:	eef0 0a68 	vmov.f32	s1, s17
 800425c:	f000 f80c 	bl	8004278 <finite>
 8004260:	2800      	cmp	r0, #0
 8004262:	d0ea      	beq.n	800423a <pow+0xa2>
 8004264:	ec45 4b10 	vmov	d0, r4, r5
 8004268:	f000 f806 	bl	8004278 <finite>
 800426c:	e7c3      	b.n	80041f6 <pow+0x5e>
 800426e:	4f01      	ldr	r7, [pc, #4]	; (8004274 <pow+0xdc>)
 8004270:	2600      	movs	r6, #0
 8004272:	e7e2      	b.n	800423a <pow+0xa2>
 8004274:	3ff00000 	.word	0x3ff00000

08004278 <finite>:
 8004278:	b082      	sub	sp, #8
 800427a:	ed8d 0b00 	vstr	d0, [sp]
 800427e:	9801      	ldr	r0, [sp, #4]
 8004280:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8004284:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8004288:	0fc0      	lsrs	r0, r0, #31
 800428a:	b002      	add	sp, #8
 800428c:	4770      	bx	lr
	...

08004290 <__ieee754_pow>:
 8004290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004294:	ed2d 8b06 	vpush	{d8-d10}
 8004298:	b089      	sub	sp, #36	; 0x24
 800429a:	ed8d 1b00 	vstr	d1, [sp]
 800429e:	e9dd 2900 	ldrd	r2, r9, [sp]
 80042a2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80042a6:	ea58 0102 	orrs.w	r1, r8, r2
 80042aa:	ec57 6b10 	vmov	r6, r7, d0
 80042ae:	d115      	bne.n	80042dc <__ieee754_pow+0x4c>
 80042b0:	19b3      	adds	r3, r6, r6
 80042b2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80042b6:	4152      	adcs	r2, r2
 80042b8:	4299      	cmp	r1, r3
 80042ba:	4b89      	ldr	r3, [pc, #548]	; (80044e0 <__ieee754_pow+0x250>)
 80042bc:	4193      	sbcs	r3, r2
 80042be:	f080 84d1 	bcs.w	8004c64 <__ieee754_pow+0x9d4>
 80042c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80042c6:	4630      	mov	r0, r6
 80042c8:	4639      	mov	r1, r7
 80042ca:	f7fb ff8b 	bl	80001e4 <__adddf3>
 80042ce:	ec41 0b10 	vmov	d0, r0, r1
 80042d2:	b009      	add	sp, #36	; 0x24
 80042d4:	ecbd 8b06 	vpop	{d8-d10}
 80042d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042dc:	4b81      	ldr	r3, [pc, #516]	; (80044e4 <__ieee754_pow+0x254>)
 80042de:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80042e2:	429c      	cmp	r4, r3
 80042e4:	ee10 aa10 	vmov	sl, s0
 80042e8:	463d      	mov	r5, r7
 80042ea:	dc06      	bgt.n	80042fa <__ieee754_pow+0x6a>
 80042ec:	d101      	bne.n	80042f2 <__ieee754_pow+0x62>
 80042ee:	2e00      	cmp	r6, #0
 80042f0:	d1e7      	bne.n	80042c2 <__ieee754_pow+0x32>
 80042f2:	4598      	cmp	r8, r3
 80042f4:	dc01      	bgt.n	80042fa <__ieee754_pow+0x6a>
 80042f6:	d10f      	bne.n	8004318 <__ieee754_pow+0x88>
 80042f8:	b172      	cbz	r2, 8004318 <__ieee754_pow+0x88>
 80042fa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80042fe:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8004302:	ea55 050a 	orrs.w	r5, r5, sl
 8004306:	d1dc      	bne.n	80042c2 <__ieee754_pow+0x32>
 8004308:	e9dd 3200 	ldrd	r3, r2, [sp]
 800430c:	18db      	adds	r3, r3, r3
 800430e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8004312:	4152      	adcs	r2, r2
 8004314:	429d      	cmp	r5, r3
 8004316:	e7d0      	b.n	80042ba <__ieee754_pow+0x2a>
 8004318:	2d00      	cmp	r5, #0
 800431a:	da3b      	bge.n	8004394 <__ieee754_pow+0x104>
 800431c:	4b72      	ldr	r3, [pc, #456]	; (80044e8 <__ieee754_pow+0x258>)
 800431e:	4598      	cmp	r8, r3
 8004320:	dc51      	bgt.n	80043c6 <__ieee754_pow+0x136>
 8004322:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8004326:	4598      	cmp	r8, r3
 8004328:	f340 84ab 	ble.w	8004c82 <__ieee754_pow+0x9f2>
 800432c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004330:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004334:	2b14      	cmp	r3, #20
 8004336:	dd0f      	ble.n	8004358 <__ieee754_pow+0xc8>
 8004338:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800433c:	fa22 f103 	lsr.w	r1, r2, r3
 8004340:	fa01 f303 	lsl.w	r3, r1, r3
 8004344:	4293      	cmp	r3, r2
 8004346:	f040 849c 	bne.w	8004c82 <__ieee754_pow+0x9f2>
 800434a:	f001 0101 	and.w	r1, r1, #1
 800434e:	f1c1 0302 	rsb	r3, r1, #2
 8004352:	9304      	str	r3, [sp, #16]
 8004354:	b182      	cbz	r2, 8004378 <__ieee754_pow+0xe8>
 8004356:	e05f      	b.n	8004418 <__ieee754_pow+0x188>
 8004358:	2a00      	cmp	r2, #0
 800435a:	d15b      	bne.n	8004414 <__ieee754_pow+0x184>
 800435c:	f1c3 0314 	rsb	r3, r3, #20
 8004360:	fa48 f103 	asr.w	r1, r8, r3
 8004364:	fa01 f303 	lsl.w	r3, r1, r3
 8004368:	4543      	cmp	r3, r8
 800436a:	f040 8487 	bne.w	8004c7c <__ieee754_pow+0x9ec>
 800436e:	f001 0101 	and.w	r1, r1, #1
 8004372:	f1c1 0302 	rsb	r3, r1, #2
 8004376:	9304      	str	r3, [sp, #16]
 8004378:	4b5c      	ldr	r3, [pc, #368]	; (80044ec <__ieee754_pow+0x25c>)
 800437a:	4598      	cmp	r8, r3
 800437c:	d132      	bne.n	80043e4 <__ieee754_pow+0x154>
 800437e:	f1b9 0f00 	cmp.w	r9, #0
 8004382:	f280 8477 	bge.w	8004c74 <__ieee754_pow+0x9e4>
 8004386:	4959      	ldr	r1, [pc, #356]	; (80044ec <__ieee754_pow+0x25c>)
 8004388:	4632      	mov	r2, r6
 800438a:	463b      	mov	r3, r7
 800438c:	2000      	movs	r0, #0
 800438e:	f7fc fa09 	bl	80007a4 <__aeabi_ddiv>
 8004392:	e79c      	b.n	80042ce <__ieee754_pow+0x3e>
 8004394:	2300      	movs	r3, #0
 8004396:	9304      	str	r3, [sp, #16]
 8004398:	2a00      	cmp	r2, #0
 800439a:	d13d      	bne.n	8004418 <__ieee754_pow+0x188>
 800439c:	4b51      	ldr	r3, [pc, #324]	; (80044e4 <__ieee754_pow+0x254>)
 800439e:	4598      	cmp	r8, r3
 80043a0:	d1ea      	bne.n	8004378 <__ieee754_pow+0xe8>
 80043a2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80043a6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80043aa:	ea53 030a 	orrs.w	r3, r3, sl
 80043ae:	f000 8459 	beq.w	8004c64 <__ieee754_pow+0x9d4>
 80043b2:	4b4f      	ldr	r3, [pc, #316]	; (80044f0 <__ieee754_pow+0x260>)
 80043b4:	429c      	cmp	r4, r3
 80043b6:	dd08      	ble.n	80043ca <__ieee754_pow+0x13a>
 80043b8:	f1b9 0f00 	cmp.w	r9, #0
 80043bc:	f2c0 8456 	blt.w	8004c6c <__ieee754_pow+0x9dc>
 80043c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80043c4:	e783      	b.n	80042ce <__ieee754_pow+0x3e>
 80043c6:	2302      	movs	r3, #2
 80043c8:	e7e5      	b.n	8004396 <__ieee754_pow+0x106>
 80043ca:	f1b9 0f00 	cmp.w	r9, #0
 80043ce:	f04f 0000 	mov.w	r0, #0
 80043d2:	f04f 0100 	mov.w	r1, #0
 80043d6:	f6bf af7a 	bge.w	80042ce <__ieee754_pow+0x3e>
 80043da:	e9dd 0300 	ldrd	r0, r3, [sp]
 80043de:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80043e2:	e774      	b.n	80042ce <__ieee754_pow+0x3e>
 80043e4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80043e8:	d106      	bne.n	80043f8 <__ieee754_pow+0x168>
 80043ea:	4632      	mov	r2, r6
 80043ec:	463b      	mov	r3, r7
 80043ee:	4630      	mov	r0, r6
 80043f0:	4639      	mov	r1, r7
 80043f2:	f7fc f8ad 	bl	8000550 <__aeabi_dmul>
 80043f6:	e76a      	b.n	80042ce <__ieee754_pow+0x3e>
 80043f8:	4b3e      	ldr	r3, [pc, #248]	; (80044f4 <__ieee754_pow+0x264>)
 80043fa:	4599      	cmp	r9, r3
 80043fc:	d10c      	bne.n	8004418 <__ieee754_pow+0x188>
 80043fe:	2d00      	cmp	r5, #0
 8004400:	db0a      	blt.n	8004418 <__ieee754_pow+0x188>
 8004402:	ec47 6b10 	vmov	d0, r6, r7
 8004406:	b009      	add	sp, #36	; 0x24
 8004408:	ecbd 8b06 	vpop	{d8-d10}
 800440c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004410:	f000 bd20 	b.w	8004e54 <__ieee754_sqrt>
 8004414:	2300      	movs	r3, #0
 8004416:	9304      	str	r3, [sp, #16]
 8004418:	ec47 6b10 	vmov	d0, r6, r7
 800441c:	f000 fc62 	bl	8004ce4 <fabs>
 8004420:	ec51 0b10 	vmov	r0, r1, d0
 8004424:	f1ba 0f00 	cmp.w	sl, #0
 8004428:	d129      	bne.n	800447e <__ieee754_pow+0x1ee>
 800442a:	b124      	cbz	r4, 8004436 <__ieee754_pow+0x1a6>
 800442c:	4b2f      	ldr	r3, [pc, #188]	; (80044ec <__ieee754_pow+0x25c>)
 800442e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8004432:	429a      	cmp	r2, r3
 8004434:	d123      	bne.n	800447e <__ieee754_pow+0x1ee>
 8004436:	f1b9 0f00 	cmp.w	r9, #0
 800443a:	da05      	bge.n	8004448 <__ieee754_pow+0x1b8>
 800443c:	4602      	mov	r2, r0
 800443e:	460b      	mov	r3, r1
 8004440:	2000      	movs	r0, #0
 8004442:	492a      	ldr	r1, [pc, #168]	; (80044ec <__ieee754_pow+0x25c>)
 8004444:	f7fc f9ae 	bl	80007a4 <__aeabi_ddiv>
 8004448:	2d00      	cmp	r5, #0
 800444a:	f6bf af40 	bge.w	80042ce <__ieee754_pow+0x3e>
 800444e:	9b04      	ldr	r3, [sp, #16]
 8004450:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004454:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004458:	431c      	orrs	r4, r3
 800445a:	d108      	bne.n	800446e <__ieee754_pow+0x1de>
 800445c:	4602      	mov	r2, r0
 800445e:	460b      	mov	r3, r1
 8004460:	4610      	mov	r0, r2
 8004462:	4619      	mov	r1, r3
 8004464:	f7fb febc 	bl	80001e0 <__aeabi_dsub>
 8004468:	4602      	mov	r2, r0
 800446a:	460b      	mov	r3, r1
 800446c:	e78f      	b.n	800438e <__ieee754_pow+0xfe>
 800446e:	9b04      	ldr	r3, [sp, #16]
 8004470:	2b01      	cmp	r3, #1
 8004472:	f47f af2c 	bne.w	80042ce <__ieee754_pow+0x3e>
 8004476:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800447a:	4619      	mov	r1, r3
 800447c:	e727      	b.n	80042ce <__ieee754_pow+0x3e>
 800447e:	0feb      	lsrs	r3, r5, #31
 8004480:	3b01      	subs	r3, #1
 8004482:	9306      	str	r3, [sp, #24]
 8004484:	9a06      	ldr	r2, [sp, #24]
 8004486:	9b04      	ldr	r3, [sp, #16]
 8004488:	4313      	orrs	r3, r2
 800448a:	d102      	bne.n	8004492 <__ieee754_pow+0x202>
 800448c:	4632      	mov	r2, r6
 800448e:	463b      	mov	r3, r7
 8004490:	e7e6      	b.n	8004460 <__ieee754_pow+0x1d0>
 8004492:	4b19      	ldr	r3, [pc, #100]	; (80044f8 <__ieee754_pow+0x268>)
 8004494:	4598      	cmp	r8, r3
 8004496:	f340 80fb 	ble.w	8004690 <__ieee754_pow+0x400>
 800449a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800449e:	4598      	cmp	r8, r3
 80044a0:	4b13      	ldr	r3, [pc, #76]	; (80044f0 <__ieee754_pow+0x260>)
 80044a2:	dd0c      	ble.n	80044be <__ieee754_pow+0x22e>
 80044a4:	429c      	cmp	r4, r3
 80044a6:	dc0f      	bgt.n	80044c8 <__ieee754_pow+0x238>
 80044a8:	f1b9 0f00 	cmp.w	r9, #0
 80044ac:	da0f      	bge.n	80044ce <__ieee754_pow+0x23e>
 80044ae:	2000      	movs	r0, #0
 80044b0:	b009      	add	sp, #36	; 0x24
 80044b2:	ecbd 8b06 	vpop	{d8-d10}
 80044b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044ba:	f000 bcc2 	b.w	8004e42 <__math_oflow>
 80044be:	429c      	cmp	r4, r3
 80044c0:	dbf2      	blt.n	80044a8 <__ieee754_pow+0x218>
 80044c2:	4b0a      	ldr	r3, [pc, #40]	; (80044ec <__ieee754_pow+0x25c>)
 80044c4:	429c      	cmp	r4, r3
 80044c6:	dd19      	ble.n	80044fc <__ieee754_pow+0x26c>
 80044c8:	f1b9 0f00 	cmp.w	r9, #0
 80044cc:	dcef      	bgt.n	80044ae <__ieee754_pow+0x21e>
 80044ce:	2000      	movs	r0, #0
 80044d0:	b009      	add	sp, #36	; 0x24
 80044d2:	ecbd 8b06 	vpop	{d8-d10}
 80044d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044da:	f000 bca9 	b.w	8004e30 <__math_uflow>
 80044de:	bf00      	nop
 80044e0:	fff00000 	.word	0xfff00000
 80044e4:	7ff00000 	.word	0x7ff00000
 80044e8:	433fffff 	.word	0x433fffff
 80044ec:	3ff00000 	.word	0x3ff00000
 80044f0:	3fefffff 	.word	0x3fefffff
 80044f4:	3fe00000 	.word	0x3fe00000
 80044f8:	41e00000 	.word	0x41e00000
 80044fc:	4b60      	ldr	r3, [pc, #384]	; (8004680 <__ieee754_pow+0x3f0>)
 80044fe:	2200      	movs	r2, #0
 8004500:	f7fb fe6e 	bl	80001e0 <__aeabi_dsub>
 8004504:	a354      	add	r3, pc, #336	; (adr r3, 8004658 <__ieee754_pow+0x3c8>)
 8004506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450a:	4604      	mov	r4, r0
 800450c:	460d      	mov	r5, r1
 800450e:	f7fc f81f 	bl	8000550 <__aeabi_dmul>
 8004512:	a353      	add	r3, pc, #332	; (adr r3, 8004660 <__ieee754_pow+0x3d0>)
 8004514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004518:	4606      	mov	r6, r0
 800451a:	460f      	mov	r7, r1
 800451c:	4620      	mov	r0, r4
 800451e:	4629      	mov	r1, r5
 8004520:	f7fc f816 	bl	8000550 <__aeabi_dmul>
 8004524:	4b57      	ldr	r3, [pc, #348]	; (8004684 <__ieee754_pow+0x3f4>)
 8004526:	4682      	mov	sl, r0
 8004528:	468b      	mov	fp, r1
 800452a:	2200      	movs	r2, #0
 800452c:	4620      	mov	r0, r4
 800452e:	4629      	mov	r1, r5
 8004530:	f7fc f80e 	bl	8000550 <__aeabi_dmul>
 8004534:	4602      	mov	r2, r0
 8004536:	460b      	mov	r3, r1
 8004538:	a14b      	add	r1, pc, #300	; (adr r1, 8004668 <__ieee754_pow+0x3d8>)
 800453a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800453e:	f7fb fe4f 	bl	80001e0 <__aeabi_dsub>
 8004542:	4622      	mov	r2, r4
 8004544:	462b      	mov	r3, r5
 8004546:	f7fc f803 	bl	8000550 <__aeabi_dmul>
 800454a:	4602      	mov	r2, r0
 800454c:	460b      	mov	r3, r1
 800454e:	2000      	movs	r0, #0
 8004550:	494d      	ldr	r1, [pc, #308]	; (8004688 <__ieee754_pow+0x3f8>)
 8004552:	f7fb fe45 	bl	80001e0 <__aeabi_dsub>
 8004556:	4622      	mov	r2, r4
 8004558:	4680      	mov	r8, r0
 800455a:	4689      	mov	r9, r1
 800455c:	462b      	mov	r3, r5
 800455e:	4620      	mov	r0, r4
 8004560:	4629      	mov	r1, r5
 8004562:	f7fb fff5 	bl	8000550 <__aeabi_dmul>
 8004566:	4602      	mov	r2, r0
 8004568:	460b      	mov	r3, r1
 800456a:	4640      	mov	r0, r8
 800456c:	4649      	mov	r1, r9
 800456e:	f7fb ffef 	bl	8000550 <__aeabi_dmul>
 8004572:	a33f      	add	r3, pc, #252	; (adr r3, 8004670 <__ieee754_pow+0x3e0>)
 8004574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004578:	f7fb ffea 	bl	8000550 <__aeabi_dmul>
 800457c:	4602      	mov	r2, r0
 800457e:	460b      	mov	r3, r1
 8004580:	4650      	mov	r0, sl
 8004582:	4659      	mov	r1, fp
 8004584:	f7fb fe2c 	bl	80001e0 <__aeabi_dsub>
 8004588:	4602      	mov	r2, r0
 800458a:	460b      	mov	r3, r1
 800458c:	4680      	mov	r8, r0
 800458e:	4689      	mov	r9, r1
 8004590:	4630      	mov	r0, r6
 8004592:	4639      	mov	r1, r7
 8004594:	f7fb fe26 	bl	80001e4 <__adddf3>
 8004598:	2000      	movs	r0, #0
 800459a:	4632      	mov	r2, r6
 800459c:	463b      	mov	r3, r7
 800459e:	4604      	mov	r4, r0
 80045a0:	460d      	mov	r5, r1
 80045a2:	f7fb fe1d 	bl	80001e0 <__aeabi_dsub>
 80045a6:	4602      	mov	r2, r0
 80045a8:	460b      	mov	r3, r1
 80045aa:	4640      	mov	r0, r8
 80045ac:	4649      	mov	r1, r9
 80045ae:	f7fb fe17 	bl	80001e0 <__aeabi_dsub>
 80045b2:	9b04      	ldr	r3, [sp, #16]
 80045b4:	9a06      	ldr	r2, [sp, #24]
 80045b6:	3b01      	subs	r3, #1
 80045b8:	4313      	orrs	r3, r2
 80045ba:	4682      	mov	sl, r0
 80045bc:	468b      	mov	fp, r1
 80045be:	f040 81e7 	bne.w	8004990 <__ieee754_pow+0x700>
 80045c2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8004678 <__ieee754_pow+0x3e8>
 80045c6:	eeb0 8a47 	vmov.f32	s16, s14
 80045ca:	eef0 8a67 	vmov.f32	s17, s15
 80045ce:	e9dd 6700 	ldrd	r6, r7, [sp]
 80045d2:	2600      	movs	r6, #0
 80045d4:	4632      	mov	r2, r6
 80045d6:	463b      	mov	r3, r7
 80045d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80045dc:	f7fb fe00 	bl	80001e0 <__aeabi_dsub>
 80045e0:	4622      	mov	r2, r4
 80045e2:	462b      	mov	r3, r5
 80045e4:	f7fb ffb4 	bl	8000550 <__aeabi_dmul>
 80045e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80045ec:	4680      	mov	r8, r0
 80045ee:	4689      	mov	r9, r1
 80045f0:	4650      	mov	r0, sl
 80045f2:	4659      	mov	r1, fp
 80045f4:	f7fb ffac 	bl	8000550 <__aeabi_dmul>
 80045f8:	4602      	mov	r2, r0
 80045fa:	460b      	mov	r3, r1
 80045fc:	4640      	mov	r0, r8
 80045fe:	4649      	mov	r1, r9
 8004600:	f7fb fdf0 	bl	80001e4 <__adddf3>
 8004604:	4632      	mov	r2, r6
 8004606:	463b      	mov	r3, r7
 8004608:	4680      	mov	r8, r0
 800460a:	4689      	mov	r9, r1
 800460c:	4620      	mov	r0, r4
 800460e:	4629      	mov	r1, r5
 8004610:	f7fb ff9e 	bl	8000550 <__aeabi_dmul>
 8004614:	460b      	mov	r3, r1
 8004616:	4604      	mov	r4, r0
 8004618:	460d      	mov	r5, r1
 800461a:	4602      	mov	r2, r0
 800461c:	4649      	mov	r1, r9
 800461e:	4640      	mov	r0, r8
 8004620:	f7fb fde0 	bl	80001e4 <__adddf3>
 8004624:	4b19      	ldr	r3, [pc, #100]	; (800468c <__ieee754_pow+0x3fc>)
 8004626:	4299      	cmp	r1, r3
 8004628:	ec45 4b19 	vmov	d9, r4, r5
 800462c:	4606      	mov	r6, r0
 800462e:	460f      	mov	r7, r1
 8004630:	468b      	mov	fp, r1
 8004632:	f340 82f0 	ble.w	8004c16 <__ieee754_pow+0x986>
 8004636:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800463a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800463e:	4303      	orrs	r3, r0
 8004640:	f000 81e4 	beq.w	8004a0c <__ieee754_pow+0x77c>
 8004644:	ec51 0b18 	vmov	r0, r1, d8
 8004648:	2200      	movs	r2, #0
 800464a:	2300      	movs	r3, #0
 800464c:	f7fc f9f2 	bl	8000a34 <__aeabi_dcmplt>
 8004650:	3800      	subs	r0, #0
 8004652:	bf18      	it	ne
 8004654:	2001      	movne	r0, #1
 8004656:	e72b      	b.n	80044b0 <__ieee754_pow+0x220>
 8004658:	60000000 	.word	0x60000000
 800465c:	3ff71547 	.word	0x3ff71547
 8004660:	f85ddf44 	.word	0xf85ddf44
 8004664:	3e54ae0b 	.word	0x3e54ae0b
 8004668:	55555555 	.word	0x55555555
 800466c:	3fd55555 	.word	0x3fd55555
 8004670:	652b82fe 	.word	0x652b82fe
 8004674:	3ff71547 	.word	0x3ff71547
 8004678:	00000000 	.word	0x00000000
 800467c:	bff00000 	.word	0xbff00000
 8004680:	3ff00000 	.word	0x3ff00000
 8004684:	3fd00000 	.word	0x3fd00000
 8004688:	3fe00000 	.word	0x3fe00000
 800468c:	408fffff 	.word	0x408fffff
 8004690:	4bd5      	ldr	r3, [pc, #852]	; (80049e8 <__ieee754_pow+0x758>)
 8004692:	402b      	ands	r3, r5
 8004694:	2200      	movs	r2, #0
 8004696:	b92b      	cbnz	r3, 80046a4 <__ieee754_pow+0x414>
 8004698:	4bd4      	ldr	r3, [pc, #848]	; (80049ec <__ieee754_pow+0x75c>)
 800469a:	f7fb ff59 	bl	8000550 <__aeabi_dmul>
 800469e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80046a2:	460c      	mov	r4, r1
 80046a4:	1523      	asrs	r3, r4, #20
 80046a6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80046aa:	4413      	add	r3, r2
 80046ac:	9305      	str	r3, [sp, #20]
 80046ae:	4bd0      	ldr	r3, [pc, #832]	; (80049f0 <__ieee754_pow+0x760>)
 80046b0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80046b4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80046b8:	429c      	cmp	r4, r3
 80046ba:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80046be:	dd08      	ble.n	80046d2 <__ieee754_pow+0x442>
 80046c0:	4bcc      	ldr	r3, [pc, #816]	; (80049f4 <__ieee754_pow+0x764>)
 80046c2:	429c      	cmp	r4, r3
 80046c4:	f340 8162 	ble.w	800498c <__ieee754_pow+0x6fc>
 80046c8:	9b05      	ldr	r3, [sp, #20]
 80046ca:	3301      	adds	r3, #1
 80046cc:	9305      	str	r3, [sp, #20]
 80046ce:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80046d2:	2400      	movs	r4, #0
 80046d4:	00e3      	lsls	r3, r4, #3
 80046d6:	9307      	str	r3, [sp, #28]
 80046d8:	4bc7      	ldr	r3, [pc, #796]	; (80049f8 <__ieee754_pow+0x768>)
 80046da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80046de:	ed93 7b00 	vldr	d7, [r3]
 80046e2:	4629      	mov	r1, r5
 80046e4:	ec53 2b17 	vmov	r2, r3, d7
 80046e8:	eeb0 9a47 	vmov.f32	s18, s14
 80046ec:	eef0 9a67 	vmov.f32	s19, s15
 80046f0:	4682      	mov	sl, r0
 80046f2:	f7fb fd75 	bl	80001e0 <__aeabi_dsub>
 80046f6:	4652      	mov	r2, sl
 80046f8:	4606      	mov	r6, r0
 80046fa:	460f      	mov	r7, r1
 80046fc:	462b      	mov	r3, r5
 80046fe:	ec51 0b19 	vmov	r0, r1, d9
 8004702:	f7fb fd6f 	bl	80001e4 <__adddf3>
 8004706:	4602      	mov	r2, r0
 8004708:	460b      	mov	r3, r1
 800470a:	2000      	movs	r0, #0
 800470c:	49bb      	ldr	r1, [pc, #748]	; (80049fc <__ieee754_pow+0x76c>)
 800470e:	f7fc f849 	bl	80007a4 <__aeabi_ddiv>
 8004712:	ec41 0b1a 	vmov	d10, r0, r1
 8004716:	4602      	mov	r2, r0
 8004718:	460b      	mov	r3, r1
 800471a:	4630      	mov	r0, r6
 800471c:	4639      	mov	r1, r7
 800471e:	f7fb ff17 	bl	8000550 <__aeabi_dmul>
 8004722:	2300      	movs	r3, #0
 8004724:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004728:	9302      	str	r3, [sp, #8]
 800472a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800472e:	46ab      	mov	fp, r5
 8004730:	106d      	asrs	r5, r5, #1
 8004732:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004736:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800473a:	ec41 0b18 	vmov	d8, r0, r1
 800473e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8004742:	2200      	movs	r2, #0
 8004744:	4640      	mov	r0, r8
 8004746:	4649      	mov	r1, r9
 8004748:	4614      	mov	r4, r2
 800474a:	461d      	mov	r5, r3
 800474c:	f7fb ff00 	bl	8000550 <__aeabi_dmul>
 8004750:	4602      	mov	r2, r0
 8004752:	460b      	mov	r3, r1
 8004754:	4630      	mov	r0, r6
 8004756:	4639      	mov	r1, r7
 8004758:	f7fb fd42 	bl	80001e0 <__aeabi_dsub>
 800475c:	ec53 2b19 	vmov	r2, r3, d9
 8004760:	4606      	mov	r6, r0
 8004762:	460f      	mov	r7, r1
 8004764:	4620      	mov	r0, r4
 8004766:	4629      	mov	r1, r5
 8004768:	f7fb fd3a 	bl	80001e0 <__aeabi_dsub>
 800476c:	4602      	mov	r2, r0
 800476e:	460b      	mov	r3, r1
 8004770:	4650      	mov	r0, sl
 8004772:	4659      	mov	r1, fp
 8004774:	f7fb fd34 	bl	80001e0 <__aeabi_dsub>
 8004778:	4642      	mov	r2, r8
 800477a:	464b      	mov	r3, r9
 800477c:	f7fb fee8 	bl	8000550 <__aeabi_dmul>
 8004780:	4602      	mov	r2, r0
 8004782:	460b      	mov	r3, r1
 8004784:	4630      	mov	r0, r6
 8004786:	4639      	mov	r1, r7
 8004788:	f7fb fd2a 	bl	80001e0 <__aeabi_dsub>
 800478c:	ec53 2b1a 	vmov	r2, r3, d10
 8004790:	f7fb fede 	bl	8000550 <__aeabi_dmul>
 8004794:	ec53 2b18 	vmov	r2, r3, d8
 8004798:	ec41 0b19 	vmov	d9, r0, r1
 800479c:	ec51 0b18 	vmov	r0, r1, d8
 80047a0:	f7fb fed6 	bl	8000550 <__aeabi_dmul>
 80047a4:	a37c      	add	r3, pc, #496	; (adr r3, 8004998 <__ieee754_pow+0x708>)
 80047a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047aa:	4604      	mov	r4, r0
 80047ac:	460d      	mov	r5, r1
 80047ae:	f7fb fecf 	bl	8000550 <__aeabi_dmul>
 80047b2:	a37b      	add	r3, pc, #492	; (adr r3, 80049a0 <__ieee754_pow+0x710>)
 80047b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b8:	f7fb fd14 	bl	80001e4 <__adddf3>
 80047bc:	4622      	mov	r2, r4
 80047be:	462b      	mov	r3, r5
 80047c0:	f7fb fec6 	bl	8000550 <__aeabi_dmul>
 80047c4:	a378      	add	r3, pc, #480	; (adr r3, 80049a8 <__ieee754_pow+0x718>)
 80047c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ca:	f7fb fd0b 	bl	80001e4 <__adddf3>
 80047ce:	4622      	mov	r2, r4
 80047d0:	462b      	mov	r3, r5
 80047d2:	f7fb febd 	bl	8000550 <__aeabi_dmul>
 80047d6:	a376      	add	r3, pc, #472	; (adr r3, 80049b0 <__ieee754_pow+0x720>)
 80047d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047dc:	f7fb fd02 	bl	80001e4 <__adddf3>
 80047e0:	4622      	mov	r2, r4
 80047e2:	462b      	mov	r3, r5
 80047e4:	f7fb feb4 	bl	8000550 <__aeabi_dmul>
 80047e8:	a373      	add	r3, pc, #460	; (adr r3, 80049b8 <__ieee754_pow+0x728>)
 80047ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ee:	f7fb fcf9 	bl	80001e4 <__adddf3>
 80047f2:	4622      	mov	r2, r4
 80047f4:	462b      	mov	r3, r5
 80047f6:	f7fb feab 	bl	8000550 <__aeabi_dmul>
 80047fa:	a371      	add	r3, pc, #452	; (adr r3, 80049c0 <__ieee754_pow+0x730>)
 80047fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004800:	f7fb fcf0 	bl	80001e4 <__adddf3>
 8004804:	4622      	mov	r2, r4
 8004806:	4606      	mov	r6, r0
 8004808:	460f      	mov	r7, r1
 800480a:	462b      	mov	r3, r5
 800480c:	4620      	mov	r0, r4
 800480e:	4629      	mov	r1, r5
 8004810:	f7fb fe9e 	bl	8000550 <__aeabi_dmul>
 8004814:	4602      	mov	r2, r0
 8004816:	460b      	mov	r3, r1
 8004818:	4630      	mov	r0, r6
 800481a:	4639      	mov	r1, r7
 800481c:	f7fb fe98 	bl	8000550 <__aeabi_dmul>
 8004820:	4642      	mov	r2, r8
 8004822:	4604      	mov	r4, r0
 8004824:	460d      	mov	r5, r1
 8004826:	464b      	mov	r3, r9
 8004828:	ec51 0b18 	vmov	r0, r1, d8
 800482c:	f7fb fcda 	bl	80001e4 <__adddf3>
 8004830:	ec53 2b19 	vmov	r2, r3, d9
 8004834:	f7fb fe8c 	bl	8000550 <__aeabi_dmul>
 8004838:	4622      	mov	r2, r4
 800483a:	462b      	mov	r3, r5
 800483c:	f7fb fcd2 	bl	80001e4 <__adddf3>
 8004840:	4642      	mov	r2, r8
 8004842:	4682      	mov	sl, r0
 8004844:	468b      	mov	fp, r1
 8004846:	464b      	mov	r3, r9
 8004848:	4640      	mov	r0, r8
 800484a:	4649      	mov	r1, r9
 800484c:	f7fb fe80 	bl	8000550 <__aeabi_dmul>
 8004850:	4b6b      	ldr	r3, [pc, #428]	; (8004a00 <__ieee754_pow+0x770>)
 8004852:	2200      	movs	r2, #0
 8004854:	4606      	mov	r6, r0
 8004856:	460f      	mov	r7, r1
 8004858:	f7fb fcc4 	bl	80001e4 <__adddf3>
 800485c:	4652      	mov	r2, sl
 800485e:	465b      	mov	r3, fp
 8004860:	f7fb fcc0 	bl	80001e4 <__adddf3>
 8004864:	2000      	movs	r0, #0
 8004866:	4604      	mov	r4, r0
 8004868:	460d      	mov	r5, r1
 800486a:	4602      	mov	r2, r0
 800486c:	460b      	mov	r3, r1
 800486e:	4640      	mov	r0, r8
 8004870:	4649      	mov	r1, r9
 8004872:	f7fb fe6d 	bl	8000550 <__aeabi_dmul>
 8004876:	4b62      	ldr	r3, [pc, #392]	; (8004a00 <__ieee754_pow+0x770>)
 8004878:	4680      	mov	r8, r0
 800487a:	4689      	mov	r9, r1
 800487c:	2200      	movs	r2, #0
 800487e:	4620      	mov	r0, r4
 8004880:	4629      	mov	r1, r5
 8004882:	f7fb fcad 	bl	80001e0 <__aeabi_dsub>
 8004886:	4632      	mov	r2, r6
 8004888:	463b      	mov	r3, r7
 800488a:	f7fb fca9 	bl	80001e0 <__aeabi_dsub>
 800488e:	4602      	mov	r2, r0
 8004890:	460b      	mov	r3, r1
 8004892:	4650      	mov	r0, sl
 8004894:	4659      	mov	r1, fp
 8004896:	f7fb fca3 	bl	80001e0 <__aeabi_dsub>
 800489a:	ec53 2b18 	vmov	r2, r3, d8
 800489e:	f7fb fe57 	bl	8000550 <__aeabi_dmul>
 80048a2:	4622      	mov	r2, r4
 80048a4:	4606      	mov	r6, r0
 80048a6:	460f      	mov	r7, r1
 80048a8:	462b      	mov	r3, r5
 80048aa:	ec51 0b19 	vmov	r0, r1, d9
 80048ae:	f7fb fe4f 	bl	8000550 <__aeabi_dmul>
 80048b2:	4602      	mov	r2, r0
 80048b4:	460b      	mov	r3, r1
 80048b6:	4630      	mov	r0, r6
 80048b8:	4639      	mov	r1, r7
 80048ba:	f7fb fc93 	bl	80001e4 <__adddf3>
 80048be:	4606      	mov	r6, r0
 80048c0:	460f      	mov	r7, r1
 80048c2:	4602      	mov	r2, r0
 80048c4:	460b      	mov	r3, r1
 80048c6:	4640      	mov	r0, r8
 80048c8:	4649      	mov	r1, r9
 80048ca:	f7fb fc8b 	bl	80001e4 <__adddf3>
 80048ce:	a33e      	add	r3, pc, #248	; (adr r3, 80049c8 <__ieee754_pow+0x738>)
 80048d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d4:	2000      	movs	r0, #0
 80048d6:	4604      	mov	r4, r0
 80048d8:	460d      	mov	r5, r1
 80048da:	f7fb fe39 	bl	8000550 <__aeabi_dmul>
 80048de:	4642      	mov	r2, r8
 80048e0:	ec41 0b18 	vmov	d8, r0, r1
 80048e4:	464b      	mov	r3, r9
 80048e6:	4620      	mov	r0, r4
 80048e8:	4629      	mov	r1, r5
 80048ea:	f7fb fc79 	bl	80001e0 <__aeabi_dsub>
 80048ee:	4602      	mov	r2, r0
 80048f0:	460b      	mov	r3, r1
 80048f2:	4630      	mov	r0, r6
 80048f4:	4639      	mov	r1, r7
 80048f6:	f7fb fc73 	bl	80001e0 <__aeabi_dsub>
 80048fa:	a335      	add	r3, pc, #212	; (adr r3, 80049d0 <__ieee754_pow+0x740>)
 80048fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004900:	f7fb fe26 	bl	8000550 <__aeabi_dmul>
 8004904:	a334      	add	r3, pc, #208	; (adr r3, 80049d8 <__ieee754_pow+0x748>)
 8004906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490a:	4606      	mov	r6, r0
 800490c:	460f      	mov	r7, r1
 800490e:	4620      	mov	r0, r4
 8004910:	4629      	mov	r1, r5
 8004912:	f7fb fe1d 	bl	8000550 <__aeabi_dmul>
 8004916:	4602      	mov	r2, r0
 8004918:	460b      	mov	r3, r1
 800491a:	4630      	mov	r0, r6
 800491c:	4639      	mov	r1, r7
 800491e:	f7fb fc61 	bl	80001e4 <__adddf3>
 8004922:	9a07      	ldr	r2, [sp, #28]
 8004924:	4b37      	ldr	r3, [pc, #220]	; (8004a04 <__ieee754_pow+0x774>)
 8004926:	4413      	add	r3, r2
 8004928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492c:	f7fb fc5a 	bl	80001e4 <__adddf3>
 8004930:	4682      	mov	sl, r0
 8004932:	9805      	ldr	r0, [sp, #20]
 8004934:	468b      	mov	fp, r1
 8004936:	f7fb fda1 	bl	800047c <__aeabi_i2d>
 800493a:	9a07      	ldr	r2, [sp, #28]
 800493c:	4b32      	ldr	r3, [pc, #200]	; (8004a08 <__ieee754_pow+0x778>)
 800493e:	4413      	add	r3, r2
 8004940:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004944:	4606      	mov	r6, r0
 8004946:	460f      	mov	r7, r1
 8004948:	4652      	mov	r2, sl
 800494a:	465b      	mov	r3, fp
 800494c:	ec51 0b18 	vmov	r0, r1, d8
 8004950:	f7fb fc48 	bl	80001e4 <__adddf3>
 8004954:	4642      	mov	r2, r8
 8004956:	464b      	mov	r3, r9
 8004958:	f7fb fc44 	bl	80001e4 <__adddf3>
 800495c:	4632      	mov	r2, r6
 800495e:	463b      	mov	r3, r7
 8004960:	f7fb fc40 	bl	80001e4 <__adddf3>
 8004964:	2000      	movs	r0, #0
 8004966:	4632      	mov	r2, r6
 8004968:	463b      	mov	r3, r7
 800496a:	4604      	mov	r4, r0
 800496c:	460d      	mov	r5, r1
 800496e:	f7fb fc37 	bl	80001e0 <__aeabi_dsub>
 8004972:	4642      	mov	r2, r8
 8004974:	464b      	mov	r3, r9
 8004976:	f7fb fc33 	bl	80001e0 <__aeabi_dsub>
 800497a:	ec53 2b18 	vmov	r2, r3, d8
 800497e:	f7fb fc2f 	bl	80001e0 <__aeabi_dsub>
 8004982:	4602      	mov	r2, r0
 8004984:	460b      	mov	r3, r1
 8004986:	4650      	mov	r0, sl
 8004988:	4659      	mov	r1, fp
 800498a:	e610      	b.n	80045ae <__ieee754_pow+0x31e>
 800498c:	2401      	movs	r4, #1
 800498e:	e6a1      	b.n	80046d4 <__ieee754_pow+0x444>
 8004990:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80049e0 <__ieee754_pow+0x750>
 8004994:	e617      	b.n	80045c6 <__ieee754_pow+0x336>
 8004996:	bf00      	nop
 8004998:	4a454eef 	.word	0x4a454eef
 800499c:	3fca7e28 	.word	0x3fca7e28
 80049a0:	93c9db65 	.word	0x93c9db65
 80049a4:	3fcd864a 	.word	0x3fcd864a
 80049a8:	a91d4101 	.word	0xa91d4101
 80049ac:	3fd17460 	.word	0x3fd17460
 80049b0:	518f264d 	.word	0x518f264d
 80049b4:	3fd55555 	.word	0x3fd55555
 80049b8:	db6fabff 	.word	0xdb6fabff
 80049bc:	3fdb6db6 	.word	0x3fdb6db6
 80049c0:	33333303 	.word	0x33333303
 80049c4:	3fe33333 	.word	0x3fe33333
 80049c8:	e0000000 	.word	0xe0000000
 80049cc:	3feec709 	.word	0x3feec709
 80049d0:	dc3a03fd 	.word	0xdc3a03fd
 80049d4:	3feec709 	.word	0x3feec709
 80049d8:	145b01f5 	.word	0x145b01f5
 80049dc:	be3e2fe0 	.word	0xbe3e2fe0
 80049e0:	00000000 	.word	0x00000000
 80049e4:	3ff00000 	.word	0x3ff00000
 80049e8:	7ff00000 	.word	0x7ff00000
 80049ec:	43400000 	.word	0x43400000
 80049f0:	0003988e 	.word	0x0003988e
 80049f4:	000bb679 	.word	0x000bb679
 80049f8:	08005040 	.word	0x08005040
 80049fc:	3ff00000 	.word	0x3ff00000
 8004a00:	40080000 	.word	0x40080000
 8004a04:	08005060 	.word	0x08005060
 8004a08:	08005050 	.word	0x08005050
 8004a0c:	a3b3      	add	r3, pc, #716	; (adr r3, 8004cdc <__ieee754_pow+0xa4c>)
 8004a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a12:	4640      	mov	r0, r8
 8004a14:	4649      	mov	r1, r9
 8004a16:	f7fb fbe5 	bl	80001e4 <__adddf3>
 8004a1a:	4622      	mov	r2, r4
 8004a1c:	ec41 0b1a 	vmov	d10, r0, r1
 8004a20:	462b      	mov	r3, r5
 8004a22:	4630      	mov	r0, r6
 8004a24:	4639      	mov	r1, r7
 8004a26:	f7fb fbdb 	bl	80001e0 <__aeabi_dsub>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	ec51 0b1a 	vmov	r0, r1, d10
 8004a32:	f7fc f81d 	bl	8000a70 <__aeabi_dcmpgt>
 8004a36:	2800      	cmp	r0, #0
 8004a38:	f47f ae04 	bne.w	8004644 <__ieee754_pow+0x3b4>
 8004a3c:	4aa2      	ldr	r2, [pc, #648]	; (8004cc8 <__ieee754_pow+0xa38>)
 8004a3e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004a42:	4293      	cmp	r3, r2
 8004a44:	f340 8107 	ble.w	8004c56 <__ieee754_pow+0x9c6>
 8004a48:	151b      	asrs	r3, r3, #20
 8004a4a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004a4e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8004a52:	fa4a fa03 	asr.w	sl, sl, r3
 8004a56:	44da      	add	sl, fp
 8004a58:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8004a5c:	489b      	ldr	r0, [pc, #620]	; (8004ccc <__ieee754_pow+0xa3c>)
 8004a5e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8004a62:	4108      	asrs	r0, r1
 8004a64:	ea00 030a 	and.w	r3, r0, sl
 8004a68:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8004a6c:	f1c1 0114 	rsb	r1, r1, #20
 8004a70:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8004a74:	fa4a fa01 	asr.w	sl, sl, r1
 8004a78:	f1bb 0f00 	cmp.w	fp, #0
 8004a7c:	f04f 0200 	mov.w	r2, #0
 8004a80:	4620      	mov	r0, r4
 8004a82:	4629      	mov	r1, r5
 8004a84:	bfb8      	it	lt
 8004a86:	f1ca 0a00 	rsblt	sl, sl, #0
 8004a8a:	f7fb fba9 	bl	80001e0 <__aeabi_dsub>
 8004a8e:	ec41 0b19 	vmov	d9, r0, r1
 8004a92:	4642      	mov	r2, r8
 8004a94:	464b      	mov	r3, r9
 8004a96:	ec51 0b19 	vmov	r0, r1, d9
 8004a9a:	f7fb fba3 	bl	80001e4 <__adddf3>
 8004a9e:	a37a      	add	r3, pc, #488	; (adr r3, 8004c88 <__ieee754_pow+0x9f8>)
 8004aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa4:	2000      	movs	r0, #0
 8004aa6:	4604      	mov	r4, r0
 8004aa8:	460d      	mov	r5, r1
 8004aaa:	f7fb fd51 	bl	8000550 <__aeabi_dmul>
 8004aae:	ec53 2b19 	vmov	r2, r3, d9
 8004ab2:	4606      	mov	r6, r0
 8004ab4:	460f      	mov	r7, r1
 8004ab6:	4620      	mov	r0, r4
 8004ab8:	4629      	mov	r1, r5
 8004aba:	f7fb fb91 	bl	80001e0 <__aeabi_dsub>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	4640      	mov	r0, r8
 8004ac4:	4649      	mov	r1, r9
 8004ac6:	f7fb fb8b 	bl	80001e0 <__aeabi_dsub>
 8004aca:	a371      	add	r3, pc, #452	; (adr r3, 8004c90 <__ieee754_pow+0xa00>)
 8004acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad0:	f7fb fd3e 	bl	8000550 <__aeabi_dmul>
 8004ad4:	a370      	add	r3, pc, #448	; (adr r3, 8004c98 <__ieee754_pow+0xa08>)
 8004ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ada:	4680      	mov	r8, r0
 8004adc:	4689      	mov	r9, r1
 8004ade:	4620      	mov	r0, r4
 8004ae0:	4629      	mov	r1, r5
 8004ae2:	f7fb fd35 	bl	8000550 <__aeabi_dmul>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	460b      	mov	r3, r1
 8004aea:	4640      	mov	r0, r8
 8004aec:	4649      	mov	r1, r9
 8004aee:	f7fb fb79 	bl	80001e4 <__adddf3>
 8004af2:	4604      	mov	r4, r0
 8004af4:	460d      	mov	r5, r1
 8004af6:	4602      	mov	r2, r0
 8004af8:	460b      	mov	r3, r1
 8004afa:	4630      	mov	r0, r6
 8004afc:	4639      	mov	r1, r7
 8004afe:	f7fb fb71 	bl	80001e4 <__adddf3>
 8004b02:	4632      	mov	r2, r6
 8004b04:	463b      	mov	r3, r7
 8004b06:	4680      	mov	r8, r0
 8004b08:	4689      	mov	r9, r1
 8004b0a:	f7fb fb69 	bl	80001e0 <__aeabi_dsub>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	460b      	mov	r3, r1
 8004b12:	4620      	mov	r0, r4
 8004b14:	4629      	mov	r1, r5
 8004b16:	f7fb fb63 	bl	80001e0 <__aeabi_dsub>
 8004b1a:	4642      	mov	r2, r8
 8004b1c:	4606      	mov	r6, r0
 8004b1e:	460f      	mov	r7, r1
 8004b20:	464b      	mov	r3, r9
 8004b22:	4640      	mov	r0, r8
 8004b24:	4649      	mov	r1, r9
 8004b26:	f7fb fd13 	bl	8000550 <__aeabi_dmul>
 8004b2a:	a35d      	add	r3, pc, #372	; (adr r3, 8004ca0 <__ieee754_pow+0xa10>)
 8004b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b30:	4604      	mov	r4, r0
 8004b32:	460d      	mov	r5, r1
 8004b34:	f7fb fd0c 	bl	8000550 <__aeabi_dmul>
 8004b38:	a35b      	add	r3, pc, #364	; (adr r3, 8004ca8 <__ieee754_pow+0xa18>)
 8004b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b3e:	f7fb fb4f 	bl	80001e0 <__aeabi_dsub>
 8004b42:	4622      	mov	r2, r4
 8004b44:	462b      	mov	r3, r5
 8004b46:	f7fb fd03 	bl	8000550 <__aeabi_dmul>
 8004b4a:	a359      	add	r3, pc, #356	; (adr r3, 8004cb0 <__ieee754_pow+0xa20>)
 8004b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b50:	f7fb fb48 	bl	80001e4 <__adddf3>
 8004b54:	4622      	mov	r2, r4
 8004b56:	462b      	mov	r3, r5
 8004b58:	f7fb fcfa 	bl	8000550 <__aeabi_dmul>
 8004b5c:	a356      	add	r3, pc, #344	; (adr r3, 8004cb8 <__ieee754_pow+0xa28>)
 8004b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b62:	f7fb fb3d 	bl	80001e0 <__aeabi_dsub>
 8004b66:	4622      	mov	r2, r4
 8004b68:	462b      	mov	r3, r5
 8004b6a:	f7fb fcf1 	bl	8000550 <__aeabi_dmul>
 8004b6e:	a354      	add	r3, pc, #336	; (adr r3, 8004cc0 <__ieee754_pow+0xa30>)
 8004b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b74:	f7fb fb36 	bl	80001e4 <__adddf3>
 8004b78:	4622      	mov	r2, r4
 8004b7a:	462b      	mov	r3, r5
 8004b7c:	f7fb fce8 	bl	8000550 <__aeabi_dmul>
 8004b80:	4602      	mov	r2, r0
 8004b82:	460b      	mov	r3, r1
 8004b84:	4640      	mov	r0, r8
 8004b86:	4649      	mov	r1, r9
 8004b88:	f7fb fb2a 	bl	80001e0 <__aeabi_dsub>
 8004b8c:	4604      	mov	r4, r0
 8004b8e:	460d      	mov	r5, r1
 8004b90:	4602      	mov	r2, r0
 8004b92:	460b      	mov	r3, r1
 8004b94:	4640      	mov	r0, r8
 8004b96:	4649      	mov	r1, r9
 8004b98:	f7fb fcda 	bl	8000550 <__aeabi_dmul>
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	ec41 0b19 	vmov	d9, r0, r1
 8004ba2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004ba6:	4620      	mov	r0, r4
 8004ba8:	4629      	mov	r1, r5
 8004baa:	f7fb fb19 	bl	80001e0 <__aeabi_dsub>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	ec51 0b19 	vmov	r0, r1, d9
 8004bb6:	f7fb fdf5 	bl	80007a4 <__aeabi_ddiv>
 8004bba:	4632      	mov	r2, r6
 8004bbc:	4604      	mov	r4, r0
 8004bbe:	460d      	mov	r5, r1
 8004bc0:	463b      	mov	r3, r7
 8004bc2:	4640      	mov	r0, r8
 8004bc4:	4649      	mov	r1, r9
 8004bc6:	f7fb fcc3 	bl	8000550 <__aeabi_dmul>
 8004bca:	4632      	mov	r2, r6
 8004bcc:	463b      	mov	r3, r7
 8004bce:	f7fb fb09 	bl	80001e4 <__adddf3>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	4620      	mov	r0, r4
 8004bd8:	4629      	mov	r1, r5
 8004bda:	f7fb fb01 	bl	80001e0 <__aeabi_dsub>
 8004bde:	4642      	mov	r2, r8
 8004be0:	464b      	mov	r3, r9
 8004be2:	f7fb fafd 	bl	80001e0 <__aeabi_dsub>
 8004be6:	460b      	mov	r3, r1
 8004be8:	4602      	mov	r2, r0
 8004bea:	4939      	ldr	r1, [pc, #228]	; (8004cd0 <__ieee754_pow+0xa40>)
 8004bec:	2000      	movs	r0, #0
 8004bee:	f7fb faf7 	bl	80001e0 <__aeabi_dsub>
 8004bf2:	ec41 0b10 	vmov	d0, r0, r1
 8004bf6:	ee10 3a90 	vmov	r3, s1
 8004bfa:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8004bfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c02:	da2b      	bge.n	8004c5c <__ieee754_pow+0x9cc>
 8004c04:	4650      	mov	r0, sl
 8004c06:	f000 f877 	bl	8004cf8 <scalbn>
 8004c0a:	ec51 0b10 	vmov	r0, r1, d0
 8004c0e:	ec53 2b18 	vmov	r2, r3, d8
 8004c12:	f7ff bbee 	b.w	80043f2 <__ieee754_pow+0x162>
 8004c16:	4b2f      	ldr	r3, [pc, #188]	; (8004cd4 <__ieee754_pow+0xa44>)
 8004c18:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004c1c:	429e      	cmp	r6, r3
 8004c1e:	f77f af0d 	ble.w	8004a3c <__ieee754_pow+0x7ac>
 8004c22:	4b2d      	ldr	r3, [pc, #180]	; (8004cd8 <__ieee754_pow+0xa48>)
 8004c24:	440b      	add	r3, r1
 8004c26:	4303      	orrs	r3, r0
 8004c28:	d009      	beq.n	8004c3e <__ieee754_pow+0x9ae>
 8004c2a:	ec51 0b18 	vmov	r0, r1, d8
 8004c2e:	2200      	movs	r2, #0
 8004c30:	2300      	movs	r3, #0
 8004c32:	f7fb feff 	bl	8000a34 <__aeabi_dcmplt>
 8004c36:	3800      	subs	r0, #0
 8004c38:	bf18      	it	ne
 8004c3a:	2001      	movne	r0, #1
 8004c3c:	e448      	b.n	80044d0 <__ieee754_pow+0x240>
 8004c3e:	4622      	mov	r2, r4
 8004c40:	462b      	mov	r3, r5
 8004c42:	f7fb facd 	bl	80001e0 <__aeabi_dsub>
 8004c46:	4642      	mov	r2, r8
 8004c48:	464b      	mov	r3, r9
 8004c4a:	f7fb ff07 	bl	8000a5c <__aeabi_dcmpge>
 8004c4e:	2800      	cmp	r0, #0
 8004c50:	f43f aef4 	beq.w	8004a3c <__ieee754_pow+0x7ac>
 8004c54:	e7e9      	b.n	8004c2a <__ieee754_pow+0x99a>
 8004c56:	f04f 0a00 	mov.w	sl, #0
 8004c5a:	e71a      	b.n	8004a92 <__ieee754_pow+0x802>
 8004c5c:	ec51 0b10 	vmov	r0, r1, d0
 8004c60:	4619      	mov	r1, r3
 8004c62:	e7d4      	b.n	8004c0e <__ieee754_pow+0x97e>
 8004c64:	491a      	ldr	r1, [pc, #104]	; (8004cd0 <__ieee754_pow+0xa40>)
 8004c66:	2000      	movs	r0, #0
 8004c68:	f7ff bb31 	b.w	80042ce <__ieee754_pow+0x3e>
 8004c6c:	2000      	movs	r0, #0
 8004c6e:	2100      	movs	r1, #0
 8004c70:	f7ff bb2d 	b.w	80042ce <__ieee754_pow+0x3e>
 8004c74:	4630      	mov	r0, r6
 8004c76:	4639      	mov	r1, r7
 8004c78:	f7ff bb29 	b.w	80042ce <__ieee754_pow+0x3e>
 8004c7c:	9204      	str	r2, [sp, #16]
 8004c7e:	f7ff bb7b 	b.w	8004378 <__ieee754_pow+0xe8>
 8004c82:	2300      	movs	r3, #0
 8004c84:	f7ff bb65 	b.w	8004352 <__ieee754_pow+0xc2>
 8004c88:	00000000 	.word	0x00000000
 8004c8c:	3fe62e43 	.word	0x3fe62e43
 8004c90:	fefa39ef 	.word	0xfefa39ef
 8004c94:	3fe62e42 	.word	0x3fe62e42
 8004c98:	0ca86c39 	.word	0x0ca86c39
 8004c9c:	be205c61 	.word	0xbe205c61
 8004ca0:	72bea4d0 	.word	0x72bea4d0
 8004ca4:	3e663769 	.word	0x3e663769
 8004ca8:	c5d26bf1 	.word	0xc5d26bf1
 8004cac:	3ebbbd41 	.word	0x3ebbbd41
 8004cb0:	af25de2c 	.word	0xaf25de2c
 8004cb4:	3f11566a 	.word	0x3f11566a
 8004cb8:	16bebd93 	.word	0x16bebd93
 8004cbc:	3f66c16c 	.word	0x3f66c16c
 8004cc0:	5555553e 	.word	0x5555553e
 8004cc4:	3fc55555 	.word	0x3fc55555
 8004cc8:	3fe00000 	.word	0x3fe00000
 8004ccc:	fff00000 	.word	0xfff00000
 8004cd0:	3ff00000 	.word	0x3ff00000
 8004cd4:	4090cbff 	.word	0x4090cbff
 8004cd8:	3f6f3400 	.word	0x3f6f3400
 8004cdc:	652b82fe 	.word	0x652b82fe
 8004ce0:	3c971547 	.word	0x3c971547

08004ce4 <fabs>:
 8004ce4:	ec51 0b10 	vmov	r0, r1, d0
 8004ce8:	ee10 2a10 	vmov	r2, s0
 8004cec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004cf0:	ec43 2b10 	vmov	d0, r2, r3
 8004cf4:	4770      	bx	lr
	...

08004cf8 <scalbn>:
 8004cf8:	b570      	push	{r4, r5, r6, lr}
 8004cfa:	ec55 4b10 	vmov	r4, r5, d0
 8004cfe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8004d02:	4606      	mov	r6, r0
 8004d04:	462b      	mov	r3, r5
 8004d06:	b999      	cbnz	r1, 8004d30 <scalbn+0x38>
 8004d08:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004d0c:	4323      	orrs	r3, r4
 8004d0e:	d03f      	beq.n	8004d90 <scalbn+0x98>
 8004d10:	4b35      	ldr	r3, [pc, #212]	; (8004de8 <scalbn+0xf0>)
 8004d12:	4629      	mov	r1, r5
 8004d14:	ee10 0a10 	vmov	r0, s0
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f7fb fc19 	bl	8000550 <__aeabi_dmul>
 8004d1e:	4b33      	ldr	r3, [pc, #204]	; (8004dec <scalbn+0xf4>)
 8004d20:	429e      	cmp	r6, r3
 8004d22:	4604      	mov	r4, r0
 8004d24:	460d      	mov	r5, r1
 8004d26:	da10      	bge.n	8004d4a <scalbn+0x52>
 8004d28:	a327      	add	r3, pc, #156	; (adr r3, 8004dc8 <scalbn+0xd0>)
 8004d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2e:	e01f      	b.n	8004d70 <scalbn+0x78>
 8004d30:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004d34:	4291      	cmp	r1, r2
 8004d36:	d10c      	bne.n	8004d52 <scalbn+0x5a>
 8004d38:	ee10 2a10 	vmov	r2, s0
 8004d3c:	4620      	mov	r0, r4
 8004d3e:	4629      	mov	r1, r5
 8004d40:	f7fb fa50 	bl	80001e4 <__adddf3>
 8004d44:	4604      	mov	r4, r0
 8004d46:	460d      	mov	r5, r1
 8004d48:	e022      	b.n	8004d90 <scalbn+0x98>
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004d50:	3936      	subs	r1, #54	; 0x36
 8004d52:	f24c 3250 	movw	r2, #50000	; 0xc350
 8004d56:	4296      	cmp	r6, r2
 8004d58:	dd0d      	ble.n	8004d76 <scalbn+0x7e>
 8004d5a:	2d00      	cmp	r5, #0
 8004d5c:	a11c      	add	r1, pc, #112	; (adr r1, 8004dd0 <scalbn+0xd8>)
 8004d5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d62:	da02      	bge.n	8004d6a <scalbn+0x72>
 8004d64:	a11c      	add	r1, pc, #112	; (adr r1, 8004dd8 <scalbn+0xe0>)
 8004d66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d6a:	a319      	add	r3, pc, #100	; (adr r3, 8004dd0 <scalbn+0xd8>)
 8004d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d70:	f7fb fbee 	bl	8000550 <__aeabi_dmul>
 8004d74:	e7e6      	b.n	8004d44 <scalbn+0x4c>
 8004d76:	1872      	adds	r2, r6, r1
 8004d78:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004d7c:	428a      	cmp	r2, r1
 8004d7e:	dcec      	bgt.n	8004d5a <scalbn+0x62>
 8004d80:	2a00      	cmp	r2, #0
 8004d82:	dd08      	ble.n	8004d96 <scalbn+0x9e>
 8004d84:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004d88:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004d8c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004d90:	ec45 4b10 	vmov	d0, r4, r5
 8004d94:	bd70      	pop	{r4, r5, r6, pc}
 8004d96:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004d9a:	da08      	bge.n	8004dae <scalbn+0xb6>
 8004d9c:	2d00      	cmp	r5, #0
 8004d9e:	a10a      	add	r1, pc, #40	; (adr r1, 8004dc8 <scalbn+0xd0>)
 8004da0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004da4:	dac0      	bge.n	8004d28 <scalbn+0x30>
 8004da6:	a10e      	add	r1, pc, #56	; (adr r1, 8004de0 <scalbn+0xe8>)
 8004da8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004dac:	e7bc      	b.n	8004d28 <scalbn+0x30>
 8004dae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004db2:	3236      	adds	r2, #54	; 0x36
 8004db4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004db8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8004dbc:	4620      	mov	r0, r4
 8004dbe:	4b0c      	ldr	r3, [pc, #48]	; (8004df0 <scalbn+0xf8>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	e7d5      	b.n	8004d70 <scalbn+0x78>
 8004dc4:	f3af 8000 	nop.w
 8004dc8:	c2f8f359 	.word	0xc2f8f359
 8004dcc:	01a56e1f 	.word	0x01a56e1f
 8004dd0:	8800759c 	.word	0x8800759c
 8004dd4:	7e37e43c 	.word	0x7e37e43c
 8004dd8:	8800759c 	.word	0x8800759c
 8004ddc:	fe37e43c 	.word	0xfe37e43c
 8004de0:	c2f8f359 	.word	0xc2f8f359
 8004de4:	81a56e1f 	.word	0x81a56e1f
 8004de8:	43500000 	.word	0x43500000
 8004dec:	ffff3cb0 	.word	0xffff3cb0
 8004df0:	3c900000 	.word	0x3c900000

08004df4 <with_errno>:
 8004df4:	b570      	push	{r4, r5, r6, lr}
 8004df6:	4604      	mov	r4, r0
 8004df8:	460d      	mov	r5, r1
 8004dfa:	4616      	mov	r6, r2
 8004dfc:	f7ff f9a2 	bl	8004144 <__errno>
 8004e00:	4629      	mov	r1, r5
 8004e02:	6006      	str	r6, [r0, #0]
 8004e04:	4620      	mov	r0, r4
 8004e06:	bd70      	pop	{r4, r5, r6, pc}

08004e08 <xflow>:
 8004e08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e0a:	4614      	mov	r4, r2
 8004e0c:	461d      	mov	r5, r3
 8004e0e:	b108      	cbz	r0, 8004e14 <xflow+0xc>
 8004e10:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004e14:	e9cd 2300 	strd	r2, r3, [sp]
 8004e18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e1c:	4620      	mov	r0, r4
 8004e1e:	4629      	mov	r1, r5
 8004e20:	f7fb fb96 	bl	8000550 <__aeabi_dmul>
 8004e24:	2222      	movs	r2, #34	; 0x22
 8004e26:	b003      	add	sp, #12
 8004e28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e2c:	f7ff bfe2 	b.w	8004df4 <with_errno>

08004e30 <__math_uflow>:
 8004e30:	b508      	push	{r3, lr}
 8004e32:	2200      	movs	r2, #0
 8004e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004e38:	f7ff ffe6 	bl	8004e08 <xflow>
 8004e3c:	ec41 0b10 	vmov	d0, r0, r1
 8004e40:	bd08      	pop	{r3, pc}

08004e42 <__math_oflow>:
 8004e42:	b508      	push	{r3, lr}
 8004e44:	2200      	movs	r2, #0
 8004e46:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004e4a:	f7ff ffdd 	bl	8004e08 <xflow>
 8004e4e:	ec41 0b10 	vmov	d0, r0, r1
 8004e52:	bd08      	pop	{r3, pc}

08004e54 <__ieee754_sqrt>:
 8004e54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e58:	ec55 4b10 	vmov	r4, r5, d0
 8004e5c:	4e67      	ldr	r6, [pc, #412]	; (8004ffc <__ieee754_sqrt+0x1a8>)
 8004e5e:	43ae      	bics	r6, r5
 8004e60:	ee10 0a10 	vmov	r0, s0
 8004e64:	ee10 2a10 	vmov	r2, s0
 8004e68:	4629      	mov	r1, r5
 8004e6a:	462b      	mov	r3, r5
 8004e6c:	d10d      	bne.n	8004e8a <__ieee754_sqrt+0x36>
 8004e6e:	f7fb fb6f 	bl	8000550 <__aeabi_dmul>
 8004e72:	4602      	mov	r2, r0
 8004e74:	460b      	mov	r3, r1
 8004e76:	4620      	mov	r0, r4
 8004e78:	4629      	mov	r1, r5
 8004e7a:	f7fb f9b3 	bl	80001e4 <__adddf3>
 8004e7e:	4604      	mov	r4, r0
 8004e80:	460d      	mov	r5, r1
 8004e82:	ec45 4b10 	vmov	d0, r4, r5
 8004e86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e8a:	2d00      	cmp	r5, #0
 8004e8c:	dc0b      	bgt.n	8004ea6 <__ieee754_sqrt+0x52>
 8004e8e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004e92:	4326      	orrs	r6, r4
 8004e94:	d0f5      	beq.n	8004e82 <__ieee754_sqrt+0x2e>
 8004e96:	b135      	cbz	r5, 8004ea6 <__ieee754_sqrt+0x52>
 8004e98:	f7fb f9a2 	bl	80001e0 <__aeabi_dsub>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	f7fb fc80 	bl	80007a4 <__aeabi_ddiv>
 8004ea4:	e7eb      	b.n	8004e7e <__ieee754_sqrt+0x2a>
 8004ea6:	1509      	asrs	r1, r1, #20
 8004ea8:	f000 808d 	beq.w	8004fc6 <__ieee754_sqrt+0x172>
 8004eac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004eb0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8004eb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004eb8:	07c9      	lsls	r1, r1, #31
 8004eba:	bf5c      	itt	pl
 8004ebc:	005b      	lslpl	r3, r3, #1
 8004ebe:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8004ec2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004ec6:	bf58      	it	pl
 8004ec8:	0052      	lslpl	r2, r2, #1
 8004eca:	2500      	movs	r5, #0
 8004ecc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8004ed0:	1076      	asrs	r6, r6, #1
 8004ed2:	0052      	lsls	r2, r2, #1
 8004ed4:	f04f 0e16 	mov.w	lr, #22
 8004ed8:	46ac      	mov	ip, r5
 8004eda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ede:	eb0c 0001 	add.w	r0, ip, r1
 8004ee2:	4298      	cmp	r0, r3
 8004ee4:	bfde      	ittt	le
 8004ee6:	1a1b      	suble	r3, r3, r0
 8004ee8:	eb00 0c01 	addle.w	ip, r0, r1
 8004eec:	186d      	addle	r5, r5, r1
 8004eee:	005b      	lsls	r3, r3, #1
 8004ef0:	f1be 0e01 	subs.w	lr, lr, #1
 8004ef4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8004ef8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8004efc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8004f00:	d1ed      	bne.n	8004ede <__ieee754_sqrt+0x8a>
 8004f02:	4674      	mov	r4, lr
 8004f04:	2720      	movs	r7, #32
 8004f06:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004f0a:	4563      	cmp	r3, ip
 8004f0c:	eb01 000e 	add.w	r0, r1, lr
 8004f10:	dc02      	bgt.n	8004f18 <__ieee754_sqrt+0xc4>
 8004f12:	d113      	bne.n	8004f3c <__ieee754_sqrt+0xe8>
 8004f14:	4290      	cmp	r0, r2
 8004f16:	d811      	bhi.n	8004f3c <__ieee754_sqrt+0xe8>
 8004f18:	2800      	cmp	r0, #0
 8004f1a:	eb00 0e01 	add.w	lr, r0, r1
 8004f1e:	da57      	bge.n	8004fd0 <__ieee754_sqrt+0x17c>
 8004f20:	f1be 0f00 	cmp.w	lr, #0
 8004f24:	db54      	blt.n	8004fd0 <__ieee754_sqrt+0x17c>
 8004f26:	f10c 0801 	add.w	r8, ip, #1
 8004f2a:	eba3 030c 	sub.w	r3, r3, ip
 8004f2e:	4290      	cmp	r0, r2
 8004f30:	bf88      	it	hi
 8004f32:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8004f36:	1a12      	subs	r2, r2, r0
 8004f38:	440c      	add	r4, r1
 8004f3a:	46c4      	mov	ip, r8
 8004f3c:	005b      	lsls	r3, r3, #1
 8004f3e:	3f01      	subs	r7, #1
 8004f40:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8004f44:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8004f48:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8004f4c:	d1dd      	bne.n	8004f0a <__ieee754_sqrt+0xb6>
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	d01b      	beq.n	8004f8a <__ieee754_sqrt+0x136>
 8004f52:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8005000 <__ieee754_sqrt+0x1ac>
 8004f56:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8005004 <__ieee754_sqrt+0x1b0>
 8004f5a:	e9da 0100 	ldrd	r0, r1, [sl]
 8004f5e:	e9db 2300 	ldrd	r2, r3, [fp]
 8004f62:	f7fb f93d 	bl	80001e0 <__aeabi_dsub>
 8004f66:	e9da 8900 	ldrd	r8, r9, [sl]
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	4640      	mov	r0, r8
 8004f70:	4649      	mov	r1, r9
 8004f72:	f7fb fd69 	bl	8000a48 <__aeabi_dcmple>
 8004f76:	b140      	cbz	r0, 8004f8a <__ieee754_sqrt+0x136>
 8004f78:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8004f7c:	e9da 0100 	ldrd	r0, r1, [sl]
 8004f80:	e9db 2300 	ldrd	r2, r3, [fp]
 8004f84:	d126      	bne.n	8004fd4 <__ieee754_sqrt+0x180>
 8004f86:	3501      	adds	r5, #1
 8004f88:	463c      	mov	r4, r7
 8004f8a:	106a      	asrs	r2, r5, #1
 8004f8c:	0863      	lsrs	r3, r4, #1
 8004f8e:	07e9      	lsls	r1, r5, #31
 8004f90:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8004f94:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8004f98:	bf48      	it	mi
 8004f9a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8004f9e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8004fa2:	461c      	mov	r4, r3
 8004fa4:	e76d      	b.n	8004e82 <__ieee754_sqrt+0x2e>
 8004fa6:	0ad3      	lsrs	r3, r2, #11
 8004fa8:	3815      	subs	r0, #21
 8004faa:	0552      	lsls	r2, r2, #21
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d0fa      	beq.n	8004fa6 <__ieee754_sqrt+0x152>
 8004fb0:	02dc      	lsls	r4, r3, #11
 8004fb2:	d50a      	bpl.n	8004fca <__ieee754_sqrt+0x176>
 8004fb4:	f1c1 0420 	rsb	r4, r1, #32
 8004fb8:	fa22 f404 	lsr.w	r4, r2, r4
 8004fbc:	1e4d      	subs	r5, r1, #1
 8004fbe:	408a      	lsls	r2, r1
 8004fc0:	4323      	orrs	r3, r4
 8004fc2:	1b41      	subs	r1, r0, r5
 8004fc4:	e772      	b.n	8004eac <__ieee754_sqrt+0x58>
 8004fc6:	4608      	mov	r0, r1
 8004fc8:	e7f0      	b.n	8004fac <__ieee754_sqrt+0x158>
 8004fca:	005b      	lsls	r3, r3, #1
 8004fcc:	3101      	adds	r1, #1
 8004fce:	e7ef      	b.n	8004fb0 <__ieee754_sqrt+0x15c>
 8004fd0:	46e0      	mov	r8, ip
 8004fd2:	e7aa      	b.n	8004f2a <__ieee754_sqrt+0xd6>
 8004fd4:	f7fb f906 	bl	80001e4 <__adddf3>
 8004fd8:	e9da 8900 	ldrd	r8, r9, [sl]
 8004fdc:	4602      	mov	r2, r0
 8004fde:	460b      	mov	r3, r1
 8004fe0:	4640      	mov	r0, r8
 8004fe2:	4649      	mov	r1, r9
 8004fe4:	f7fb fd26 	bl	8000a34 <__aeabi_dcmplt>
 8004fe8:	b120      	cbz	r0, 8004ff4 <__ieee754_sqrt+0x1a0>
 8004fea:	1ca0      	adds	r0, r4, #2
 8004fec:	bf08      	it	eq
 8004fee:	3501      	addeq	r5, #1
 8004ff0:	3402      	adds	r4, #2
 8004ff2:	e7ca      	b.n	8004f8a <__ieee754_sqrt+0x136>
 8004ff4:	3401      	adds	r4, #1
 8004ff6:	f024 0401 	bic.w	r4, r4, #1
 8004ffa:	e7c6      	b.n	8004f8a <__ieee754_sqrt+0x136>
 8004ffc:	7ff00000 	.word	0x7ff00000
 8005000:	20000060 	.word	0x20000060
 8005004:	20000068 	.word	0x20000068

08005008 <_init>:
 8005008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800500a:	bf00      	nop
 800500c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800500e:	bc08      	pop	{r3}
 8005010:	469e      	mov	lr, r3
 8005012:	4770      	bx	lr

08005014 <_fini>:
 8005014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005016:	bf00      	nop
 8005018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800501a:	bc08      	pop	{r3}
 800501c:	469e      	mov	lr, r3
 800501e:	4770      	bx	lr
